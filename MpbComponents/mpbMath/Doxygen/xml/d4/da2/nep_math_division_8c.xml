<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="d4/da2/nep_math_division_8c" kind="file" language="C++">
    <compoundname>nepMathDivision.c</compoundname>
    <includes local="yes">nepMathDivision.h</includes>
    <includes local="yes">nepMath.h</includes>
    <incdepgraph>
      <node id="2">
        <label>nepMathDivision.h</label>
      </node>
      <node id="1">
        <label>Sources/nepMathDivision.c</label>
        <link refid="d4/da2/nep_math_division_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>nepMath.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="d4/da2/nep_math_division_8c_1abadd2b97f5c02f21dcd5f267e0019327" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float vroundf</definition>
        <argsstring>(float var)</argsstring>
        <name>vroundf</name>
        <param>
          <type>float</type>
          <declname>var</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Sources/nepMathDivision.c" line="33" column="7" bodyfile="Sources/nepMathDivision.c" bodystart="33" bodyend="41" declfile="Sources/nepMathDivision.c" declline="30" declcolumn="7"/>
        <referencedby refid="d4/da2/nep_math_division_8c_1a33cf184e2e88a8e24b568bcf6271ef27" compoundref="d4/da2/nep_math_division_8c" startline="110" endline="136">eNepMathDivisionDouble</referencedby>
        <referencedby refid="d4/da2/nep_math_division_8c_1a60ac84a774c7fbaee274bcf455462144" compoundref="d4/da2/nep_math_division_8c" startline="82" endline="107">eNepMathDivisionFloat</referencedby>
      </memberdef>
      <memberdef kind="function" id="d4/da2/nep_math_division_8c_1a35af8352eb0a3b5cc48d29d628c2fea5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>eNepError_t</type>
        <definition>eNepError_t eNepMathDivisionU32</definition>
        <argsstring>(uint32_t ulNumerator, uint32_t ulDenominator, uint32_t *pulResult)</argsstring>
        <name>eNepMathDivisionU32</name>
        <param>
          <type>uint32_t</type>
          <declname>ulNumerator</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>ulDenominator</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>pulResult</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Sources/nepMathDivision.c" line="67" column="13" bodyfile="Sources/nepMathDivision.c" bodystart="67" bodyend="79"/>
        <referencedby refid="da/dd2/nep_math_resistor_8c_1aa16d01ecd4069f9a07ce4bf732c4ff48" compoundref="da/dd2/nep_math_resistor_8c" startline="150" endline="158">eNepMathResistorGetEquivalentInParallel</referencedby>
        <referencedby refid="da/dd2/nep_math_resistor_8c_1a26cc1a93ad3c10d09c7a54a6bc75affe" compoundref="da/dd2/nep_math_resistor_8c" startline="161" endline="169">eNepMathResistorGetResistorInParallel</referencedby>
        <referencedby refid="da/dd2/nep_math_resistor_8c_1a75fa877038a4bed9de5cf7890ceec403" compoundref="da/dd2/nep_math_resistor_8c" startline="74" endline="82">eNepMathResistorVoltageDividerGetPullDownResistor</referencedby>
        <referencedby refid="da/dd2/nep_math_resistor_8c_1ad6509ffdb6a78f10334d325d9e6b895f" compoundref="da/dd2/nep_math_resistor_8c" startline="52" endline="71">eNepMathResistorVoltageDividerGetPullUpResistor</referencedby>
        <referencedby refid="da/dd2/nep_math_resistor_8c_1ad6a10945de079e239869469c8c1bc054" compoundref="da/dd2/nep_math_resistor_8c" startline="41" endline="49">eNepMathResistorVoltageDividerGetVin</referencedby>
        <referencedby refid="da/dd2/nep_math_resistor_8c_1ae5241ccf59b79d82ffe76311b914bfbc" compoundref="da/dd2/nep_math_resistor_8c" startline="30" endline="38">eNepMathResistorVoltageDividerGetVout</referencedby>
      </memberdef>
      <memberdef kind="function" id="d4/da2/nep_math_division_8c_1a60ac84a774c7fbaee274bcf455462144" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>eNepError_t</type>
        <definition>eNepError_t eNepMathDivisionFloat</definition>
        <argsstring>(float fNumerator, float fDenominator, float *pfResult)</argsstring>
        <name>eNepMathDivisionFloat</name>
        <param>
          <type>float</type>
          <declname>fNumerator</declname>
        </param>
        <param>
          <type>float</type>
          <declname>fDenominator</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>pfResult</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Sources/nepMathDivision.c" line="82" column="13" bodyfile="Sources/nepMathDivision.c" bodystart="82" bodyend="107"/>
        <references refid="d4/da2/nep_math_division_8c_1abadd2b97f5c02f21dcd5f267e0019327" compoundref="d4/da2/nep_math_division_8c" startline="33" endline="41">vroundf</references>
        <referencedby refid="df/d8c/nep_math_linear_approx_8c_1a59d17cb403e325a3de3a212429cfae0e" compoundref="df/d8c/nep_math_linear_approx_8c" startline="168" endline="229">eNepMathLinearApproxFloat</referencedby>
        <referencedby refid="de/d2e/nep_math_op_amp_8c_1a1b5e1782b97c8215b4c34c1b248c3117" compoundref="de/d2e/nep_math_op_amp_8c" startline="103" endline="166">eNepMathOpAmpGetOutputVoltage</referencedby>
        <referencedby refid="da/dd2/nep_math_resistor_8c_1a6c3ddde27117d4b228e68a0a1ecc33e2" compoundref="da/dd2/nep_math_resistor_8c" startline="129" endline="147">eNepMathResistorFloatVoltageDividerGetPullDownResistor</referencedby>
        <referencedby refid="da/dd2/nep_math_resistor_8c_1ae6ac45228bdb8a9aa944d570664f317b" compoundref="da/dd2/nep_math_resistor_8c" startline="107" endline="126">eNepMathResistorFloatVoltageDividerGetPullUpResistor</referencedby>
        <referencedby refid="da/dd2/nep_math_resistor_8c_1a54f1101c214cf059e1203ef6b488f5c5" compoundref="da/dd2/nep_math_resistor_8c" startline="96" endline="104">eNepMathResistorFloatVoltageDividerGetVin</referencedby>
        <referencedby refid="da/dd2/nep_math_resistor_8c_1a3bc59e61833953e8d391383db62cbe64" compoundref="da/dd2/nep_math_resistor_8c" startline="85" endline="93">eNepMathResistorFloatVoltageDividerGetVout</referencedby>
        <referencedby refid="d1/da7/nep_math_round_8c_1a9fb2fb61bf73349e0e1ba6615abce29b" compoundref="d1/da7/nep_math_round_8c" startline="132" endline="154">eNepMathRoundToPrecisionFloat</referencedby>
      </memberdef>
      <memberdef kind="function" id="d4/da2/nep_math_division_8c_1a33cf184e2e88a8e24b568bcf6271ef27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>eNepError_t</type>
        <definition>eNepError_t eNepMathDivisionDouble</definition>
        <argsstring>(double fdNumerator, double fdDenominator, double *pdfResult)</argsstring>
        <name>eNepMathDivisionDouble</name>
        <param>
          <type>double</type>
          <declname>fdNumerator</declname>
        </param>
        <param>
          <type>double</type>
          <declname>fdDenominator</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>pdfResult</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Sources/nepMathDivision.c" line="110" column="13" bodyfile="Sources/nepMathDivision.c" bodystart="110" bodyend="136"/>
        <references refid="d4/da2/nep_math_division_8c_1abadd2b97f5c02f21dcd5f267e0019327" compoundref="d4/da2/nep_math_division_8c" startline="33" endline="41">vroundf</references>
        <referencedby refid="d5/dbd/nep_math_average_8c_1a7c618890b7de463bd3c7d4da0c2b1eeb" compoundref="d5/dbd/nep_math_average_8c" startline="54" endline="76">eNepMathAverageFloat</referencedby>
      </memberdef>
      <memberdef kind="function" id="d4/da2/nep_math_division_8c_1ae2bb9f94ddcb10fe3b08a7c0bcfb594f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>eNepError_t</type>
        <definition>eNepError_t eNepMathDivisionS64</definition>
        <argsstring>(int64_t sllNumerator, int64_t sllDenominator, int64_t *psllResult)</argsstring>
        <name>eNepMathDivisionS64</name>
        <param>
          <type>int64_t</type>
          <declname>sllNumerator</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>sllDenominator</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>psllResult</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Sources/nepMathDivision.c" line="155" column="13" bodyfile="Sources/nepMathDivision.c" bodystart="155" bodyend="177"/>
        <referencedby refid="d5/dbd/nep_math_average_8c_1a668a4757f277337489afa1f06b5ce7f5" compoundref="d5/dbd/nep_math_average_8c" startline="29" endline="51">eNepMathAverageS32</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Library to calculate divisions. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Mikael Plouffe </para>
</simplesect>
<simplesect kind="date"><para>Created on 2019-04-25 </para>
</simplesect>
<simplesect kind="note"><para></para>
</simplesect>
<simplesect kind="copyright"><para>NEP, Montreal, Qc <heading level="2"><center><copy/> COPYRIGHT 2015 NEP, Montreal, Quebec, Canada</center></heading>
</para>
</simplesect>
<heading level="2"><center><copy/> All rights reserved.</center></heading>
</para>
<para><linebreak/>
<linebreak/>
 <center>This document contains confidential and proprietary information of NEPTRONIC (subject to a non-disclosure agreement) and shall</center> <center>not be disclosed, distributed, or reproduced in whole or in part, without the prior written authorization of NEPTRONIC.</center> </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Includes<sp/>-----------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;nepMathDivision.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;nepMath.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//#include<sp/>&quot;math.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Private<sp/>define<sp/>-----------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Private<sp/>macro<sp/>------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Private<sp/>enum<sp/>-------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Private<sp/>struct<sp/>-----------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Private<sp/>variables<sp/>--------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>External<sp/>variables<sp/>-------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Private<sp/>function<sp/>prototypes<sp/>----------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="d4/da2/nep_math_division_8c_1abadd2b97f5c02f21dcd5f267e0019327" kindref="member">vroundf</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>var);<sp/></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Private<sp/>functions<sp/>--------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Exported<sp/>functions<sp/>-------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33" refid="d4/da2/nep_math_division_8c_1abadd2b97f5c02f21dcd5f267e0019327" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="d4/da2/nep_math_division_8c_1abadd2b97f5c02f21dcd5f267e0019327" kindref="member">vroundf</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>var)<sp/></highlight></codeline>
<codeline lineno="34"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>37.66666<sp/>*<sp/>100<sp/>=3766.66<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>3766.66<sp/>+<sp/>.5<sp/>=3767.16<sp/><sp/><sp/><sp/>for<sp/>rounding<sp/>off<sp/>value<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>then<sp/>type<sp/>cast<sp/>to<sp/>int<sp/>so<sp/>value<sp/>is<sp/>3767<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>then<sp/>divided<sp/>by<sp/>100<sp/>so<sp/>the<sp/>value<sp/>converted<sp/>into<sp/>37.67<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>(int)(var<sp/>*<sp/>100<sp/>+<sp/>.5);<sp/></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)value<sp/>/<sp/>100;<sp/></highlight></codeline>
<codeline lineno="41"><highlight class="normal">}<sp/></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">//eNepError_t<sp/>eNepMathDivisionS32(<sp/>int32_t<sp/>slNumerator,<sp/>int32_t<sp/>slDenominator,<sp/>int32_t<sp/>*pslResult<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">//{<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>if(<sp/>(<sp/>slDenominator<sp/>==<sp/>0<sp/>)<sp/>||<sp/>(<sp/>pslResult<sp/>==<sp/>NULL<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>eInvalidParameter;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>/*<sp/>If<sp/>result<sp/>is<sp/>positive<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>if(<sp/>(<sp/>(<sp/>slNumerator<sp/>&gt;<sp/>0<sp/>)<sp/>&amp;&amp;<sp/>(<sp/>slDenominator<sp/>&gt;<sp/>0<sp/>)<sp/>)<sp/>||<sp/>(<sp/>(<sp/>slNumerator<sp/>&lt;<sp/>0<sp/>)<sp/>&amp;&amp;<sp/>(<sp/>slDenominator<sp/>&lt;<sp/>0<sp/>)<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>/*<sp/>Add<sp/>half<sp/>of<sp/>divider<sp/>for<sp/>rounding<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>slNumerator<sp/>+=<sp/>(<sp/>slDenominator<sp/>&gt;&gt;<sp/>1<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>/*<sp/>Remove<sp/>half<sp/>of<sp/>divider<sp/>for<sp/>rounding<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>slNumerator<sp/>-=<sp/>(<sp/>slDenominator<sp/>&gt;&gt;<sp/>1<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>*pslResult<sp/>=<sp/>(<sp/>slNumerator<sp/>/<sp/>slDenominator<sp/>);<sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>return<sp/>eSuccess;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="comment">/*----------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67" refid="d4/da2/nep_math_division_8c_1a35af8352eb0a3b5cc48d29d628c2fea5" refkind="member"><highlight class="normal">eNepError_t<sp/><ref refid="d4/da2/nep_math_division_8c_1a35af8352eb0a3b5cc48d29d628c2fea5" kindref="member">eNepMathDivisionU32</ref>(<sp/>uint32_t<sp/>ulNumerator,<sp/>uint32_t<sp/>ulDenominator,<sp/>uint32_t<sp/>*pulResult<sp/>)</highlight></codeline>
<codeline lineno="68"><highlight class="normal">{<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(<sp/>ulDenominator<sp/>==<sp/>0<sp/>)<sp/>||<sp/>(<sp/>pulResult<sp/>==<sp/>NULL<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eInvalidParameter;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Add<sp/>half<sp/>of<sp/>divider<sp/>for<sp/>rounding<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>ulNumerator<sp/>+=<sp/>(<sp/>ulDenominator<sp/>&gt;&gt;<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>*pulResult<sp/>=<sp/>(<sp/>ulNumerator<sp/>/<sp/>ulDenominator<sp/>);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eSuccess;</highlight></codeline>
<codeline lineno="79"><highlight class="normal">}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="comment">/*----------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82" refid="d4/da2/nep_math_division_8c_1a60ac84a774c7fbaee274bcf455462144" refkind="member"><highlight class="normal">eNepError_t<sp/><ref refid="d4/da2/nep_math_division_8c_1a60ac84a774c7fbaee274bcf455462144" kindref="member">eNepMathDivisionFloat</ref>(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>fNumerator,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>fDenominator,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*pfResult<sp/>)</highlight></codeline>
<codeline lineno="83"><highlight class="normal">{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>fResultCheck<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>ulSixthDecimalPrecision<sp/>=<sp/>1000000;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pfResult<sp/>==<sp/>NULL<sp/>)</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eInvalidParameter;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>fResultCheck<sp/>=<sp/>(<sp/>fNumerator<sp/>/<sp/>fDenominator<sp/>);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Rounding<sp/>to<sp/>the<sp/>6th<sp/>decimal<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>fResultCheck<sp/>=<sp/>(<sp/><ref refid="d4/da2/nep_math_division_8c_1abadd2b97f5c02f21dcd5f267e0019327" kindref="member">vroundf</ref>(<sp/>ulSixthDecimalPrecision<sp/>*<sp/>fResultCheck<sp/>)<sp/>/<sp/>ulSixthDecimalPrecision<sp/>);<sp/></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(<sp/>eNepMathFloatIsInfinity(<sp/>fResultCheck<sp/>)<sp/>==<sp/>eTrue<sp/>)<sp/>||<sp/>(<sp/>eNepMathFloatIsNaN(<sp/>fResultCheck<sp/>)<sp/>==<sp/>eTrue<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eInvalidParameter;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pfResult<sp/>=<sp/>fResultCheck;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eSuccess;</highlight></codeline>
<codeline lineno="107"><highlight class="normal">}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="comment">/*----------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110" refid="d4/da2/nep_math_division_8c_1a33cf184e2e88a8e24b568bcf6271ef27" refkind="member"><highlight class="normal">eNepError_t<sp/><ref refid="d4/da2/nep_math_division_8c_1a33cf184e2e88a8e24b568bcf6271ef27" kindref="member">eNepMathDivisionDouble</ref>(<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>fdNumerator,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>fdDenominator,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*pdfResult<sp/>)</highlight></codeline>
<codeline lineno="111"><highlight class="normal">{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>fdResultCheck<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>ulSixthDecimalPrecision<sp/>=<sp/>1000000;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pdfResult<sp/>==<sp/>NULL<sp/>)</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eInvalidParameter;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>fdResultCheck<sp/>=<sp/>(<sp/>fdNumerator<sp/>/<sp/>fdDenominator<sp/>);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Rounding<sp/>to<sp/>the<sp/>6th<sp/>decimal<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>fdResultCheck<sp/>=<sp/>(<sp/><ref refid="d4/da2/nep_math_division_8c_1abadd2b97f5c02f21dcd5f267e0019327" kindref="member">vroundf</ref>(<sp/>ulSixthDecimalPrecision<sp/>*<sp/>fdResultCheck<sp/>)<sp/>/<sp/>ulSixthDecimalPrecision<sp/>);<sp/></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(<sp/>eNepMathDoubleIsInfinity(<sp/>fdResultCheck<sp/>)<sp/>==<sp/>eTrue<sp/>)<sp/>||<sp/>(<sp/>eNepMathDoubleIsNaN(<sp/>fdResultCheck<sp/>)<sp/>==<sp/>eTrue<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eInvalidParameter;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pdfResult<sp/>=<sp/>fdResultCheck;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eSuccess;</highlight></codeline>
<codeline lineno="136"><highlight class="normal">}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="comment">/*----------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="comment">//eNepError_t<sp/>eNepMathDivisionU64(<sp/>uint64_t<sp/>ullNumerator,<sp/>uint64_t<sp/>ullDenominator,<sp/>uint64_t<sp/>*pullResult<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>if(<sp/>(<sp/>ullDenominator<sp/>==<sp/>0<sp/>)<sp/>||<sp/>(<sp/>pullResult<sp/>==<sp/>NULL<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>eInvalidParameter;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>/*<sp/>Add<sp/>half<sp/>of<sp/>divider<sp/>for<sp/>rounding<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>ullNumerator<sp/>+=<sp/>(<sp/>ullDenominator<sp/>&gt;&gt;<sp/>1<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>*pullResult<sp/>=<sp/>(<sp/>ullNumerator<sp/>/<sp/>ullDenominator<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>return<sp/>eSuccess;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="comment">/*----------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155" refid="d4/da2/nep_math_division_8c_1ae2bb9f94ddcb10fe3b08a7c0bcfb594f" refkind="member"><highlight class="normal">eNepError_t<sp/><ref refid="d4/da2/nep_math_division_8c_1ae2bb9f94ddcb10fe3b08a7c0bcfb594f" kindref="member">eNepMathDivisionS64</ref>(<sp/>int64_t<sp/>sllNumerator,<sp/>int64_t<sp/>sllDenominator,<sp/>int64_t<sp/>*psllResult<sp/>)</highlight></codeline>
<codeline lineno="156"><highlight class="normal">{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(<sp/>sllDenominator<sp/>==<sp/>0<sp/>)<sp/>||<sp/>(<sp/>psllResult<sp/>==<sp/>NULL<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eInvalidParameter;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>result<sp/>is<sp/>positive<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(<sp/>(<sp/>sllNumerator<sp/>&gt;<sp/>0<sp/>)<sp/>&amp;&amp;<sp/>(<sp/>sllDenominator<sp/>&gt;<sp/>0<sp/>)<sp/>)<sp/>||<sp/>(<sp/>(<sp/>sllNumerator<sp/>&lt;<sp/>0<sp/>)<sp/>&amp;&amp;<sp/>(<sp/>sllDenominator<sp/>&lt;<sp/>0<sp/>)<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Add<sp/>half<sp/>of<sp/>divider<sp/>for<sp/>rounding<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sllNumerator<sp/>+=<sp/>(<sp/>sllDenominator<sp/>&gt;&gt;<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Remove<sp/>half<sp/>of<sp/>divider<sp/>for<sp/>rounding<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sllNumerator<sp/>-=<sp/>(<sp/>sllDenominator<sp/>&gt;&gt;<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>*psllResult<sp/>=<sp/>(<sp/>sllNumerator<sp/>/<sp/>sllDenominator<sp/>);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eSuccess;</highlight></codeline>
<codeline lineno="177"><highlight class="normal">}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="comment">/*----------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="Sources/nepMathDivision.c"/>
  </compounddef>
</doxygen>
