.TH "UnitTestFramework/vendor/ceedling/vendor/unity/src/unity.h" 3 "Thu Nov 18 2021" "mpbTime" \" -*- nroff -*-
.ad l
.nh
.SH NAME
UnitTestFramework/vendor/ceedling/vendor/unity/src/unity.h
.SH SYNOPSIS
.br
.PP
\fC#include 'unity_internals\&.h'\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBUNITY\fP"
.br
.ti -1c
.RI "#define \fBTEST_FAIL_MESSAGE\fP(message)   \fBUNITY_TEST_FAIL\fP(__LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_FAIL\fP()   \fBUNITY_TEST_FAIL\fP(__LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_IGNORE_MESSAGE\fP(message)   \fBUNITY_TEST_IGNORE\fP(__LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_IGNORE\fP()   \fBUNITY_TEST_IGNORE\fP(__LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ONLY\fP()"
.br
.ti -1c
.RI "#define \fBTEST_PASS\fP()   \fBTEST_ABORT\fP()"
.br
.ti -1c
.RI "#define \fBTEST_FILE\fP(a)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT\fP(condition)   \fBUNITY_TEST_ASSERT\fP(       (condition), __LINE__, ' Expression Evaluated To FALSE')"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_TRUE\fP(condition)   \fBUNITY_TEST_ASSERT\fP(       (condition), __LINE__, ' Expected TRUE Was FALSE')"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_UNLESS\fP(condition)   \fBUNITY_TEST_ASSERT\fP(      !(condition), __LINE__, ' Expression Evaluated To TRUE')"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_FALSE\fP(condition)   \fBUNITY_TEST_ASSERT\fP(      !(condition), __LINE__, ' Expected FALSE Was TRUE')"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_NULL\fP(pointer)   \fBUNITY_TEST_ASSERT_NULL\fP(    (pointer), __LINE__, ' Expected NULL')"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_NOT_NULL\fP(pointer)   \fBUNITY_TEST_ASSERT_NOT_NULL\fP((pointer), __LINE__, ' Expected Non\-NULL')"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EQUAL_INT\fP(expected,  actual)   \fBUNITY_TEST_ASSERT_EQUAL_INT\fP((expected), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EQUAL_INT8\fP(expected,  actual)   \fBUNITY_TEST_ASSERT_EQUAL_INT8\fP((expected), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EQUAL_INT16\fP(expected,  actual)   \fBUNITY_TEST_ASSERT_EQUAL_INT16\fP((expected), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EQUAL_INT32\fP(expected,  actual)   \fBUNITY_TEST_ASSERT_EQUAL_INT32\fP((expected), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EQUAL_INT64\fP(expected,  actual)   \fBUNITY_TEST_ASSERT_EQUAL_INT64\fP((expected), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EQUAL\fP(expected,  actual)   \fBUNITY_TEST_ASSERT_EQUAL_INT\fP((expected), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_NOT_EQUAL\fP(expected,  actual)   \fBUNITY_TEST_ASSERT\fP(((expected) !=  (actual)), __LINE__, ' Expected Not\-Equal')"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EQUAL_UINT\fP(expected,  actual)   \fBUNITY_TEST_ASSERT_EQUAL_UINT\fP( (expected), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EQUAL_UINT8\fP(expected,  actual)   \fBUNITY_TEST_ASSERT_EQUAL_UINT8\fP( (expected), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EQUAL_UINT16\fP(expected,  actual)   \fBUNITY_TEST_ASSERT_EQUAL_UINT16\fP( (expected), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EQUAL_UINT32\fP(expected,  actual)   \fBUNITY_TEST_ASSERT_EQUAL_UINT32\fP( (expected), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EQUAL_UINT64\fP(expected,  actual)   \fBUNITY_TEST_ASSERT_EQUAL_UINT64\fP( (expected), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EQUAL_HEX\fP(expected,  actual)   \fBUNITY_TEST_ASSERT_EQUAL_HEX32\fP((expected), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EQUAL_HEX8\fP(expected,  actual)   \fBUNITY_TEST_ASSERT_EQUAL_HEX8\fP( (expected), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EQUAL_HEX16\fP(expected,  actual)   \fBUNITY_TEST_ASSERT_EQUAL_HEX16\fP((expected), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EQUAL_HEX32\fP(expected,  actual)   \fBUNITY_TEST_ASSERT_EQUAL_HEX32\fP((expected), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EQUAL_HEX64\fP(expected,  actual)   \fBUNITY_TEST_ASSERT_EQUAL_HEX64\fP((expected), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_BITS\fP(mask,  expected,  actual)   \fBUNITY_TEST_ASSERT_BITS\fP((mask), (expected), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_BITS_HIGH\fP(mask,  actual)   \fBUNITY_TEST_ASSERT_BITS\fP((mask), (\fBUNITY_UINT32\fP)(\-1), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_BITS_LOW\fP(mask,  actual)   \fBUNITY_TEST_ASSERT_BITS\fP((mask), (\fBUNITY_UINT32\fP)(0), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_BIT_HIGH\fP(bit,  actual)   \fBUNITY_TEST_ASSERT_BITS\fP(((\fBUNITY_UINT32\fP)1 << (bit)), (\fBUNITY_UINT32\fP)(\-1), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_BIT_LOW\fP(bit,  actual)   \fBUNITY_TEST_ASSERT_BITS\fP(((\fBUNITY_UINT32\fP)1 << (bit)), (\fBUNITY_UINT32\fP)(0), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_GREATER_THAN\fP(threshold,  actual)   \fBUNITY_TEST_ASSERT_GREATER_THAN_INT\fP((threshold), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_GREATER_THAN_INT\fP(threshold,  actual)   \fBUNITY_TEST_ASSERT_GREATER_THAN_INT\fP((threshold), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_GREATER_THAN_INT8\fP(threshold,  actual)   \fBUNITY_TEST_ASSERT_GREATER_THAN_INT8\fP((threshold), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_GREATER_THAN_INT16\fP(threshold,  actual)   \fBUNITY_TEST_ASSERT_GREATER_THAN_INT16\fP((threshold), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_GREATER_THAN_INT32\fP(threshold,  actual)   \fBUNITY_TEST_ASSERT_GREATER_THAN_INT32\fP((threshold), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_GREATER_THAN_INT64\fP(threshold,  actual)   \fBUNITY_TEST_ASSERT_GREATER_THAN_INT64\fP((threshold), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_GREATER_THAN_UINT\fP(threshold,  actual)   \fBUNITY_TEST_ASSERT_GREATER_THAN_UINT\fP((threshold), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_GREATER_THAN_UINT8\fP(threshold,  actual)   \fBUNITY_TEST_ASSERT_GREATER_THAN_UINT8\fP((threshold), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_GREATER_THAN_UINT16\fP(threshold,  actual)   \fBUNITY_TEST_ASSERT_GREATER_THAN_UINT16\fP((threshold), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_GREATER_THAN_UINT32\fP(threshold,  actual)   \fBUNITY_TEST_ASSERT_GREATER_THAN_UINT32\fP((threshold), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_GREATER_THAN_UINT64\fP(threshold,  actual)   \fBUNITY_TEST_ASSERT_GREATER_THAN_UINT64\fP((threshold), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_GREATER_THAN_HEX8\fP(threshold,  actual)   \fBUNITY_TEST_ASSERT_GREATER_THAN_HEX8\fP((threshold), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_GREATER_THAN_HEX16\fP(threshold,  actual)   \fBUNITY_TEST_ASSERT_GREATER_THAN_HEX16\fP((threshold), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_GREATER_THAN_HEX32\fP(threshold,  actual)   \fBUNITY_TEST_ASSERT_GREATER_THAN_HEX32\fP((threshold), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_GREATER_THAN_HEX64\fP(threshold,  actual)   \fBUNITY_TEST_ASSERT_GREATER_THAN_HEX64\fP((threshold), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_LESS_THAN\fP(threshold,  actual)   \fBUNITY_TEST_ASSERT_SMALLER_THAN_INT\fP((threshold), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_LESS_THAN_INT\fP(threshold,  actual)   \fBUNITY_TEST_ASSERT_SMALLER_THAN_INT\fP((threshold), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_LESS_THAN_INT8\fP(threshold,  actual)   \fBUNITY_TEST_ASSERT_SMALLER_THAN_INT8\fP((threshold), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_LESS_THAN_INT16\fP(threshold,  actual)   \fBUNITY_TEST_ASSERT_SMALLER_THAN_INT16\fP((threshold), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_LESS_THAN_INT32\fP(threshold,  actual)   \fBUNITY_TEST_ASSERT_SMALLER_THAN_INT32\fP((threshold), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_LESS_THAN_INT64\fP(threshold,  actual)   \fBUNITY_TEST_ASSERT_SMALLER_THAN_INT64\fP((threshold), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_LESS_THAN_UINT\fP(threshold,  actual)   \fBUNITY_TEST_ASSERT_SMALLER_THAN_UINT\fP((threshold), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_LESS_THAN_UINT8\fP(threshold,  actual)   \fBUNITY_TEST_ASSERT_SMALLER_THAN_UINT8\fP((threshold), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_LESS_THAN_UINT16\fP(threshold,  actual)   \fBUNITY_TEST_ASSERT_SMALLER_THAN_UINT16\fP((threshold), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_LESS_THAN_UINT32\fP(threshold,  actual)   \fBUNITY_TEST_ASSERT_SMALLER_THAN_UINT32\fP((threshold), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_LESS_THAN_UINT64\fP(threshold,  actual)   \fBUNITY_TEST_ASSERT_SMALLER_THAN_UINT64\fP((threshold), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_LESS_THAN_HEX8\fP(threshold,  actual)   \fBUNITY_TEST_ASSERT_SMALLER_THAN_HEX8\fP((threshold), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_LESS_THAN_HEX16\fP(threshold,  actual)   \fBUNITY_TEST_ASSERT_SMALLER_THAN_HEX16\fP((threshold), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_LESS_THAN_HEX32\fP(threshold,  actual)   \fBUNITY_TEST_ASSERT_SMALLER_THAN_HEX32\fP((threshold), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_LESS_THAN_HEX64\fP(threshold,  actual)   \fBUNITY_TEST_ASSERT_SMALLER_THAN_HEX64\fP((threshold), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_GREATER_OR_EQUAL\fP(threshold,  actual)   \fBUNITY_TEST_ASSERT_GREATER_OR_EQUAL_INT\fP((threshold), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_GREATER_OR_EQUAL_INT\fP(threshold,  actual)   \fBUNITY_TEST_ASSERT_GREATER_OR_EQUAL_INT\fP((threshold), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_GREATER_OR_EQUAL_INT8\fP(threshold,  actual)   \fBUNITY_TEST_ASSERT_GREATER_OR_EQUAL_INT8\fP((threshold), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_GREATER_OR_EQUAL_INT16\fP(threshold,  actual)   \fBUNITY_TEST_ASSERT_GREATER_OR_EQUAL_INT16\fP((threshold), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_GREATER_OR_EQUAL_INT32\fP(threshold,  actual)   \fBUNITY_TEST_ASSERT_GREATER_OR_EQUAL_INT32\fP((threshold), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_GREATER_OR_EQUAL_INT64\fP(threshold,  actual)   \fBUNITY_TEST_ASSERT_GREATER_OR_EQUAL_INT64\fP((threshold), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_GREATER_OR_EQUAL_UINT\fP(threshold,  actual)   \fBUNITY_TEST_ASSERT_GREATER_OR_EQUAL_UINT\fP((threshold), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_GREATER_OR_EQUAL_UINT8\fP(threshold,  actual)   \fBUNITY_TEST_ASSERT_GREATER_OR_EQUAL_UINT8\fP((threshold), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_GREATER_OR_EQUAL_UINT16\fP(threshold,  actual)   \fBUNITY_TEST_ASSERT_GREATER_OR_EQUAL_UINT16\fP((threshold), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_GREATER_OR_EQUAL_UINT32\fP(threshold,  actual)   \fBUNITY_TEST_ASSERT_GREATER_OR_EQUAL_UINT32\fP((threshold), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_GREATER_OR_EQUAL_UINT64\fP(threshold,  actual)   \fBUNITY_TEST_ASSERT_GREATER_OR_EQUAL_UINT64\fP((threshold), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_GREATER_OR_EQUAL_HEX8\fP(threshold,  actual)   \fBUNITY_TEST_ASSERT_GREATER_OR_EQUAL_HEX8\fP((threshold), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_GREATER_OR_EQUAL_HEX16\fP(threshold,  actual)   \fBUNITY_TEST_ASSERT_GREATER_OR_EQUAL_HEX16\fP((threshold), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_GREATER_OR_EQUAL_HEX32\fP(threshold,  actual)   \fBUNITY_TEST_ASSERT_GREATER_OR_EQUAL_HEX32\fP((threshold), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_GREATER_OR_EQUAL_HEX64\fP(threshold,  actual)   \fBUNITY_TEST_ASSERT_GREATER_OR_EQUAL_HEX64\fP((threshold), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_LESS_OR_EQUAL\fP(threshold,  actual)   \fBUNITY_TEST_ASSERT_SMALLER_OR_EQUAL_INT\fP((threshold), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_LESS_OR_EQUAL_INT\fP(threshold,  actual)   \fBUNITY_TEST_ASSERT_SMALLER_OR_EQUAL_INT\fP((threshold), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_LESS_OR_EQUAL_INT8\fP(threshold,  actual)   \fBUNITY_TEST_ASSERT_SMALLER_OR_EQUAL_INT8\fP((threshold), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_LESS_OR_EQUAL_INT16\fP(threshold,  actual)   \fBUNITY_TEST_ASSERT_SMALLER_OR_EQUAL_INT16\fP((threshold), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_LESS_OR_EQUAL_INT32\fP(threshold,  actual)   \fBUNITY_TEST_ASSERT_SMALLER_OR_EQUAL_INT32\fP((threshold), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_LESS_OR_EQUAL_INT64\fP(threshold,  actual)   \fBUNITY_TEST_ASSERT_SMALLER_OR_EQUAL_INT64\fP((threshold), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_LESS_OR_EQUAL_UINT\fP(threshold,  actual)   \fBUNITY_TEST_ASSERT_SMALLER_OR_EQUAL_UINT\fP((threshold), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_LESS_OR_EQUAL_UINT8\fP(threshold,  actual)   \fBUNITY_TEST_ASSERT_SMALLER_OR_EQUAL_UINT8\fP((threshold), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_LESS_OR_EQUAL_UINT16\fP(threshold,  actual)   \fBUNITY_TEST_ASSERT_SMALLER_OR_EQUAL_UINT16\fP((threshold), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_LESS_OR_EQUAL_UINT32\fP(threshold,  actual)   \fBUNITY_TEST_ASSERT_SMALLER_OR_EQUAL_UINT32\fP((threshold), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_LESS_OR_EQUAL_UINT64\fP(threshold,  actual)   \fBUNITY_TEST_ASSERT_SMALLER_OR_EQUAL_UINT64\fP((threshold), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_LESS_OR_EQUAL_HEX8\fP(threshold,  actual)   \fBUNITY_TEST_ASSERT_SMALLER_OR_EQUAL_HEX8\fP((threshold), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_LESS_OR_EQUAL_HEX16\fP(threshold,  actual)   \fBUNITY_TEST_ASSERT_SMALLER_OR_EQUAL_HEX16\fP((threshold), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_LESS_OR_EQUAL_HEX32\fP(threshold,  actual)   \fBUNITY_TEST_ASSERT_SMALLER_OR_EQUAL_HEX32\fP((threshold), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_LESS_OR_EQUAL_HEX64\fP(threshold,  actual)   \fBUNITY_TEST_ASSERT_SMALLER_OR_EQUAL_HEX64\fP((threshold), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_INT_WITHIN\fP(delta,  expected,  actual)   \fBUNITY_TEST_ASSERT_INT_WITHIN\fP((delta), (expected), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_INT8_WITHIN\fP(delta,  expected,  actual)   \fBUNITY_TEST_ASSERT_INT8_WITHIN\fP((delta), (expected), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_INT16_WITHIN\fP(delta,  expected,  actual)   \fBUNITY_TEST_ASSERT_INT16_WITHIN\fP((delta), (expected), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_INT32_WITHIN\fP(delta,  expected,  actual)   \fBUNITY_TEST_ASSERT_INT32_WITHIN\fP((delta), (expected), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_INT64_WITHIN\fP(delta,  expected,  actual)   \fBUNITY_TEST_ASSERT_INT64_WITHIN\fP((delta), (expected), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_UINT_WITHIN\fP(delta,  expected,  actual)   \fBUNITY_TEST_ASSERT_UINT_WITHIN\fP((delta), (expected), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_UINT8_WITHIN\fP(delta,  expected,  actual)   \fBUNITY_TEST_ASSERT_UINT8_WITHIN\fP((delta), (expected), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_UINT16_WITHIN\fP(delta,  expected,  actual)   \fBUNITY_TEST_ASSERT_UINT16_WITHIN\fP((delta), (expected), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_UINT32_WITHIN\fP(delta,  expected,  actual)   \fBUNITY_TEST_ASSERT_UINT32_WITHIN\fP((delta), (expected), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_UINT64_WITHIN\fP(delta,  expected,  actual)   \fBUNITY_TEST_ASSERT_UINT64_WITHIN\fP((delta), (expected), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_HEX_WITHIN\fP(delta,  expected,  actual)   \fBUNITY_TEST_ASSERT_HEX32_WITHIN\fP((delta), (expected), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_HEX8_WITHIN\fP(delta,  expected,  actual)   \fBUNITY_TEST_ASSERT_HEX8_WITHIN\fP((delta), (expected), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_HEX16_WITHIN\fP(delta,  expected,  actual)   \fBUNITY_TEST_ASSERT_HEX16_WITHIN\fP((delta), (expected), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_HEX32_WITHIN\fP(delta,  expected,  actual)   \fBUNITY_TEST_ASSERT_HEX32_WITHIN\fP((delta), (expected), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_HEX64_WITHIN\fP(delta,  expected,  actual)   \fBUNITY_TEST_ASSERT_HEX64_WITHIN\fP((delta), (expected), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EQUAL_PTR\fP(expected,  actual)   \fBUNITY_TEST_ASSERT_EQUAL_PTR\fP((expected), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EQUAL_STRING\fP(expected,  actual)   \fBUNITY_TEST_ASSERT_EQUAL_STRING\fP((expected), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EQUAL_STRING_LEN\fP(expected,  actual,  len)   \fBUNITY_TEST_ASSERT_EQUAL_STRING_LEN\fP((expected), (actual), (len), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EQUAL_MEMORY\fP(expected,  actual,  len)   \fBUNITY_TEST_ASSERT_EQUAL_MEMORY\fP((expected), (actual), (len), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EQUAL_INT_ARRAY\fP(expected,  actual,  num_elements)   \fBUNITY_TEST_ASSERT_EQUAL_INT_ARRAY\fP((expected), (actual), (num_elements), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EQUAL_INT8_ARRAY\fP(expected,  actual,  num_elements)   \fBUNITY_TEST_ASSERT_EQUAL_INT8_ARRAY\fP((expected), (actual), (num_elements), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EQUAL_INT16_ARRAY\fP(expected,  actual,  num_elements)   \fBUNITY_TEST_ASSERT_EQUAL_INT16_ARRAY\fP((expected), (actual), (num_elements), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EQUAL_INT32_ARRAY\fP(expected,  actual,  num_elements)   \fBUNITY_TEST_ASSERT_EQUAL_INT32_ARRAY\fP((expected), (actual), (num_elements), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EQUAL_INT64_ARRAY\fP(expected,  actual,  num_elements)   \fBUNITY_TEST_ASSERT_EQUAL_INT64_ARRAY\fP((expected), (actual), (num_elements), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EQUAL_UINT_ARRAY\fP(expected,  actual,  num_elements)   \fBUNITY_TEST_ASSERT_EQUAL_UINT_ARRAY\fP((expected), (actual), (num_elements), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EQUAL_UINT8_ARRAY\fP(expected,  actual,  num_elements)   \fBUNITY_TEST_ASSERT_EQUAL_UINT8_ARRAY\fP((expected), (actual), (num_elements), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EQUAL_UINT16_ARRAY\fP(expected,  actual,  num_elements)   \fBUNITY_TEST_ASSERT_EQUAL_UINT16_ARRAY\fP((expected), (actual), (num_elements), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EQUAL_UINT32_ARRAY\fP(expected,  actual,  num_elements)   \fBUNITY_TEST_ASSERT_EQUAL_UINT32_ARRAY\fP((expected), (actual), (num_elements), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EQUAL_UINT64_ARRAY\fP(expected,  actual,  num_elements)   \fBUNITY_TEST_ASSERT_EQUAL_UINT64_ARRAY\fP((expected), (actual), (num_elements), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EQUAL_HEX_ARRAY\fP(expected,  actual,  num_elements)   \fBUNITY_TEST_ASSERT_EQUAL_HEX32_ARRAY\fP((expected), (actual), (num_elements), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EQUAL_HEX8_ARRAY\fP(expected,  actual,  num_elements)   \fBUNITY_TEST_ASSERT_EQUAL_HEX8_ARRAY\fP((expected), (actual), (num_elements), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EQUAL_HEX16_ARRAY\fP(expected,  actual,  num_elements)   \fBUNITY_TEST_ASSERT_EQUAL_HEX16_ARRAY\fP((expected), (actual), (num_elements), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EQUAL_HEX32_ARRAY\fP(expected,  actual,  num_elements)   \fBUNITY_TEST_ASSERT_EQUAL_HEX32_ARRAY\fP((expected), (actual), (num_elements), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EQUAL_HEX64_ARRAY\fP(expected,  actual,  num_elements)   \fBUNITY_TEST_ASSERT_EQUAL_HEX64_ARRAY\fP((expected), (actual), (num_elements), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EQUAL_PTR_ARRAY\fP(expected,  actual,  num_elements)   \fBUNITY_TEST_ASSERT_EQUAL_PTR_ARRAY\fP((expected), (actual), (num_elements), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EQUAL_STRING_ARRAY\fP(expected,  actual,  num_elements)   \fBUNITY_TEST_ASSERT_EQUAL_STRING_ARRAY\fP((expected), (actual), (num_elements), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EQUAL_MEMORY_ARRAY\fP(expected,  actual,  len,  num_elements)   \fBUNITY_TEST_ASSERT_EQUAL_MEMORY_ARRAY\fP((expected), (actual), (len), (num_elements), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EACH_EQUAL_INT\fP(expected,  actual,  num_elements)   \fBUNITY_TEST_ASSERT_EACH_EQUAL_INT\fP((expected), (actual), (num_elements), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EACH_EQUAL_INT8\fP(expected,  actual,  num_elements)   \fBUNITY_TEST_ASSERT_EACH_EQUAL_INT8\fP((expected), (actual), (num_elements), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EACH_EQUAL_INT16\fP(expected,  actual,  num_elements)   \fBUNITY_TEST_ASSERT_EACH_EQUAL_INT16\fP((expected), (actual), (num_elements), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EACH_EQUAL_INT32\fP(expected,  actual,  num_elements)   \fBUNITY_TEST_ASSERT_EACH_EQUAL_INT32\fP((expected), (actual), (num_elements), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EACH_EQUAL_INT64\fP(expected,  actual,  num_elements)   UNITY_TEST_ASSERT_EACH_EQUAL_INT64((expected), (actual), (num_elements), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EACH_EQUAL_UINT\fP(expected,  actual,  num_elements)   \fBUNITY_TEST_ASSERT_EACH_EQUAL_UINT\fP((expected), (actual), (num_elements), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EACH_EQUAL_UINT8\fP(expected,  actual,  num_elements)   \fBUNITY_TEST_ASSERT_EACH_EQUAL_UINT8\fP((expected), (actual), (num_elements), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EACH_EQUAL_UINT16\fP(expected,  actual,  num_elements)   \fBUNITY_TEST_ASSERT_EACH_EQUAL_UINT16\fP((expected), (actual), (num_elements), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EACH_EQUAL_UINT32\fP(expected,  actual,  num_elements)   \fBUNITY_TEST_ASSERT_EACH_EQUAL_UINT32\fP((expected), (actual), (num_elements), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EACH_EQUAL_UINT64\fP(expected,  actual,  num_elements)   UNITY_TEST_ASSERT_EACH_EQUAL_UINT64((expected), (actual), (num_elements), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EACH_EQUAL_HEX\fP(expected,  actual,  num_elements)   \fBUNITY_TEST_ASSERT_EACH_EQUAL_HEX32\fP((expected), (actual), (num_elements), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EACH_EQUAL_HEX8\fP(expected,  actual,  num_elements)   \fBUNITY_TEST_ASSERT_EACH_EQUAL_HEX8\fP((expected), (actual), (num_elements), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EACH_EQUAL_HEX16\fP(expected,  actual,  num_elements)   \fBUNITY_TEST_ASSERT_EACH_EQUAL_HEX16\fP((expected), (actual), (num_elements), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EACH_EQUAL_HEX32\fP(expected,  actual,  num_elements)   \fBUNITY_TEST_ASSERT_EACH_EQUAL_HEX32\fP((expected), (actual), (num_elements), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EACH_EQUAL_HEX64\fP(expected,  actual,  num_elements)   UNITY_TEST_ASSERT_EACH_EQUAL_HEX64((expected), (actual), (num_elements), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EACH_EQUAL_PTR\fP(expected,  actual,  num_elements)   \fBUNITY_TEST_ASSERT_EACH_EQUAL_PTR\fP((expected), (actual), (num_elements), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EACH_EQUAL_STRING\fP(expected,  actual,  num_elements)   \fBUNITY_TEST_ASSERT_EACH_EQUAL_STRING\fP((expected), (actual), (num_elements), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EACH_EQUAL_MEMORY\fP(expected,  actual,  len,  num_elements)   \fBUNITY_TEST_ASSERT_EACH_EQUAL_MEMORY\fP((expected), (actual), (len), (num_elements), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_FLOAT_WITHIN\fP(delta,  expected,  actual)   \fBUNITY_TEST_ASSERT_FLOAT_WITHIN\fP((delta), (expected), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EQUAL_FLOAT\fP(expected,  actual)   \fBUNITY_TEST_ASSERT_EQUAL_FLOAT\fP((expected), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EQUAL_FLOAT_ARRAY\fP(expected,  actual,  num_elements)   \fBUNITY_TEST_ASSERT_EQUAL_FLOAT_ARRAY\fP((expected), (actual), (num_elements), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EACH_EQUAL_FLOAT\fP(expected,  actual,  num_elements)   \fBUNITY_TEST_ASSERT_EACH_EQUAL_FLOAT\fP((expected), (actual), (num_elements), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_FLOAT_IS_INF\fP(actual)   \fBUNITY_TEST_ASSERT_FLOAT_IS_INF\fP((actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_FLOAT_IS_NEG_INF\fP(actual)   \fBUNITY_TEST_ASSERT_FLOAT_IS_NEG_INF\fP((actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_FLOAT_IS_NAN\fP(actual)   \fBUNITY_TEST_ASSERT_FLOAT_IS_NAN\fP((actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_FLOAT_IS_DETERMINATE\fP(actual)   \fBUNITY_TEST_ASSERT_FLOAT_IS_DETERMINATE\fP((actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_FLOAT_IS_NOT_INF\fP(actual)   \fBUNITY_TEST_ASSERT_FLOAT_IS_NOT_INF\fP((actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_FLOAT_IS_NOT_NEG_INF\fP(actual)   \fBUNITY_TEST_ASSERT_FLOAT_IS_NOT_NEG_INF\fP((actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_FLOAT_IS_NOT_NAN\fP(actual)   \fBUNITY_TEST_ASSERT_FLOAT_IS_NOT_NAN\fP((actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_FLOAT_IS_NOT_DETERMINATE\fP(actual)   \fBUNITY_TEST_ASSERT_FLOAT_IS_NOT_DETERMINATE\fP((actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_DOUBLE_WITHIN\fP(delta,  expected,  actual)   \fBUNITY_TEST_ASSERT_DOUBLE_WITHIN\fP((delta), (expected), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EQUAL_DOUBLE\fP(expected,  actual)   \fBUNITY_TEST_ASSERT_EQUAL_DOUBLE\fP((expected), (actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EQUAL_DOUBLE_ARRAY\fP(expected,  actual,  num_elements)   \fBUNITY_TEST_ASSERT_EQUAL_DOUBLE_ARRAY\fP((expected), (actual), (num_elements), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EACH_EQUAL_DOUBLE\fP(expected,  actual,  num_elements)   \fBUNITY_TEST_ASSERT_EACH_EQUAL_DOUBLE\fP((expected), (actual), (num_elements), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_DOUBLE_IS_INF\fP(actual)   \fBUNITY_TEST_ASSERT_DOUBLE_IS_INF\fP((actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_DOUBLE_IS_NEG_INF\fP(actual)   \fBUNITY_TEST_ASSERT_DOUBLE_IS_NEG_INF\fP((actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_DOUBLE_IS_NAN\fP(actual)   \fBUNITY_TEST_ASSERT_DOUBLE_IS_NAN\fP((actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_DOUBLE_IS_DETERMINATE\fP(actual)   \fBUNITY_TEST_ASSERT_DOUBLE_IS_DETERMINATE\fP((actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_DOUBLE_IS_NOT_INF\fP(actual)   \fBUNITY_TEST_ASSERT_DOUBLE_IS_NOT_INF\fP((actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_DOUBLE_IS_NOT_NEG_INF\fP(actual)   \fBUNITY_TEST_ASSERT_DOUBLE_IS_NOT_NEG_INF\fP((actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_DOUBLE_IS_NOT_NAN\fP(actual)   \fBUNITY_TEST_ASSERT_DOUBLE_IS_NOT_NAN\fP((actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_DOUBLE_IS_NOT_DETERMINATE\fP(actual)   \fBUNITY_TEST_ASSERT_DOUBLE_IS_NOT_DETERMINATE\fP((actual), __LINE__, NULL)"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_MESSAGE\fP(condition,  message)   \fBUNITY_TEST_ASSERT\fP(       (condition), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_TRUE_MESSAGE\fP(condition,  message)   \fBUNITY_TEST_ASSERT\fP(       (condition), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_UNLESS_MESSAGE\fP(condition,  message)   \fBUNITY_TEST_ASSERT\fP(      !(condition), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_FALSE_MESSAGE\fP(condition,  message)   \fBUNITY_TEST_ASSERT\fP(      !(condition), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_NULL_MESSAGE\fP(pointer,  message)   \fBUNITY_TEST_ASSERT_NULL\fP(    (pointer), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_NOT_NULL_MESSAGE\fP(pointer,  message)   \fBUNITY_TEST_ASSERT_NOT_NULL\fP((pointer), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EQUAL_INT_MESSAGE\fP(expected,  actual,  message)   \fBUNITY_TEST_ASSERT_EQUAL_INT\fP((expected), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EQUAL_INT8_MESSAGE\fP(expected,  actual,  message)   \fBUNITY_TEST_ASSERT_EQUAL_INT8\fP((expected), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EQUAL_INT16_MESSAGE\fP(expected,  actual,  message)   \fBUNITY_TEST_ASSERT_EQUAL_INT16\fP((expected), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EQUAL_INT32_MESSAGE\fP(expected,  actual,  message)   \fBUNITY_TEST_ASSERT_EQUAL_INT32\fP((expected), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EQUAL_INT64_MESSAGE\fP(expected,  actual,  message)   \fBUNITY_TEST_ASSERT_EQUAL_INT64\fP((expected), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EQUAL_MESSAGE\fP(expected,  actual,  message)   \fBUNITY_TEST_ASSERT_EQUAL_INT\fP((expected), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_NOT_EQUAL_MESSAGE\fP(expected,  actual,  message)   \fBUNITY_TEST_ASSERT\fP(((expected) !=  (actual)), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EQUAL_UINT_MESSAGE\fP(expected,  actual,  message)   \fBUNITY_TEST_ASSERT_EQUAL_UINT\fP( (expected), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EQUAL_UINT8_MESSAGE\fP(expected,  actual,  message)   \fBUNITY_TEST_ASSERT_EQUAL_UINT8\fP( (expected), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EQUAL_UINT16_MESSAGE\fP(expected,  actual,  message)   \fBUNITY_TEST_ASSERT_EQUAL_UINT16\fP( (expected), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EQUAL_UINT32_MESSAGE\fP(expected,  actual,  message)   \fBUNITY_TEST_ASSERT_EQUAL_UINT32\fP( (expected), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EQUAL_UINT64_MESSAGE\fP(expected,  actual,  message)   \fBUNITY_TEST_ASSERT_EQUAL_UINT64\fP( (expected), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EQUAL_HEX_MESSAGE\fP(expected,  actual,  message)   \fBUNITY_TEST_ASSERT_EQUAL_HEX32\fP((expected), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EQUAL_HEX8_MESSAGE\fP(expected,  actual,  message)   \fBUNITY_TEST_ASSERT_EQUAL_HEX8\fP( (expected), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EQUAL_HEX16_MESSAGE\fP(expected,  actual,  message)   \fBUNITY_TEST_ASSERT_EQUAL_HEX16\fP((expected), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EQUAL_HEX32_MESSAGE\fP(expected,  actual,  message)   \fBUNITY_TEST_ASSERT_EQUAL_HEX32\fP((expected), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EQUAL_HEX64_MESSAGE\fP(expected,  actual,  message)   \fBUNITY_TEST_ASSERT_EQUAL_HEX64\fP((expected), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_BITS_MESSAGE\fP(mask,  expected,  actual,  message)   \fBUNITY_TEST_ASSERT_BITS\fP((mask), (expected), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_BITS_HIGH_MESSAGE\fP(mask,  actual,  message)   \fBUNITY_TEST_ASSERT_BITS\fP((mask), (\fBUNITY_UINT32\fP)(\-1), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_BITS_LOW_MESSAGE\fP(mask,  actual,  message)   \fBUNITY_TEST_ASSERT_BITS\fP((mask), (\fBUNITY_UINT32\fP)(0), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_BIT_HIGH_MESSAGE\fP(bit,  actual,  message)   \fBUNITY_TEST_ASSERT_BITS\fP(((\fBUNITY_UINT32\fP)1 << (bit)), (\fBUNITY_UINT32\fP)(\-1), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_BIT_LOW_MESSAGE\fP(bit,  actual,  message)   \fBUNITY_TEST_ASSERT_BITS\fP(((\fBUNITY_UINT32\fP)1 << (bit)), (\fBUNITY_UINT32\fP)(0), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_GREATER_THAN_MESSAGE\fP(threshold,  actual,  message)   \fBUNITY_TEST_ASSERT_GREATER_THAN_INT\fP((threshold), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_GREATER_THAN_INT_MESSAGE\fP(threshold,  actual,  message)   \fBUNITY_TEST_ASSERT_GREATER_THAN_INT\fP((threshold), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_GREATER_THAN_INT8_MESSAGE\fP(threshold,  actual,  message)   \fBUNITY_TEST_ASSERT_GREATER_THAN_INT8\fP((threshold), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_GREATER_THAN_INT16_MESSAGE\fP(threshold,  actual,  message)   \fBUNITY_TEST_ASSERT_GREATER_THAN_INT16\fP((threshold), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_GREATER_THAN_INT32_MESSAGE\fP(threshold,  actual,  message)   \fBUNITY_TEST_ASSERT_GREATER_THAN_INT32\fP((threshold), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_GREATER_THAN_INT64_MESSAGE\fP(threshold,  actual,  message)   \fBUNITY_TEST_ASSERT_GREATER_THAN_INT64\fP((threshold), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_GREATER_THAN_UINT_MESSAGE\fP(threshold,  actual,  message)   \fBUNITY_TEST_ASSERT_GREATER_THAN_UINT\fP((threshold), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_GREATER_THAN_UINT8_MESSAGE\fP(threshold,  actual,  message)   \fBUNITY_TEST_ASSERT_GREATER_THAN_UINT8\fP((threshold), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_GREATER_THAN_UINT16_MESSAGE\fP(threshold,  actual,  message)   \fBUNITY_TEST_ASSERT_GREATER_THAN_UINT16\fP((threshold), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_GREATER_THAN_UINT32_MESSAGE\fP(threshold,  actual,  message)   \fBUNITY_TEST_ASSERT_GREATER_THAN_UINT32\fP((threshold), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_GREATER_THAN_UINT64_MESSAGE\fP(threshold,  actual,  message)   \fBUNITY_TEST_ASSERT_GREATER_THAN_UINT64\fP((threshold), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_GREATER_THAN_HEX8_MESSAGE\fP(threshold,  actual,  message)   \fBUNITY_TEST_ASSERT_GREATER_THAN_HEX8\fP((threshold), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_GREATER_THAN_HEX16_MESSAGE\fP(threshold,  actual,  message)   \fBUNITY_TEST_ASSERT_GREATER_THAN_HEX16\fP((threshold), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_GREATER_THAN_HEX32_MESSAGE\fP(threshold,  actual,  message)   \fBUNITY_TEST_ASSERT_GREATER_THAN_HEX32\fP((threshold), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_GREATER_THAN_HEX64_MESSAGE\fP(threshold,  actual,  message)   \fBUNITY_TEST_ASSERT_GREATER_THAN_HEX64\fP((threshold), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_LESS_THAN_MESSAGE\fP(threshold,  actual,  message)   \fBUNITY_TEST_ASSERT_SMALLER_THAN_INT\fP((threshold), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_LESS_THAN_INT_MESSAGE\fP(threshold,  actual,  message)   \fBUNITY_TEST_ASSERT_SMALLER_THAN_INT\fP((threshold), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_LESS_THAN_INT8_MESSAGE\fP(threshold,  actual,  message)   \fBUNITY_TEST_ASSERT_SMALLER_THAN_INT8\fP((threshold), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_LESS_THAN_INT16_MESSAGE\fP(threshold,  actual,  message)   \fBUNITY_TEST_ASSERT_SMALLER_THAN_INT16\fP((threshold), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_LESS_THAN_INT32_MESSAGE\fP(threshold,  actual,  message)   \fBUNITY_TEST_ASSERT_SMALLER_THAN_INT32\fP((threshold), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_LESS_THAN_INT64_MESSAGE\fP(threshold,  actual,  message)   \fBUNITY_TEST_ASSERT_SMALLER_THAN_INT64\fP((threshold), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_LESS_THAN_UINT_MESSAGE\fP(threshold,  actual,  message)   \fBUNITY_TEST_ASSERT_SMALLER_THAN_UINT\fP((threshold), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_LESS_THAN_UINT8_MESSAGE\fP(threshold,  actual,  message)   \fBUNITY_TEST_ASSERT_SMALLER_THAN_UINT8\fP((threshold), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_LESS_THAN_UINT16_MESSAGE\fP(threshold,  actual,  message)   \fBUNITY_TEST_ASSERT_SMALLER_THAN_UINT16\fP((threshold), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_LESS_THAN_UINT32_MESSAGE\fP(threshold,  actual,  message)   \fBUNITY_TEST_ASSERT_SMALLER_THAN_UINT32\fP((threshold), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_LESS_THAN_UINT64_MESSAGE\fP(threshold,  actual,  message)   \fBUNITY_TEST_ASSERT_SMALLER_THAN_UINT64\fP((threshold), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_LESS_THAN_HEX8_MESSAGE\fP(threshold,  actual,  message)   \fBUNITY_TEST_ASSERT_SMALLER_THAN_HEX8\fP((threshold), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_LESS_THAN_HEX16_MESSAGE\fP(threshold,  actual,  message)   \fBUNITY_TEST_ASSERT_SMALLER_THAN_HEX16\fP((threshold), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_LESS_THAN_HEX32_MESSAGE\fP(threshold,  actual,  message)   \fBUNITY_TEST_ASSERT_SMALLER_THAN_HEX32\fP((threshold), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_LESS_THAN_HEX64_MESSAGE\fP(threshold,  actual,  message)   \fBUNITY_TEST_ASSERT_SMALLER_THAN_HEX64\fP((threshold), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_GREATER_OR_EQUAL_MESSAGE\fP(threshold,  actual,  message)   \fBUNITY_TEST_ASSERT_GREATER_OR_EQUAL_INT\fP((threshold), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_GREATER_OR_EQUAL_INT_MESSAGE\fP(threshold,  actual,  message)   \fBUNITY_TEST_ASSERT_GREATER_OR_EQUAL_INT\fP((threshold), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_GREATER_OR_EQUAL_INT8_MESSAGE\fP(threshold,  actual,  message)   \fBUNITY_TEST_ASSERT_GREATER_OR_EQUAL_INT8\fP((threshold), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_GREATER_OR_EQUAL_INT16_MESSAGE\fP(threshold,  actual,  message)   \fBUNITY_TEST_ASSERT_GREATER_OR_EQUAL_INT16\fP((threshold), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_GREATER_OR_EQUAL_INT32_MESSAGE\fP(threshold,  actual,  message)   \fBUNITY_TEST_ASSERT_GREATER_OR_EQUAL_INT32\fP((threshold), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_GREATER_OR_EQUAL_INT64_MESSAGE\fP(threshold,  actual,  message)   \fBUNITY_TEST_ASSERT_GREATER_OR_EQUAL_INT64\fP((threshold), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_GREATER_OR_EQUAL_UINT_MESSAGE\fP(threshold,  actual,  message)   \fBUNITY_TEST_ASSERT_GREATER_OR_EQUAL_UINT\fP((threshold), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_GREATER_OR_EQUAL_UINT8_MESSAGE\fP(threshold,  actual,  message)   \fBUNITY_TEST_ASSERT_GREATER_OR_EQUAL_UINT8\fP((threshold), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_GREATER_OR_EQUAL_UINT16_MESSAGE\fP(threshold,  actual,  message)   \fBUNITY_TEST_ASSERT_GREATER_OR_EQUAL_UINT16\fP((threshold), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_GREATER_OR_EQUAL_UINT32_MESSAGE\fP(threshold,  actual,  message)   \fBUNITY_TEST_ASSERT_GREATER_OR_EQUAL_UINT32\fP((threshold), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_GREATER_OR_EQUAL_UINT64_MESSAGE\fP(threshold,  actual,  message)   \fBUNITY_TEST_ASSERT_GREATER_OR_EQUAL_UINT64\fP((threshold), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_GREATER_OR_EQUAL_HEX8_MESSAGE\fP(threshold,  actual,  message)   \fBUNITY_TEST_ASSERT_GREATER_OR_EQUAL_HEX8\fP((threshold), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_GREATER_OR_EQUAL_HEX16_MESSAGE\fP(threshold,  actual,  message)   \fBUNITY_TEST_ASSERT_GREATER_OR_EQUAL_HEX16\fP((threshold), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_GREATER_OR_EQUAL_HEX32_MESSAGE\fP(threshold,  actual,  message)   \fBUNITY_TEST_ASSERT_GREATER_OR_EQUAL_HEX32\fP((threshold), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_GREATER_OR_EQUAL_HEX64_MESSAGE\fP(threshold,  actual,  message)   \fBUNITY_TEST_ASSERT_GREATER_OR_EQUAL_HEX64\fP((threshold), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_LESS_OR_EQUAL_MESSAGE\fP(threshold,  actual,  message)   \fBUNITY_TEST_ASSERT_SMALLER_OR_EQUAL_INT\fP((threshold), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_LESS_OR_EQUAL_INT_MESSAGE\fP(threshold,  actual,  message)   \fBUNITY_TEST_ASSERT_SMALLER_OR_EQUAL_INT\fP((threshold), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_LESS_OR_EQUAL_INT8_MESSAGE\fP(threshold,  actual,  message)   \fBUNITY_TEST_ASSERT_SMALLER_OR_EQUAL_INT8\fP((threshold), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_LESS_OR_EQUAL_INT16_MESSAGE\fP(threshold,  actual,  message)   \fBUNITY_TEST_ASSERT_SMALLER_OR_EQUAL_INT16\fP((threshold), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_LESS_OR_EQUAL_INT32_MESSAGE\fP(threshold,  actual,  message)   \fBUNITY_TEST_ASSERT_SMALLER_OR_EQUAL_INT32\fP((threshold), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_LESS_OR_EQUAL_INT64_MESSAGE\fP(threshold,  actual,  message)   \fBUNITY_TEST_ASSERT_SMALLER_OR_EQUAL_INT64\fP((threshold), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_LESS_OR_EQUAL_UINT_MESSAGE\fP(threshold,  actual,  message)   \fBUNITY_TEST_ASSERT_SMALLER_OR_EQUAL_UINT\fP((threshold), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_LESS_OR_EQUAL_UINT8_MESSAGE\fP(threshold,  actual,  message)   \fBUNITY_TEST_ASSERT_SMALLER_OR_EQUAL_UINT8\fP((threshold), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_LESS_OR_EQUAL_UINT16_MESSAGE\fP(threshold,  actual,  message)   \fBUNITY_TEST_ASSERT_SMALLER_OR_EQUAL_UINT16\fP((threshold), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_LESS_OR_EQUAL_UINT32_MESSAGE\fP(threshold,  actual,  message)   \fBUNITY_TEST_ASSERT_SMALLER_OR_EQUAL_UINT32\fP((threshold), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_LESS_OR_EQUAL_UINT64_MESSAGE\fP(threshold,  actual,  message)   \fBUNITY_TEST_ASSERT_SMALLER_OR_EQUAL_UINT64\fP((threshold), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_LESS_OR_EQUAL_HEX8_MESSAGE\fP(threshold,  actual,  message)   \fBUNITY_TEST_ASSERT_SMALLER_OR_EQUAL_HEX8\fP((threshold), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_LESS_OR_EQUAL_HEX16_MESSAGE\fP(threshold,  actual,  message)   \fBUNITY_TEST_ASSERT_SMALLER_OR_EQUAL_HEX16\fP((threshold), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_LESS_OR_EQUAL_HEX32_MESSAGE\fP(threshold,  actual,  message)   \fBUNITY_TEST_ASSERT_SMALLER_OR_EQUAL_HEX32\fP((threshold), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_LESS_OR_EQUAL_HEX64_MESSAGE\fP(threshold,  actual,  message)   \fBUNITY_TEST_ASSERT_SMALLER_OR_EQUAL_HEX64\fP((threshold), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_INT_WITHIN_MESSAGE\fP(delta,  expected,  actual,  message)   \fBUNITY_TEST_ASSERT_INT_WITHIN\fP((delta), (expected), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_INT8_WITHIN_MESSAGE\fP(delta,  expected,  actual,  message)   \fBUNITY_TEST_ASSERT_INT8_WITHIN\fP((delta), (expected), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_INT16_WITHIN_MESSAGE\fP(delta,  expected,  actual,  message)   \fBUNITY_TEST_ASSERT_INT16_WITHIN\fP((delta), (expected), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_INT32_WITHIN_MESSAGE\fP(delta,  expected,  actual,  message)   \fBUNITY_TEST_ASSERT_INT32_WITHIN\fP((delta), (expected), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_INT64_WITHIN_MESSAGE\fP(delta,  expected,  actual,  message)   \fBUNITY_TEST_ASSERT_INT64_WITHIN\fP((delta), (expected), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_UINT_WITHIN_MESSAGE\fP(delta,  expected,  actual,  message)   \fBUNITY_TEST_ASSERT_UINT_WITHIN\fP((delta), (expected), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_UINT8_WITHIN_MESSAGE\fP(delta,  expected,  actual,  message)   \fBUNITY_TEST_ASSERT_UINT8_WITHIN\fP((delta), (expected), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_UINT16_WITHIN_MESSAGE\fP(delta,  expected,  actual,  message)   \fBUNITY_TEST_ASSERT_UINT16_WITHIN\fP((delta), (expected), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_UINT32_WITHIN_MESSAGE\fP(delta,  expected,  actual,  message)   \fBUNITY_TEST_ASSERT_UINT32_WITHIN\fP((delta), (expected), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_UINT64_WITHIN_MESSAGE\fP(delta,  expected,  actual,  message)   \fBUNITY_TEST_ASSERT_UINT64_WITHIN\fP((delta), (expected), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_HEX_WITHIN_MESSAGE\fP(delta,  expected,  actual,  message)   \fBUNITY_TEST_ASSERT_HEX32_WITHIN\fP((delta), (expected), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_HEX8_WITHIN_MESSAGE\fP(delta,  expected,  actual,  message)   \fBUNITY_TEST_ASSERT_HEX8_WITHIN\fP((delta), (expected), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_HEX16_WITHIN_MESSAGE\fP(delta,  expected,  actual,  message)   \fBUNITY_TEST_ASSERT_HEX16_WITHIN\fP((delta), (expected), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_HEX32_WITHIN_MESSAGE\fP(delta,  expected,  actual,  message)   \fBUNITY_TEST_ASSERT_HEX32_WITHIN\fP((delta), (expected), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_HEX64_WITHIN_MESSAGE\fP(delta,  expected,  actual,  message)   \fBUNITY_TEST_ASSERT_HEX64_WITHIN\fP((delta), (expected), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EQUAL_PTR_MESSAGE\fP(expected,  actual,  message)   \fBUNITY_TEST_ASSERT_EQUAL_PTR\fP((expected), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EQUAL_STRING_MESSAGE\fP(expected,  actual,  message)   \fBUNITY_TEST_ASSERT_EQUAL_STRING\fP((expected), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EQUAL_STRING_LEN_MESSAGE\fP(expected,  actual,  len,  message)   \fBUNITY_TEST_ASSERT_EQUAL_STRING_LEN\fP((expected), (actual), (len), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EQUAL_MEMORY_MESSAGE\fP(expected,  actual,  len,  message)   \fBUNITY_TEST_ASSERT_EQUAL_MEMORY\fP((expected), (actual), (len), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EQUAL_INT_ARRAY_MESSAGE\fP(expected,  actual,  num_elements,  message)   \fBUNITY_TEST_ASSERT_EQUAL_INT_ARRAY\fP((expected), (actual), (num_elements), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EQUAL_INT8_ARRAY_MESSAGE\fP(expected,  actual,  num_elements,  message)   \fBUNITY_TEST_ASSERT_EQUAL_INT8_ARRAY\fP((expected), (actual), (num_elements), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EQUAL_INT16_ARRAY_MESSAGE\fP(expected,  actual,  num_elements,  message)   \fBUNITY_TEST_ASSERT_EQUAL_INT16_ARRAY\fP((expected), (actual), (num_elements), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EQUAL_INT32_ARRAY_MESSAGE\fP(expected,  actual,  num_elements,  message)   \fBUNITY_TEST_ASSERT_EQUAL_INT32_ARRAY\fP((expected), (actual), (num_elements), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EQUAL_INT64_ARRAY_MESSAGE\fP(expected,  actual,  num_elements,  message)   \fBUNITY_TEST_ASSERT_EQUAL_INT64_ARRAY\fP((expected), (actual), (num_elements), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EQUAL_UINT_ARRAY_MESSAGE\fP(expected,  actual,  num_elements,  message)   \fBUNITY_TEST_ASSERT_EQUAL_UINT_ARRAY\fP((expected), (actual), (num_elements), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EQUAL_UINT8_ARRAY_MESSAGE\fP(expected,  actual,  num_elements,  message)   \fBUNITY_TEST_ASSERT_EQUAL_UINT8_ARRAY\fP((expected), (actual), (num_elements), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EQUAL_UINT16_ARRAY_MESSAGE\fP(expected,  actual,  num_elements,  message)   \fBUNITY_TEST_ASSERT_EQUAL_UINT16_ARRAY\fP((expected), (actual), (num_elements), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EQUAL_UINT32_ARRAY_MESSAGE\fP(expected,  actual,  num_elements,  message)   \fBUNITY_TEST_ASSERT_EQUAL_UINT32_ARRAY\fP((expected), (actual), (num_elements), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EQUAL_UINT64_ARRAY_MESSAGE\fP(expected,  actual,  num_elements,  message)   \fBUNITY_TEST_ASSERT_EQUAL_UINT64_ARRAY\fP((expected), (actual), (num_elements), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EQUAL_HEX_ARRAY_MESSAGE\fP(expected,  actual,  num_elements,  message)   \fBUNITY_TEST_ASSERT_EQUAL_HEX32_ARRAY\fP((expected), (actual), (num_elements), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EQUAL_HEX8_ARRAY_MESSAGE\fP(expected,  actual,  num_elements,  message)   \fBUNITY_TEST_ASSERT_EQUAL_HEX8_ARRAY\fP((expected), (actual), (num_elements), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EQUAL_HEX16_ARRAY_MESSAGE\fP(expected,  actual,  num_elements,  message)   \fBUNITY_TEST_ASSERT_EQUAL_HEX16_ARRAY\fP((expected), (actual), (num_elements), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EQUAL_HEX32_ARRAY_MESSAGE\fP(expected,  actual,  num_elements,  message)   \fBUNITY_TEST_ASSERT_EQUAL_HEX32_ARRAY\fP((expected), (actual), (num_elements), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EQUAL_HEX64_ARRAY_MESSAGE\fP(expected,  actual,  num_elements,  message)   \fBUNITY_TEST_ASSERT_EQUAL_HEX64_ARRAY\fP((expected), (actual), (num_elements), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EQUAL_PTR_ARRAY_MESSAGE\fP(expected,  actual,  num_elements,  message)   \fBUNITY_TEST_ASSERT_EQUAL_PTR_ARRAY\fP((expected), (actual), (num_elements), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EQUAL_STRING_ARRAY_MESSAGE\fP(expected,  actual,  num_elements,  message)   \fBUNITY_TEST_ASSERT_EQUAL_STRING_ARRAY\fP((expected), (actual), (num_elements), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EQUAL_MEMORY_ARRAY_MESSAGE\fP(expected,  actual,  len,  num_elements,  message)   \fBUNITY_TEST_ASSERT_EQUAL_MEMORY_ARRAY\fP((expected), (actual), (len), (num_elements), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EACH_EQUAL_INT_MESSAGE\fP(expected,  actual,  num_elements,  message)   \fBUNITY_TEST_ASSERT_EACH_EQUAL_INT\fP((expected), (actual), (num_elements), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EACH_EQUAL_INT8_MESSAGE\fP(expected,  actual,  num_elements,  message)   \fBUNITY_TEST_ASSERT_EACH_EQUAL_INT8\fP((expected), (actual), (num_elements), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EACH_EQUAL_INT16_MESSAGE\fP(expected,  actual,  num_elements,  message)   \fBUNITY_TEST_ASSERT_EACH_EQUAL_INT16\fP((expected), (actual), (num_elements), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EACH_EQUAL_INT32_MESSAGE\fP(expected,  actual,  num_elements,  message)   \fBUNITY_TEST_ASSERT_EACH_EQUAL_INT32\fP((expected), (actual), (num_elements), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EACH_EQUAL_INT64_MESSAGE\fP(expected,  actual,  num_elements,  message)   UNITY_TEST_ASSERT_EACH_EQUAL_INT64((expected), (actual), (num_elements), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EACH_EQUAL_UINT_MESSAGE\fP(expected,  actual,  num_elements,  message)   \fBUNITY_TEST_ASSERT_EACH_EQUAL_UINT\fP((expected), (actual), (num_elements), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EACH_EQUAL_UINT8_MESSAGE\fP(expected,  actual,  num_elements,  message)   \fBUNITY_TEST_ASSERT_EACH_EQUAL_UINT8\fP((expected), (actual), (num_elements), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EACH_EQUAL_UINT16_MESSAGE\fP(expected,  actual,  num_elements,  message)   \fBUNITY_TEST_ASSERT_EACH_EQUAL_UINT16\fP((expected), (actual), (num_elements), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EACH_EQUAL_UINT32_MESSAGE\fP(expected,  actual,  num_elements,  message)   \fBUNITY_TEST_ASSERT_EACH_EQUAL_UINT32\fP((expected), (actual), (num_elements), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EACH_EQUAL_UINT64_MESSAGE\fP(expected,  actual,  num_elements,  message)   UNITY_TEST_ASSERT_EACH_EQUAL_UINT64((expected), (actual), (num_elements), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EACH_EQUAL_HEX_MESSAGE\fP(expected,  actual,  num_elements,  message)   \fBUNITY_TEST_ASSERT_EACH_EQUAL_HEX32\fP((expected), (actual), (num_elements), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EACH_EQUAL_HEX8_MESSAGE\fP(expected,  actual,  num_elements,  message)   \fBUNITY_TEST_ASSERT_EACH_EQUAL_HEX8\fP((expected), (actual), (num_elements), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EACH_EQUAL_HEX16_MESSAGE\fP(expected,  actual,  num_elements,  message)   \fBUNITY_TEST_ASSERT_EACH_EQUAL_HEX16\fP((expected), (actual), (num_elements), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EACH_EQUAL_HEX32_MESSAGE\fP(expected,  actual,  num_elements,  message)   \fBUNITY_TEST_ASSERT_EACH_EQUAL_HEX32\fP((expected), (actual), (num_elements), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EACH_EQUAL_HEX64_MESSAGE\fP(expected,  actual,  num_elements,  message)   UNITY_TEST_ASSERT_EACH_EQUAL_HEX64((expected), (actual), (num_elements), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EACH_EQUAL_PTR_MESSAGE\fP(expected,  actual,  num_elements,  message)   \fBUNITY_TEST_ASSERT_EACH_EQUAL_PTR\fP((expected), (actual), (num_elements), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EACH_EQUAL_STRING_MESSAGE\fP(expected,  actual,  num_elements,  message)   \fBUNITY_TEST_ASSERT_EACH_EQUAL_STRING\fP((expected), (actual), (num_elements), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EACH_EQUAL_MEMORY_MESSAGE\fP(expected,  actual,  len,  num_elements,  message)   \fBUNITY_TEST_ASSERT_EACH_EQUAL_MEMORY\fP((expected), (actual), (len), (num_elements), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_FLOAT_WITHIN_MESSAGE\fP(delta,  expected,  actual,  message)   \fBUNITY_TEST_ASSERT_FLOAT_WITHIN\fP((delta), (expected), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EQUAL_FLOAT_MESSAGE\fP(expected,  actual,  message)   \fBUNITY_TEST_ASSERT_EQUAL_FLOAT\fP((expected), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EQUAL_FLOAT_ARRAY_MESSAGE\fP(expected,  actual,  num_elements,  message)   \fBUNITY_TEST_ASSERT_EQUAL_FLOAT_ARRAY\fP((expected), (actual), (num_elements), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EACH_EQUAL_FLOAT_MESSAGE\fP(expected,  actual,  num_elements,  message)   \fBUNITY_TEST_ASSERT_EACH_EQUAL_FLOAT\fP((expected), (actual), (num_elements), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_FLOAT_IS_INF_MESSAGE\fP(actual,  message)   \fBUNITY_TEST_ASSERT_FLOAT_IS_INF\fP((actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_FLOAT_IS_NEG_INF_MESSAGE\fP(actual,  message)   \fBUNITY_TEST_ASSERT_FLOAT_IS_NEG_INF\fP((actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_FLOAT_IS_NAN_MESSAGE\fP(actual,  message)   \fBUNITY_TEST_ASSERT_FLOAT_IS_NAN\fP((actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_FLOAT_IS_DETERMINATE_MESSAGE\fP(actual,  message)   \fBUNITY_TEST_ASSERT_FLOAT_IS_DETERMINATE\fP((actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_FLOAT_IS_NOT_INF_MESSAGE\fP(actual,  message)   \fBUNITY_TEST_ASSERT_FLOAT_IS_NOT_INF\fP((actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_FLOAT_IS_NOT_NEG_INF_MESSAGE\fP(actual,  message)   \fBUNITY_TEST_ASSERT_FLOAT_IS_NOT_NEG_INF\fP((actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_FLOAT_IS_NOT_NAN_MESSAGE\fP(actual,  message)   \fBUNITY_TEST_ASSERT_FLOAT_IS_NOT_NAN\fP((actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_FLOAT_IS_NOT_DETERMINATE_MESSAGE\fP(actual,  message)   \fBUNITY_TEST_ASSERT_FLOAT_IS_NOT_DETERMINATE\fP((actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_DOUBLE_WITHIN_MESSAGE\fP(delta,  expected,  actual,  message)   \fBUNITY_TEST_ASSERT_DOUBLE_WITHIN\fP((delta), (expected), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EQUAL_DOUBLE_MESSAGE\fP(expected,  actual,  message)   \fBUNITY_TEST_ASSERT_EQUAL_DOUBLE\fP((expected), (actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EQUAL_DOUBLE_ARRAY_MESSAGE\fP(expected,  actual,  num_elements,  message)   \fBUNITY_TEST_ASSERT_EQUAL_DOUBLE_ARRAY\fP((expected), (actual), (num_elements), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_EACH_EQUAL_DOUBLE_MESSAGE\fP(expected,  actual,  num_elements,  message)   \fBUNITY_TEST_ASSERT_EACH_EQUAL_DOUBLE\fP((expected), (actual), (num_elements), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_DOUBLE_IS_INF_MESSAGE\fP(actual,  message)   \fBUNITY_TEST_ASSERT_DOUBLE_IS_INF\fP((actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_DOUBLE_IS_NEG_INF_MESSAGE\fP(actual,  message)   \fBUNITY_TEST_ASSERT_DOUBLE_IS_NEG_INF\fP((actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_DOUBLE_IS_NAN_MESSAGE\fP(actual,  message)   \fBUNITY_TEST_ASSERT_DOUBLE_IS_NAN\fP((actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_DOUBLE_IS_DETERMINATE_MESSAGE\fP(actual,  message)   \fBUNITY_TEST_ASSERT_DOUBLE_IS_DETERMINATE\fP((actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_DOUBLE_IS_NOT_INF_MESSAGE\fP(actual,  message)   \fBUNITY_TEST_ASSERT_DOUBLE_IS_NOT_INF\fP((actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_DOUBLE_IS_NOT_NEG_INF_MESSAGE\fP(actual,  message)   \fBUNITY_TEST_ASSERT_DOUBLE_IS_NOT_NEG_INF\fP((actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_DOUBLE_IS_NOT_NAN_MESSAGE\fP(actual,  message)   \fBUNITY_TEST_ASSERT_DOUBLE_IS_NOT_NAN\fP((actual), __LINE__, (message))"
.br
.ti -1c
.RI "#define \fBTEST_ASSERT_DOUBLE_IS_NOT_DETERMINATE_MESSAGE\fP(actual,  message)   \fBUNITY_TEST_ASSERT_DOUBLE_IS_NOT_DETERMINATE\fP((actual), __LINE__, (message))"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBsetUp\fP (void)"
.br
.ti -1c
.RI "void \fBtearDown\fP (void)"
.br
.ti -1c
.RI "void \fBsuiteSetUp\fP (void)"
.br
.ti -1c
.RI "int \fBsuiteTearDown\fP (int num_failures)"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define TEST_ASSERT(condition)   \fBUNITY_TEST_ASSERT\fP(       (condition), __LINE__, ' Expression Evaluated To FALSE')"

.PP
Definition at line 120 of file unity\&.h\&.
.SS "#define TEST_ASSERT_BIT_HIGH(bit, actual)   \fBUNITY_TEST_ASSERT_BITS\fP(((\fBUNITY_UINT32\fP)1 << (bit)), (\fBUNITY_UINT32\fP)(\-1), (actual), __LINE__, NULL)"

.PP
Definition at line 148 of file unity\&.h\&.
.SS "#define TEST_ASSERT_BIT_HIGH_MESSAGE(bit, actual, message)   \fBUNITY_TEST_ASSERT_BITS\fP(((\fBUNITY_UINT32\fP)1 << (bit)), (\fBUNITY_UINT32\fP)(\-1), (actual), __LINE__, (message))"

.PP
Definition at line 340 of file unity\&.h\&.
.SS "#define TEST_ASSERT_BIT_LOW(bit, actual)   \fBUNITY_TEST_ASSERT_BITS\fP(((\fBUNITY_UINT32\fP)1 << (bit)), (\fBUNITY_UINT32\fP)(0), (actual), __LINE__, NULL)"

.PP
Definition at line 149 of file unity\&.h\&.
.SS "#define TEST_ASSERT_BIT_LOW_MESSAGE(bit, actual, message)   \fBUNITY_TEST_ASSERT_BITS\fP(((\fBUNITY_UINT32\fP)1 << (bit)), (\fBUNITY_UINT32\fP)(0), (actual), __LINE__, (message))"

.PP
Definition at line 341 of file unity\&.h\&.
.SS "#define TEST_ASSERT_BITS(mask, expected, actual)   \fBUNITY_TEST_ASSERT_BITS\fP((mask), (expected), (actual), __LINE__, NULL)"

.PP
Definition at line 145 of file unity\&.h\&.
.SS "#define TEST_ASSERT_BITS_HIGH(mask, actual)   \fBUNITY_TEST_ASSERT_BITS\fP((mask), (\fBUNITY_UINT32\fP)(\-1), (actual), __LINE__, NULL)"

.PP
Definition at line 146 of file unity\&.h\&.
.SS "#define TEST_ASSERT_BITS_HIGH_MESSAGE(mask, actual, message)   \fBUNITY_TEST_ASSERT_BITS\fP((mask), (\fBUNITY_UINT32\fP)(\-1), (actual), __LINE__, (message))"

.PP
Definition at line 338 of file unity\&.h\&.
.SS "#define TEST_ASSERT_BITS_LOW(mask, actual)   \fBUNITY_TEST_ASSERT_BITS\fP((mask), (\fBUNITY_UINT32\fP)(0), (actual), __LINE__, NULL)"

.PP
Definition at line 147 of file unity\&.h\&.
.SS "#define TEST_ASSERT_BITS_LOW_MESSAGE(mask, actual, message)   \fBUNITY_TEST_ASSERT_BITS\fP((mask), (\fBUNITY_UINT32\fP)(0), (actual), __LINE__, (message))"

.PP
Definition at line 339 of file unity\&.h\&.
.SS "#define TEST_ASSERT_BITS_MESSAGE(mask, expected, actual, message)   \fBUNITY_TEST_ASSERT_BITS\fP((mask), (expected), (actual), __LINE__, (message))"

.PP
Definition at line 337 of file unity\&.h\&.
.SS "#define TEST_ASSERT_DOUBLE_IS_DETERMINATE(actual)   \fBUNITY_TEST_ASSERT_DOUBLE_IS_DETERMINATE\fP((actual), __LINE__, NULL)"

.PP
Definition at line 301 of file unity\&.h\&.
.SS "#define TEST_ASSERT_DOUBLE_IS_DETERMINATE_MESSAGE(actual, message)   \fBUNITY_TEST_ASSERT_DOUBLE_IS_DETERMINATE\fP((actual), __LINE__, (message))"

.PP
Definition at line 493 of file unity\&.h\&.
.SS "#define TEST_ASSERT_DOUBLE_IS_INF(actual)   \fBUNITY_TEST_ASSERT_DOUBLE_IS_INF\fP((actual), __LINE__, NULL)"

.PP
Definition at line 298 of file unity\&.h\&.
.SS "#define TEST_ASSERT_DOUBLE_IS_INF_MESSAGE(actual, message)   \fBUNITY_TEST_ASSERT_DOUBLE_IS_INF\fP((actual), __LINE__, (message))"

.PP
Definition at line 490 of file unity\&.h\&.
.SS "#define TEST_ASSERT_DOUBLE_IS_NAN(actual)   \fBUNITY_TEST_ASSERT_DOUBLE_IS_NAN\fP((actual), __LINE__, NULL)"

.PP
Definition at line 300 of file unity\&.h\&.
.SS "#define TEST_ASSERT_DOUBLE_IS_NAN_MESSAGE(actual, message)   \fBUNITY_TEST_ASSERT_DOUBLE_IS_NAN\fP((actual), __LINE__, (message))"

.PP
Definition at line 492 of file unity\&.h\&.
.SS "#define TEST_ASSERT_DOUBLE_IS_NEG_INF(actual)   \fBUNITY_TEST_ASSERT_DOUBLE_IS_NEG_INF\fP((actual), __LINE__, NULL)"

.PP
Definition at line 299 of file unity\&.h\&.
.SS "#define TEST_ASSERT_DOUBLE_IS_NEG_INF_MESSAGE(actual, message)   \fBUNITY_TEST_ASSERT_DOUBLE_IS_NEG_INF\fP((actual), __LINE__, (message))"

.PP
Definition at line 491 of file unity\&.h\&.
.SS "#define TEST_ASSERT_DOUBLE_IS_NOT_DETERMINATE(actual)   \fBUNITY_TEST_ASSERT_DOUBLE_IS_NOT_DETERMINATE\fP((actual), __LINE__, NULL)"

.PP
Definition at line 305 of file unity\&.h\&.
.SS "#define TEST_ASSERT_DOUBLE_IS_NOT_DETERMINATE_MESSAGE(actual, message)   \fBUNITY_TEST_ASSERT_DOUBLE_IS_NOT_DETERMINATE\fP((actual), __LINE__, (message))"

.PP
Definition at line 497 of file unity\&.h\&.
.SS "#define TEST_ASSERT_DOUBLE_IS_NOT_INF(actual)   \fBUNITY_TEST_ASSERT_DOUBLE_IS_NOT_INF\fP((actual), __LINE__, NULL)"

.PP
Definition at line 302 of file unity\&.h\&.
.SS "#define TEST_ASSERT_DOUBLE_IS_NOT_INF_MESSAGE(actual, message)   \fBUNITY_TEST_ASSERT_DOUBLE_IS_NOT_INF\fP((actual), __LINE__, (message))"

.PP
Definition at line 494 of file unity\&.h\&.
.SS "#define TEST_ASSERT_DOUBLE_IS_NOT_NAN(actual)   \fBUNITY_TEST_ASSERT_DOUBLE_IS_NOT_NAN\fP((actual), __LINE__, NULL)"

.PP
Definition at line 304 of file unity\&.h\&.
.SS "#define TEST_ASSERT_DOUBLE_IS_NOT_NAN_MESSAGE(actual, message)   \fBUNITY_TEST_ASSERT_DOUBLE_IS_NOT_NAN\fP((actual), __LINE__, (message))"

.PP
Definition at line 496 of file unity\&.h\&.
.SS "#define TEST_ASSERT_DOUBLE_IS_NOT_NEG_INF(actual)   \fBUNITY_TEST_ASSERT_DOUBLE_IS_NOT_NEG_INF\fP((actual), __LINE__, NULL)"

.PP
Definition at line 303 of file unity\&.h\&.
.SS "#define TEST_ASSERT_DOUBLE_IS_NOT_NEG_INF_MESSAGE(actual, message)   \fBUNITY_TEST_ASSERT_DOUBLE_IS_NOT_NEG_INF\fP((actual), __LINE__, (message))"

.PP
Definition at line 495 of file unity\&.h\&.
.SS "#define TEST_ASSERT_DOUBLE_WITHIN(delta, expected, actual)   \fBUNITY_TEST_ASSERT_DOUBLE_WITHIN\fP((delta), (expected), (actual), __LINE__, NULL)"

.PP
Definition at line 294 of file unity\&.h\&.
.SS "#define TEST_ASSERT_DOUBLE_WITHIN_MESSAGE(delta, expected, actual, message)   \fBUNITY_TEST_ASSERT_DOUBLE_WITHIN\fP((delta), (expected), (actual), __LINE__, (message))"

.PP
Definition at line 486 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EACH_EQUAL_DOUBLE(expected, actual, num_elements)   \fBUNITY_TEST_ASSERT_EACH_EQUAL_DOUBLE\fP((expected), (actual), (num_elements), __LINE__, NULL)"

.PP
Definition at line 297 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EACH_EQUAL_DOUBLE_MESSAGE(expected, actual, num_elements, message)   \fBUNITY_TEST_ASSERT_EACH_EQUAL_DOUBLE\fP((expected), (actual), (num_elements), __LINE__, (message))"

.PP
Definition at line 489 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EACH_EQUAL_FLOAT(expected, actual, num_elements)   \fBUNITY_TEST_ASSERT_EACH_EQUAL_FLOAT\fP((expected), (actual), (num_elements), __LINE__, NULL)"

.PP
Definition at line 283 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EACH_EQUAL_FLOAT_MESSAGE(expected, actual, num_elements, message)   \fBUNITY_TEST_ASSERT_EACH_EQUAL_FLOAT\fP((expected), (actual), (num_elements), __LINE__, (message))"

.PP
Definition at line 475 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EACH_EQUAL_HEX(expected, actual, num_elements)   \fBUNITY_TEST_ASSERT_EACH_EQUAL_HEX32\fP((expected), (actual), (num_elements), __LINE__, NULL)"

.PP
Definition at line 270 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EACH_EQUAL_HEX16(expected, actual, num_elements)   \fBUNITY_TEST_ASSERT_EACH_EQUAL_HEX16\fP((expected), (actual), (num_elements), __LINE__, NULL)"

.PP
Definition at line 272 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EACH_EQUAL_HEX16_MESSAGE(expected, actual, num_elements, message)   \fBUNITY_TEST_ASSERT_EACH_EQUAL_HEX16\fP((expected), (actual), (num_elements), __LINE__, (message))"

.PP
Definition at line 464 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EACH_EQUAL_HEX32(expected, actual, num_elements)   \fBUNITY_TEST_ASSERT_EACH_EQUAL_HEX32\fP((expected), (actual), (num_elements), __LINE__, NULL)"

.PP
Definition at line 273 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EACH_EQUAL_HEX32_MESSAGE(expected, actual, num_elements, message)   \fBUNITY_TEST_ASSERT_EACH_EQUAL_HEX32\fP((expected), (actual), (num_elements), __LINE__, (message))"

.PP
Definition at line 465 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EACH_EQUAL_HEX64(expected, actual, num_elements)   UNITY_TEST_ASSERT_EACH_EQUAL_HEX64((expected), (actual), (num_elements), __LINE__, NULL)"

.PP
Definition at line 274 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EACH_EQUAL_HEX64_MESSAGE(expected, actual, num_elements, message)   UNITY_TEST_ASSERT_EACH_EQUAL_HEX64((expected), (actual), (num_elements), __LINE__, (message))"

.PP
Definition at line 466 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EACH_EQUAL_HEX8(expected, actual, num_elements)   \fBUNITY_TEST_ASSERT_EACH_EQUAL_HEX8\fP((expected), (actual), (num_elements), __LINE__, NULL)"

.PP
Definition at line 271 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EACH_EQUAL_HEX8_MESSAGE(expected, actual, num_elements, message)   \fBUNITY_TEST_ASSERT_EACH_EQUAL_HEX8\fP((expected), (actual), (num_elements), __LINE__, (message))"

.PP
Definition at line 463 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EACH_EQUAL_HEX_MESSAGE(expected, actual, num_elements, message)   \fBUNITY_TEST_ASSERT_EACH_EQUAL_HEX32\fP((expected), (actual), (num_elements), __LINE__, (message))"

.PP
Definition at line 462 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EACH_EQUAL_INT(expected, actual, num_elements)   \fBUNITY_TEST_ASSERT_EACH_EQUAL_INT\fP((expected), (actual), (num_elements), __LINE__, NULL)"

.PP
Definition at line 260 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EACH_EQUAL_INT16(expected, actual, num_elements)   \fBUNITY_TEST_ASSERT_EACH_EQUAL_INT16\fP((expected), (actual), (num_elements), __LINE__, NULL)"

.PP
Definition at line 262 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EACH_EQUAL_INT16_MESSAGE(expected, actual, num_elements, message)   \fBUNITY_TEST_ASSERT_EACH_EQUAL_INT16\fP((expected), (actual), (num_elements), __LINE__, (message))"

.PP
Definition at line 454 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EACH_EQUAL_INT32(expected, actual, num_elements)   \fBUNITY_TEST_ASSERT_EACH_EQUAL_INT32\fP((expected), (actual), (num_elements), __LINE__, NULL)"

.PP
Definition at line 263 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EACH_EQUAL_INT32_MESSAGE(expected, actual, num_elements, message)   \fBUNITY_TEST_ASSERT_EACH_EQUAL_INT32\fP((expected), (actual), (num_elements), __LINE__, (message))"

.PP
Definition at line 455 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EACH_EQUAL_INT64(expected, actual, num_elements)   UNITY_TEST_ASSERT_EACH_EQUAL_INT64((expected), (actual), (num_elements), __LINE__, NULL)"

.PP
Definition at line 264 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EACH_EQUAL_INT64_MESSAGE(expected, actual, num_elements, message)   UNITY_TEST_ASSERT_EACH_EQUAL_INT64((expected), (actual), (num_elements), __LINE__, (message))"

.PP
Definition at line 456 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EACH_EQUAL_INT8(expected, actual, num_elements)   \fBUNITY_TEST_ASSERT_EACH_EQUAL_INT8\fP((expected), (actual), (num_elements), __LINE__, NULL)"

.PP
Definition at line 261 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EACH_EQUAL_INT8_MESSAGE(expected, actual, num_elements, message)   \fBUNITY_TEST_ASSERT_EACH_EQUAL_INT8\fP((expected), (actual), (num_elements), __LINE__, (message))"

.PP
Definition at line 453 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EACH_EQUAL_INT_MESSAGE(expected, actual, num_elements, message)   \fBUNITY_TEST_ASSERT_EACH_EQUAL_INT\fP((expected), (actual), (num_elements), __LINE__, (message))"

.PP
Definition at line 452 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EACH_EQUAL_MEMORY(expected, actual, len, num_elements)   \fBUNITY_TEST_ASSERT_EACH_EQUAL_MEMORY\fP((expected), (actual), (len), (num_elements), __LINE__, NULL)"

.PP
Definition at line 277 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EACH_EQUAL_MEMORY_MESSAGE(expected, actual, len, num_elements, message)   \fBUNITY_TEST_ASSERT_EACH_EQUAL_MEMORY\fP((expected), (actual), (len), (num_elements), __LINE__, (message))"

.PP
Definition at line 469 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EACH_EQUAL_PTR(expected, actual, num_elements)   \fBUNITY_TEST_ASSERT_EACH_EQUAL_PTR\fP((expected), (actual), (num_elements), __LINE__, NULL)"

.PP
Definition at line 275 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EACH_EQUAL_PTR_MESSAGE(expected, actual, num_elements, message)   \fBUNITY_TEST_ASSERT_EACH_EQUAL_PTR\fP((expected), (actual), (num_elements), __LINE__, (message))"

.PP
Definition at line 467 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EACH_EQUAL_STRING(expected, actual, num_elements)   \fBUNITY_TEST_ASSERT_EACH_EQUAL_STRING\fP((expected), (actual), (num_elements), __LINE__, NULL)"

.PP
Definition at line 276 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EACH_EQUAL_STRING_MESSAGE(expected, actual, num_elements, message)   \fBUNITY_TEST_ASSERT_EACH_EQUAL_STRING\fP((expected), (actual), (num_elements), __LINE__, (message))"

.PP
Definition at line 468 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EACH_EQUAL_UINT(expected, actual, num_elements)   \fBUNITY_TEST_ASSERT_EACH_EQUAL_UINT\fP((expected), (actual), (num_elements), __LINE__, NULL)"

.PP
Definition at line 265 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EACH_EQUAL_UINT16(expected, actual, num_elements)   \fBUNITY_TEST_ASSERT_EACH_EQUAL_UINT16\fP((expected), (actual), (num_elements), __LINE__, NULL)"

.PP
Definition at line 267 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EACH_EQUAL_UINT16_MESSAGE(expected, actual, num_elements, message)   \fBUNITY_TEST_ASSERT_EACH_EQUAL_UINT16\fP((expected), (actual), (num_elements), __LINE__, (message))"

.PP
Definition at line 459 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EACH_EQUAL_UINT32(expected, actual, num_elements)   \fBUNITY_TEST_ASSERT_EACH_EQUAL_UINT32\fP((expected), (actual), (num_elements), __LINE__, NULL)"

.PP
Definition at line 268 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EACH_EQUAL_UINT32_MESSAGE(expected, actual, num_elements, message)   \fBUNITY_TEST_ASSERT_EACH_EQUAL_UINT32\fP((expected), (actual), (num_elements), __LINE__, (message))"

.PP
Definition at line 460 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EACH_EQUAL_UINT64(expected, actual, num_elements)   UNITY_TEST_ASSERT_EACH_EQUAL_UINT64((expected), (actual), (num_elements), __LINE__, NULL)"

.PP
Definition at line 269 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EACH_EQUAL_UINT64_MESSAGE(expected, actual, num_elements, message)   UNITY_TEST_ASSERT_EACH_EQUAL_UINT64((expected), (actual), (num_elements), __LINE__, (message))"

.PP
Definition at line 461 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EACH_EQUAL_UINT8(expected, actual, num_elements)   \fBUNITY_TEST_ASSERT_EACH_EQUAL_UINT8\fP((expected), (actual), (num_elements), __LINE__, NULL)"

.PP
Definition at line 266 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EACH_EQUAL_UINT8_MESSAGE(expected, actual, num_elements, message)   \fBUNITY_TEST_ASSERT_EACH_EQUAL_UINT8\fP((expected), (actual), (num_elements), __LINE__, (message))"

.PP
Definition at line 458 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EACH_EQUAL_UINT_MESSAGE(expected, actual, num_elements, message)   \fBUNITY_TEST_ASSERT_EACH_EQUAL_UINT\fP((expected), (actual), (num_elements), __LINE__, (message))"

.PP
Definition at line 457 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EQUAL(expected, actual)   \fBUNITY_TEST_ASSERT_EQUAL_INT\fP((expected), (actual), __LINE__, NULL)"

.PP
Definition at line 133 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EQUAL_DOUBLE(expected, actual)   \fBUNITY_TEST_ASSERT_EQUAL_DOUBLE\fP((expected), (actual), __LINE__, NULL)"

.PP
Definition at line 295 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EQUAL_DOUBLE_ARRAY(expected, actual, num_elements)   \fBUNITY_TEST_ASSERT_EQUAL_DOUBLE_ARRAY\fP((expected), (actual), (num_elements), __LINE__, NULL)"

.PP
Definition at line 296 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EQUAL_DOUBLE_ARRAY_MESSAGE(expected, actual, num_elements, message)   \fBUNITY_TEST_ASSERT_EQUAL_DOUBLE_ARRAY\fP((expected), (actual), (num_elements), __LINE__, (message))"

.PP
Definition at line 488 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EQUAL_DOUBLE_MESSAGE(expected, actual, message)   \fBUNITY_TEST_ASSERT_EQUAL_DOUBLE\fP((expected), (actual), __LINE__, (message))"

.PP
Definition at line 487 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EQUAL_FLOAT(expected, actual)   \fBUNITY_TEST_ASSERT_EQUAL_FLOAT\fP((expected), (actual), __LINE__, NULL)"

.PP
Definition at line 281 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EQUAL_FLOAT_ARRAY(expected, actual, num_elements)   \fBUNITY_TEST_ASSERT_EQUAL_FLOAT_ARRAY\fP((expected), (actual), (num_elements), __LINE__, NULL)"

.PP
Definition at line 282 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EQUAL_FLOAT_ARRAY_MESSAGE(expected, actual, num_elements, message)   \fBUNITY_TEST_ASSERT_EQUAL_FLOAT_ARRAY\fP((expected), (actual), (num_elements), __LINE__, (message))"

.PP
Definition at line 474 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EQUAL_FLOAT_MESSAGE(expected, actual, message)   \fBUNITY_TEST_ASSERT_EQUAL_FLOAT\fP((expected), (actual), __LINE__, (message))"

.PP
Definition at line 473 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EQUAL_HEX(expected, actual)   \fBUNITY_TEST_ASSERT_EQUAL_HEX32\fP((expected), (actual), __LINE__, NULL)"

.PP
Definition at line 140 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EQUAL_HEX16(expected, actual)   \fBUNITY_TEST_ASSERT_EQUAL_HEX16\fP((expected), (actual), __LINE__, NULL)"

.PP
Definition at line 142 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EQUAL_HEX16_ARRAY(expected, actual, num_elements)   \fBUNITY_TEST_ASSERT_EQUAL_HEX16_ARRAY\fP((expected), (actual), (num_elements), __LINE__, NULL)"

.PP
Definition at line 252 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EQUAL_HEX16_ARRAY_MESSAGE(expected, actual, num_elements, message)   \fBUNITY_TEST_ASSERT_EQUAL_HEX16_ARRAY\fP((expected), (actual), (num_elements), __LINE__, (message))"

.PP
Definition at line 444 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EQUAL_HEX16_MESSAGE(expected, actual, message)   \fBUNITY_TEST_ASSERT_EQUAL_HEX16\fP((expected), (actual), __LINE__, (message))"

.PP
Definition at line 334 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EQUAL_HEX32(expected, actual)   \fBUNITY_TEST_ASSERT_EQUAL_HEX32\fP((expected), (actual), __LINE__, NULL)"

.PP
Definition at line 143 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EQUAL_HEX32_ARRAY(expected, actual, num_elements)   \fBUNITY_TEST_ASSERT_EQUAL_HEX32_ARRAY\fP((expected), (actual), (num_elements), __LINE__, NULL)"

.PP
Definition at line 253 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EQUAL_HEX32_ARRAY_MESSAGE(expected, actual, num_elements, message)   \fBUNITY_TEST_ASSERT_EQUAL_HEX32_ARRAY\fP((expected), (actual), (num_elements), __LINE__, (message))"

.PP
Definition at line 445 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EQUAL_HEX32_MESSAGE(expected, actual, message)   \fBUNITY_TEST_ASSERT_EQUAL_HEX32\fP((expected), (actual), __LINE__, (message))"

.PP
Definition at line 335 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EQUAL_HEX64(expected, actual)   \fBUNITY_TEST_ASSERT_EQUAL_HEX64\fP((expected), (actual), __LINE__, NULL)"

.PP
Definition at line 144 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EQUAL_HEX64_ARRAY(expected, actual, num_elements)   \fBUNITY_TEST_ASSERT_EQUAL_HEX64_ARRAY\fP((expected), (actual), (num_elements), __LINE__, NULL)"

.PP
Definition at line 254 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EQUAL_HEX64_ARRAY_MESSAGE(expected, actual, num_elements, message)   \fBUNITY_TEST_ASSERT_EQUAL_HEX64_ARRAY\fP((expected), (actual), (num_elements), __LINE__, (message))"

.PP
Definition at line 446 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EQUAL_HEX64_MESSAGE(expected, actual, message)   \fBUNITY_TEST_ASSERT_EQUAL_HEX64\fP((expected), (actual), __LINE__, (message))"

.PP
Definition at line 336 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EQUAL_HEX8(expected, actual)   \fBUNITY_TEST_ASSERT_EQUAL_HEX8\fP( (expected), (actual), __LINE__, NULL)"

.PP
Definition at line 141 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EQUAL_HEX8_ARRAY(expected, actual, num_elements)   \fBUNITY_TEST_ASSERT_EQUAL_HEX8_ARRAY\fP((expected), (actual), (num_elements), __LINE__, NULL)"

.PP
Definition at line 251 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EQUAL_HEX8_ARRAY_MESSAGE(expected, actual, num_elements, message)   \fBUNITY_TEST_ASSERT_EQUAL_HEX8_ARRAY\fP((expected), (actual), (num_elements), __LINE__, (message))"

.PP
Definition at line 443 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EQUAL_HEX8_MESSAGE(expected, actual, message)   \fBUNITY_TEST_ASSERT_EQUAL_HEX8\fP( (expected), (actual), __LINE__, (message))"

.PP
Definition at line 333 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EQUAL_HEX_ARRAY(expected, actual, num_elements)   \fBUNITY_TEST_ASSERT_EQUAL_HEX32_ARRAY\fP((expected), (actual), (num_elements), __LINE__, NULL)"

.PP
Definition at line 250 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EQUAL_HEX_ARRAY_MESSAGE(expected, actual, num_elements, message)   \fBUNITY_TEST_ASSERT_EQUAL_HEX32_ARRAY\fP((expected), (actual), (num_elements), __LINE__, (message))"

.PP
Definition at line 442 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EQUAL_HEX_MESSAGE(expected, actual, message)   \fBUNITY_TEST_ASSERT_EQUAL_HEX32\fP((expected), (actual), __LINE__, (message))"

.PP
Definition at line 332 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EQUAL_INT(expected, actual)   \fBUNITY_TEST_ASSERT_EQUAL_INT\fP((expected), (actual), __LINE__, NULL)"

.PP
Definition at line 128 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EQUAL_INT16(expected, actual)   \fBUNITY_TEST_ASSERT_EQUAL_INT16\fP((expected), (actual), __LINE__, NULL)"

.PP
Definition at line 130 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EQUAL_INT16_ARRAY(expected, actual, num_elements)   \fBUNITY_TEST_ASSERT_EQUAL_INT16_ARRAY\fP((expected), (actual), (num_elements), __LINE__, NULL)"

.PP
Definition at line 242 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EQUAL_INT16_ARRAY_MESSAGE(expected, actual, num_elements, message)   \fBUNITY_TEST_ASSERT_EQUAL_INT16_ARRAY\fP((expected), (actual), (num_elements), __LINE__, (message))"

.PP
Definition at line 434 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EQUAL_INT16_MESSAGE(expected, actual, message)   \fBUNITY_TEST_ASSERT_EQUAL_INT16\fP((expected), (actual), __LINE__, (message))"

.PP
Definition at line 322 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EQUAL_INT32(expected, actual)   \fBUNITY_TEST_ASSERT_EQUAL_INT32\fP((expected), (actual), __LINE__, NULL)"

.PP
Definition at line 131 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EQUAL_INT32_ARRAY(expected, actual, num_elements)   \fBUNITY_TEST_ASSERT_EQUAL_INT32_ARRAY\fP((expected), (actual), (num_elements), __LINE__, NULL)"

.PP
Definition at line 243 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EQUAL_INT32_ARRAY_MESSAGE(expected, actual, num_elements, message)   \fBUNITY_TEST_ASSERT_EQUAL_INT32_ARRAY\fP((expected), (actual), (num_elements), __LINE__, (message))"

.PP
Definition at line 435 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EQUAL_INT32_MESSAGE(expected, actual, message)   \fBUNITY_TEST_ASSERT_EQUAL_INT32\fP((expected), (actual), __LINE__, (message))"

.PP
Definition at line 323 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EQUAL_INT64(expected, actual)   \fBUNITY_TEST_ASSERT_EQUAL_INT64\fP((expected), (actual), __LINE__, NULL)"

.PP
Definition at line 132 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EQUAL_INT64_ARRAY(expected, actual, num_elements)   \fBUNITY_TEST_ASSERT_EQUAL_INT64_ARRAY\fP((expected), (actual), (num_elements), __LINE__, NULL)"

.PP
Definition at line 244 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EQUAL_INT64_ARRAY_MESSAGE(expected, actual, num_elements, message)   \fBUNITY_TEST_ASSERT_EQUAL_INT64_ARRAY\fP((expected), (actual), (num_elements), __LINE__, (message))"

.PP
Definition at line 436 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EQUAL_INT64_MESSAGE(expected, actual, message)   \fBUNITY_TEST_ASSERT_EQUAL_INT64\fP((expected), (actual), __LINE__, (message))"

.PP
Definition at line 324 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EQUAL_INT8(expected, actual)   \fBUNITY_TEST_ASSERT_EQUAL_INT8\fP((expected), (actual), __LINE__, NULL)"

.PP
Definition at line 129 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EQUAL_INT8_ARRAY(expected, actual, num_elements)   \fBUNITY_TEST_ASSERT_EQUAL_INT8_ARRAY\fP((expected), (actual), (num_elements), __LINE__, NULL)"

.PP
Definition at line 241 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EQUAL_INT8_ARRAY_MESSAGE(expected, actual, num_elements, message)   \fBUNITY_TEST_ASSERT_EQUAL_INT8_ARRAY\fP((expected), (actual), (num_elements), __LINE__, (message))"

.PP
Definition at line 433 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EQUAL_INT8_MESSAGE(expected, actual, message)   \fBUNITY_TEST_ASSERT_EQUAL_INT8\fP((expected), (actual), __LINE__, (message))"

.PP
Definition at line 321 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EQUAL_INT_ARRAY(expected, actual, num_elements)   \fBUNITY_TEST_ASSERT_EQUAL_INT_ARRAY\fP((expected), (actual), (num_elements), __LINE__, NULL)"

.PP
Definition at line 240 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EQUAL_INT_ARRAY_MESSAGE(expected, actual, num_elements, message)   \fBUNITY_TEST_ASSERT_EQUAL_INT_ARRAY\fP((expected), (actual), (num_elements), __LINE__, (message))"

.PP
Definition at line 432 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EQUAL_INT_MESSAGE(expected, actual, message)   \fBUNITY_TEST_ASSERT_EQUAL_INT\fP((expected), (actual), __LINE__, (message))"

.PP
Definition at line 320 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EQUAL_MEMORY(expected, actual, len)   \fBUNITY_TEST_ASSERT_EQUAL_MEMORY\fP((expected), (actual), (len), __LINE__, NULL)"

.PP
Definition at line 237 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EQUAL_MEMORY_ARRAY(expected, actual, len, num_elements)   \fBUNITY_TEST_ASSERT_EQUAL_MEMORY_ARRAY\fP((expected), (actual), (len), (num_elements), __LINE__, NULL)"

.PP
Definition at line 257 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EQUAL_MEMORY_ARRAY_MESSAGE(expected, actual, len, num_elements, message)   \fBUNITY_TEST_ASSERT_EQUAL_MEMORY_ARRAY\fP((expected), (actual), (len), (num_elements), __LINE__, (message))"

.PP
Definition at line 449 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EQUAL_MEMORY_MESSAGE(expected, actual, len, message)   \fBUNITY_TEST_ASSERT_EQUAL_MEMORY\fP((expected), (actual), (len), __LINE__, (message))"

.PP
Definition at line 429 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EQUAL_MESSAGE(expected, actual, message)   \fBUNITY_TEST_ASSERT_EQUAL_INT\fP((expected), (actual), __LINE__, (message))"

.PP
Definition at line 325 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EQUAL_PTR(expected, actual)   \fBUNITY_TEST_ASSERT_EQUAL_PTR\fP((expected), (actual), __LINE__, NULL)"

.PP
Definition at line 234 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EQUAL_PTR_ARRAY(expected, actual, num_elements)   \fBUNITY_TEST_ASSERT_EQUAL_PTR_ARRAY\fP((expected), (actual), (num_elements), __LINE__, NULL)"

.PP
Definition at line 255 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EQUAL_PTR_ARRAY_MESSAGE(expected, actual, num_elements, message)   \fBUNITY_TEST_ASSERT_EQUAL_PTR_ARRAY\fP((expected), (actual), (num_elements), __LINE__, (message))"

.PP
Definition at line 447 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EQUAL_PTR_MESSAGE(expected, actual, message)   \fBUNITY_TEST_ASSERT_EQUAL_PTR\fP((expected), (actual), __LINE__, (message))"

.PP
Definition at line 426 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EQUAL_STRING(expected, actual)   \fBUNITY_TEST_ASSERT_EQUAL_STRING\fP((expected), (actual), __LINE__, NULL)"

.PP
Definition at line 235 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EQUAL_STRING_ARRAY(expected, actual, num_elements)   \fBUNITY_TEST_ASSERT_EQUAL_STRING_ARRAY\fP((expected), (actual), (num_elements), __LINE__, NULL)"

.PP
Definition at line 256 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EQUAL_STRING_ARRAY_MESSAGE(expected, actual, num_elements, message)   \fBUNITY_TEST_ASSERT_EQUAL_STRING_ARRAY\fP((expected), (actual), (num_elements), __LINE__, (message))"

.PP
Definition at line 448 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EQUAL_STRING_LEN(expected, actual, len)   \fBUNITY_TEST_ASSERT_EQUAL_STRING_LEN\fP((expected), (actual), (len), __LINE__, NULL)"

.PP
Definition at line 236 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EQUAL_STRING_LEN_MESSAGE(expected, actual, len, message)   \fBUNITY_TEST_ASSERT_EQUAL_STRING_LEN\fP((expected), (actual), (len), __LINE__, (message))"

.PP
Definition at line 428 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EQUAL_STRING_MESSAGE(expected, actual, message)   \fBUNITY_TEST_ASSERT_EQUAL_STRING\fP((expected), (actual), __LINE__, (message))"

.PP
Definition at line 427 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EQUAL_UINT(expected, actual)   \fBUNITY_TEST_ASSERT_EQUAL_UINT\fP( (expected), (actual), __LINE__, NULL)"

.PP
Definition at line 135 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EQUAL_UINT16(expected, actual)   \fBUNITY_TEST_ASSERT_EQUAL_UINT16\fP( (expected), (actual), __LINE__, NULL)"

.PP
Definition at line 137 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EQUAL_UINT16_ARRAY(expected, actual, num_elements)   \fBUNITY_TEST_ASSERT_EQUAL_UINT16_ARRAY\fP((expected), (actual), (num_elements), __LINE__, NULL)"

.PP
Definition at line 247 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EQUAL_UINT16_ARRAY_MESSAGE(expected, actual, num_elements, message)   \fBUNITY_TEST_ASSERT_EQUAL_UINT16_ARRAY\fP((expected), (actual), (num_elements), __LINE__, (message))"

.PP
Definition at line 439 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EQUAL_UINT16_MESSAGE(expected, actual, message)   \fBUNITY_TEST_ASSERT_EQUAL_UINT16\fP( (expected), (actual), __LINE__, (message))"

.PP
Definition at line 329 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EQUAL_UINT32(expected, actual)   \fBUNITY_TEST_ASSERT_EQUAL_UINT32\fP( (expected), (actual), __LINE__, NULL)"

.PP
Definition at line 138 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EQUAL_UINT32_ARRAY(expected, actual, num_elements)   \fBUNITY_TEST_ASSERT_EQUAL_UINT32_ARRAY\fP((expected), (actual), (num_elements), __LINE__, NULL)"

.PP
Definition at line 248 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EQUAL_UINT32_ARRAY_MESSAGE(expected, actual, num_elements, message)   \fBUNITY_TEST_ASSERT_EQUAL_UINT32_ARRAY\fP((expected), (actual), (num_elements), __LINE__, (message))"

.PP
Definition at line 440 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EQUAL_UINT32_MESSAGE(expected, actual, message)   \fBUNITY_TEST_ASSERT_EQUAL_UINT32\fP( (expected), (actual), __LINE__, (message))"

.PP
Definition at line 330 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EQUAL_UINT64(expected, actual)   \fBUNITY_TEST_ASSERT_EQUAL_UINT64\fP( (expected), (actual), __LINE__, NULL)"

.PP
Definition at line 139 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EQUAL_UINT64_ARRAY(expected, actual, num_elements)   \fBUNITY_TEST_ASSERT_EQUAL_UINT64_ARRAY\fP((expected), (actual), (num_elements), __LINE__, NULL)"

.PP
Definition at line 249 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EQUAL_UINT64_ARRAY_MESSAGE(expected, actual, num_elements, message)   \fBUNITY_TEST_ASSERT_EQUAL_UINT64_ARRAY\fP((expected), (actual), (num_elements), __LINE__, (message))"

.PP
Definition at line 441 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EQUAL_UINT64_MESSAGE(expected, actual, message)   \fBUNITY_TEST_ASSERT_EQUAL_UINT64\fP( (expected), (actual), __LINE__, (message))"

.PP
Definition at line 331 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EQUAL_UINT8(expected, actual)   \fBUNITY_TEST_ASSERT_EQUAL_UINT8\fP( (expected), (actual), __LINE__, NULL)"

.PP
Definition at line 136 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EQUAL_UINT8_ARRAY(expected, actual, num_elements)   \fBUNITY_TEST_ASSERT_EQUAL_UINT8_ARRAY\fP((expected), (actual), (num_elements), __LINE__, NULL)"

.PP
Definition at line 246 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EQUAL_UINT8_ARRAY_MESSAGE(expected, actual, num_elements, message)   \fBUNITY_TEST_ASSERT_EQUAL_UINT8_ARRAY\fP((expected), (actual), (num_elements), __LINE__, (message))"

.PP
Definition at line 438 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EQUAL_UINT8_MESSAGE(expected, actual, message)   \fBUNITY_TEST_ASSERT_EQUAL_UINT8\fP( (expected), (actual), __LINE__, (message))"

.PP
Definition at line 328 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EQUAL_UINT_ARRAY(expected, actual, num_elements)   \fBUNITY_TEST_ASSERT_EQUAL_UINT_ARRAY\fP((expected), (actual), (num_elements), __LINE__, NULL)"

.PP
Definition at line 245 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EQUAL_UINT_ARRAY_MESSAGE(expected, actual, num_elements, message)   \fBUNITY_TEST_ASSERT_EQUAL_UINT_ARRAY\fP((expected), (actual), (num_elements), __LINE__, (message))"

.PP
Definition at line 437 of file unity\&.h\&.
.SS "#define TEST_ASSERT_EQUAL_UINT_MESSAGE(expected, actual, message)   \fBUNITY_TEST_ASSERT_EQUAL_UINT\fP( (expected), (actual), __LINE__, (message))"

.PP
Definition at line 327 of file unity\&.h\&.
.SS "#define TEST_ASSERT_FALSE(condition)   \fBUNITY_TEST_ASSERT\fP(      !(condition), __LINE__, ' Expected FALSE Was TRUE')"

.PP
Definition at line 123 of file unity\&.h\&.
.SS "#define TEST_ASSERT_FALSE_MESSAGE(condition, message)   \fBUNITY_TEST_ASSERT\fP(      !(condition), __LINE__, (message))"

.PP
Definition at line 315 of file unity\&.h\&.
.SS "#define TEST_ASSERT_FLOAT_IS_DETERMINATE(actual)   \fBUNITY_TEST_ASSERT_FLOAT_IS_DETERMINATE\fP((actual), __LINE__, NULL)"

.PP
Definition at line 287 of file unity\&.h\&.
.SS "#define TEST_ASSERT_FLOAT_IS_DETERMINATE_MESSAGE(actual, message)   \fBUNITY_TEST_ASSERT_FLOAT_IS_DETERMINATE\fP((actual), __LINE__, (message))"

.PP
Definition at line 479 of file unity\&.h\&.
.SS "#define TEST_ASSERT_FLOAT_IS_INF(actual)   \fBUNITY_TEST_ASSERT_FLOAT_IS_INF\fP((actual), __LINE__, NULL)"

.PP
Definition at line 284 of file unity\&.h\&.
.SS "#define TEST_ASSERT_FLOAT_IS_INF_MESSAGE(actual, message)   \fBUNITY_TEST_ASSERT_FLOAT_IS_INF\fP((actual), __LINE__, (message))"

.PP
Definition at line 476 of file unity\&.h\&.
.SS "#define TEST_ASSERT_FLOAT_IS_NAN(actual)   \fBUNITY_TEST_ASSERT_FLOAT_IS_NAN\fP((actual), __LINE__, NULL)"

.PP
Definition at line 286 of file unity\&.h\&.
.SS "#define TEST_ASSERT_FLOAT_IS_NAN_MESSAGE(actual, message)   \fBUNITY_TEST_ASSERT_FLOAT_IS_NAN\fP((actual), __LINE__, (message))"

.PP
Definition at line 478 of file unity\&.h\&.
.SS "#define TEST_ASSERT_FLOAT_IS_NEG_INF(actual)   \fBUNITY_TEST_ASSERT_FLOAT_IS_NEG_INF\fP((actual), __LINE__, NULL)"

.PP
Definition at line 285 of file unity\&.h\&.
.SS "#define TEST_ASSERT_FLOAT_IS_NEG_INF_MESSAGE(actual, message)   \fBUNITY_TEST_ASSERT_FLOAT_IS_NEG_INF\fP((actual), __LINE__, (message))"

.PP
Definition at line 477 of file unity\&.h\&.
.SS "#define TEST_ASSERT_FLOAT_IS_NOT_DETERMINATE(actual)   \fBUNITY_TEST_ASSERT_FLOAT_IS_NOT_DETERMINATE\fP((actual), __LINE__, NULL)"

.PP
Definition at line 291 of file unity\&.h\&.
.SS "#define TEST_ASSERT_FLOAT_IS_NOT_DETERMINATE_MESSAGE(actual, message)   \fBUNITY_TEST_ASSERT_FLOAT_IS_NOT_DETERMINATE\fP((actual), __LINE__, (message))"

.PP
Definition at line 483 of file unity\&.h\&.
.SS "#define TEST_ASSERT_FLOAT_IS_NOT_INF(actual)   \fBUNITY_TEST_ASSERT_FLOAT_IS_NOT_INF\fP((actual), __LINE__, NULL)"

.PP
Definition at line 288 of file unity\&.h\&.
.SS "#define TEST_ASSERT_FLOAT_IS_NOT_INF_MESSAGE(actual, message)   \fBUNITY_TEST_ASSERT_FLOAT_IS_NOT_INF\fP((actual), __LINE__, (message))"

.PP
Definition at line 480 of file unity\&.h\&.
.SS "#define TEST_ASSERT_FLOAT_IS_NOT_NAN(actual)   \fBUNITY_TEST_ASSERT_FLOAT_IS_NOT_NAN\fP((actual), __LINE__, NULL)"

.PP
Definition at line 290 of file unity\&.h\&.
.SS "#define TEST_ASSERT_FLOAT_IS_NOT_NAN_MESSAGE(actual, message)   \fBUNITY_TEST_ASSERT_FLOAT_IS_NOT_NAN\fP((actual), __LINE__, (message))"

.PP
Definition at line 482 of file unity\&.h\&.
.SS "#define TEST_ASSERT_FLOAT_IS_NOT_NEG_INF(actual)   \fBUNITY_TEST_ASSERT_FLOAT_IS_NOT_NEG_INF\fP((actual), __LINE__, NULL)"

.PP
Definition at line 289 of file unity\&.h\&.
.SS "#define TEST_ASSERT_FLOAT_IS_NOT_NEG_INF_MESSAGE(actual, message)   \fBUNITY_TEST_ASSERT_FLOAT_IS_NOT_NEG_INF\fP((actual), __LINE__, (message))"

.PP
Definition at line 481 of file unity\&.h\&.
.SS "#define TEST_ASSERT_FLOAT_WITHIN(delta, expected, actual)   \fBUNITY_TEST_ASSERT_FLOAT_WITHIN\fP((delta), (expected), (actual), __LINE__, NULL)"

.PP
Definition at line 280 of file unity\&.h\&.
.SS "#define TEST_ASSERT_FLOAT_WITHIN_MESSAGE(delta, expected, actual, message)   \fBUNITY_TEST_ASSERT_FLOAT_WITHIN\fP((delta), (expected), (actual), __LINE__, (message))"

.PP
Definition at line 472 of file unity\&.h\&.
.SS "#define TEST_ASSERT_GREATER_OR_EQUAL(threshold, actual)   \fBUNITY_TEST_ASSERT_GREATER_OR_EQUAL_INT\fP((threshold), (actual), __LINE__, NULL)"

.PP
Definition at line 184 of file unity\&.h\&.
.SS "#define TEST_ASSERT_GREATER_OR_EQUAL_HEX16(threshold, actual)   \fBUNITY_TEST_ASSERT_GREATER_OR_EQUAL_HEX16\fP((threshold), (actual), __LINE__, NULL)"

.PP
Definition at line 196 of file unity\&.h\&.
.SS "#define TEST_ASSERT_GREATER_OR_EQUAL_HEX16_MESSAGE(threshold, actual, message)   \fBUNITY_TEST_ASSERT_GREATER_OR_EQUAL_HEX16\fP((threshold), (actual), __LINE__, (message))"

.PP
Definition at line 388 of file unity\&.h\&.
.SS "#define TEST_ASSERT_GREATER_OR_EQUAL_HEX32(threshold, actual)   \fBUNITY_TEST_ASSERT_GREATER_OR_EQUAL_HEX32\fP((threshold), (actual), __LINE__, NULL)"

.PP
Definition at line 197 of file unity\&.h\&.
.SS "#define TEST_ASSERT_GREATER_OR_EQUAL_HEX32_MESSAGE(threshold, actual, message)   \fBUNITY_TEST_ASSERT_GREATER_OR_EQUAL_HEX32\fP((threshold), (actual), __LINE__, (message))"

.PP
Definition at line 389 of file unity\&.h\&.
.SS "#define TEST_ASSERT_GREATER_OR_EQUAL_HEX64(threshold, actual)   \fBUNITY_TEST_ASSERT_GREATER_OR_EQUAL_HEX64\fP((threshold), (actual), __LINE__, NULL)"

.PP
Definition at line 198 of file unity\&.h\&.
.SS "#define TEST_ASSERT_GREATER_OR_EQUAL_HEX64_MESSAGE(threshold, actual, message)   \fBUNITY_TEST_ASSERT_GREATER_OR_EQUAL_HEX64\fP((threshold), (actual), __LINE__, (message))"

.PP
Definition at line 390 of file unity\&.h\&.
.SS "#define TEST_ASSERT_GREATER_OR_EQUAL_HEX8(threshold, actual)   \fBUNITY_TEST_ASSERT_GREATER_OR_EQUAL_HEX8\fP((threshold), (actual), __LINE__, NULL)"

.PP
Definition at line 195 of file unity\&.h\&.
.SS "#define TEST_ASSERT_GREATER_OR_EQUAL_HEX8_MESSAGE(threshold, actual, message)   \fBUNITY_TEST_ASSERT_GREATER_OR_EQUAL_HEX8\fP((threshold), (actual), __LINE__, (message))"

.PP
Definition at line 387 of file unity\&.h\&.
.SS "#define TEST_ASSERT_GREATER_OR_EQUAL_INT(threshold, actual)   \fBUNITY_TEST_ASSERT_GREATER_OR_EQUAL_INT\fP((threshold), (actual), __LINE__, NULL)"

.PP
Definition at line 185 of file unity\&.h\&.
.SS "#define TEST_ASSERT_GREATER_OR_EQUAL_INT16(threshold, actual)   \fBUNITY_TEST_ASSERT_GREATER_OR_EQUAL_INT16\fP((threshold), (actual), __LINE__, NULL)"

.PP
Definition at line 187 of file unity\&.h\&.
.SS "#define TEST_ASSERT_GREATER_OR_EQUAL_INT16_MESSAGE(threshold, actual, message)   \fBUNITY_TEST_ASSERT_GREATER_OR_EQUAL_INT16\fP((threshold), (actual), __LINE__, (message))"

.PP
Definition at line 379 of file unity\&.h\&.
.SS "#define TEST_ASSERT_GREATER_OR_EQUAL_INT32(threshold, actual)   \fBUNITY_TEST_ASSERT_GREATER_OR_EQUAL_INT32\fP((threshold), (actual), __LINE__, NULL)"

.PP
Definition at line 188 of file unity\&.h\&.
.SS "#define TEST_ASSERT_GREATER_OR_EQUAL_INT32_MESSAGE(threshold, actual, message)   \fBUNITY_TEST_ASSERT_GREATER_OR_EQUAL_INT32\fP((threshold), (actual), __LINE__, (message))"

.PP
Definition at line 380 of file unity\&.h\&.
.SS "#define TEST_ASSERT_GREATER_OR_EQUAL_INT64(threshold, actual)   \fBUNITY_TEST_ASSERT_GREATER_OR_EQUAL_INT64\fP((threshold), (actual), __LINE__, NULL)"

.PP
Definition at line 189 of file unity\&.h\&.
.SS "#define TEST_ASSERT_GREATER_OR_EQUAL_INT64_MESSAGE(threshold, actual, message)   \fBUNITY_TEST_ASSERT_GREATER_OR_EQUAL_INT64\fP((threshold), (actual), __LINE__, (message))"

.PP
Definition at line 381 of file unity\&.h\&.
.SS "#define TEST_ASSERT_GREATER_OR_EQUAL_INT8(threshold, actual)   \fBUNITY_TEST_ASSERT_GREATER_OR_EQUAL_INT8\fP((threshold), (actual), __LINE__, NULL)"

.PP
Definition at line 186 of file unity\&.h\&.
.SS "#define TEST_ASSERT_GREATER_OR_EQUAL_INT8_MESSAGE(threshold, actual, message)   \fBUNITY_TEST_ASSERT_GREATER_OR_EQUAL_INT8\fP((threshold), (actual), __LINE__, (message))"

.PP
Definition at line 378 of file unity\&.h\&.
.SS "#define TEST_ASSERT_GREATER_OR_EQUAL_INT_MESSAGE(threshold, actual, message)   \fBUNITY_TEST_ASSERT_GREATER_OR_EQUAL_INT\fP((threshold), (actual), __LINE__, (message))"

.PP
Definition at line 377 of file unity\&.h\&.
.SS "#define TEST_ASSERT_GREATER_OR_EQUAL_MESSAGE(threshold, actual, message)   \fBUNITY_TEST_ASSERT_GREATER_OR_EQUAL_INT\fP((threshold), (actual), __LINE__, (message))"

.PP
Definition at line 376 of file unity\&.h\&.
.SS "#define TEST_ASSERT_GREATER_OR_EQUAL_UINT(threshold, actual)   \fBUNITY_TEST_ASSERT_GREATER_OR_EQUAL_UINT\fP((threshold), (actual), __LINE__, NULL)"

.PP
Definition at line 190 of file unity\&.h\&.
.SS "#define TEST_ASSERT_GREATER_OR_EQUAL_UINT16(threshold, actual)   \fBUNITY_TEST_ASSERT_GREATER_OR_EQUAL_UINT16\fP((threshold), (actual), __LINE__, NULL)"

.PP
Definition at line 192 of file unity\&.h\&.
.SS "#define TEST_ASSERT_GREATER_OR_EQUAL_UINT16_MESSAGE(threshold, actual, message)   \fBUNITY_TEST_ASSERT_GREATER_OR_EQUAL_UINT16\fP((threshold), (actual), __LINE__, (message))"

.PP
Definition at line 384 of file unity\&.h\&.
.SS "#define TEST_ASSERT_GREATER_OR_EQUAL_UINT32(threshold, actual)   \fBUNITY_TEST_ASSERT_GREATER_OR_EQUAL_UINT32\fP((threshold), (actual), __LINE__, NULL)"

.PP
Definition at line 193 of file unity\&.h\&.
.SS "#define TEST_ASSERT_GREATER_OR_EQUAL_UINT32_MESSAGE(threshold, actual, message)   \fBUNITY_TEST_ASSERT_GREATER_OR_EQUAL_UINT32\fP((threshold), (actual), __LINE__, (message))"

.PP
Definition at line 385 of file unity\&.h\&.
.SS "#define TEST_ASSERT_GREATER_OR_EQUAL_UINT64(threshold, actual)   \fBUNITY_TEST_ASSERT_GREATER_OR_EQUAL_UINT64\fP((threshold), (actual), __LINE__, NULL)"

.PP
Definition at line 194 of file unity\&.h\&.
.SS "#define TEST_ASSERT_GREATER_OR_EQUAL_UINT64_MESSAGE(threshold, actual, message)   \fBUNITY_TEST_ASSERT_GREATER_OR_EQUAL_UINT64\fP((threshold), (actual), __LINE__, (message))"

.PP
Definition at line 386 of file unity\&.h\&.
.SS "#define TEST_ASSERT_GREATER_OR_EQUAL_UINT8(threshold, actual)   \fBUNITY_TEST_ASSERT_GREATER_OR_EQUAL_UINT8\fP((threshold), (actual), __LINE__, NULL)"

.PP
Definition at line 191 of file unity\&.h\&.
.SS "#define TEST_ASSERT_GREATER_OR_EQUAL_UINT8_MESSAGE(threshold, actual, message)   \fBUNITY_TEST_ASSERT_GREATER_OR_EQUAL_UINT8\fP((threshold), (actual), __LINE__, (message))"

.PP
Definition at line 383 of file unity\&.h\&.
.SS "#define TEST_ASSERT_GREATER_OR_EQUAL_UINT_MESSAGE(threshold, actual, message)   \fBUNITY_TEST_ASSERT_GREATER_OR_EQUAL_UINT\fP((threshold), (actual), __LINE__, (message))"

.PP
Definition at line 382 of file unity\&.h\&.
.SS "#define TEST_ASSERT_GREATER_THAN(threshold, actual)   \fBUNITY_TEST_ASSERT_GREATER_THAN_INT\fP((threshold), (actual), __LINE__, NULL)"

.PP
Definition at line 152 of file unity\&.h\&.
.SS "#define TEST_ASSERT_GREATER_THAN_HEX16(threshold, actual)   \fBUNITY_TEST_ASSERT_GREATER_THAN_HEX16\fP((threshold), (actual), __LINE__, NULL)"

.PP
Definition at line 164 of file unity\&.h\&.
.SS "#define TEST_ASSERT_GREATER_THAN_HEX16_MESSAGE(threshold, actual, message)   \fBUNITY_TEST_ASSERT_GREATER_THAN_HEX16\fP((threshold), (actual), __LINE__, (message))"

.PP
Definition at line 356 of file unity\&.h\&.
.SS "#define TEST_ASSERT_GREATER_THAN_HEX32(threshold, actual)   \fBUNITY_TEST_ASSERT_GREATER_THAN_HEX32\fP((threshold), (actual), __LINE__, NULL)"

.PP
Definition at line 165 of file unity\&.h\&.
.SS "#define TEST_ASSERT_GREATER_THAN_HEX32_MESSAGE(threshold, actual, message)   \fBUNITY_TEST_ASSERT_GREATER_THAN_HEX32\fP((threshold), (actual), __LINE__, (message))"

.PP
Definition at line 357 of file unity\&.h\&.
.SS "#define TEST_ASSERT_GREATER_THAN_HEX64(threshold, actual)   \fBUNITY_TEST_ASSERT_GREATER_THAN_HEX64\fP((threshold), (actual), __LINE__, NULL)"

.PP
Definition at line 166 of file unity\&.h\&.
.SS "#define TEST_ASSERT_GREATER_THAN_HEX64_MESSAGE(threshold, actual, message)   \fBUNITY_TEST_ASSERT_GREATER_THAN_HEX64\fP((threshold), (actual), __LINE__, (message))"

.PP
Definition at line 358 of file unity\&.h\&.
.SS "#define TEST_ASSERT_GREATER_THAN_HEX8(threshold, actual)   \fBUNITY_TEST_ASSERT_GREATER_THAN_HEX8\fP((threshold), (actual), __LINE__, NULL)"

.PP
Definition at line 163 of file unity\&.h\&.
.SS "#define TEST_ASSERT_GREATER_THAN_HEX8_MESSAGE(threshold, actual, message)   \fBUNITY_TEST_ASSERT_GREATER_THAN_HEX8\fP((threshold), (actual), __LINE__, (message))"

.PP
Definition at line 355 of file unity\&.h\&.
.SS "#define TEST_ASSERT_GREATER_THAN_INT(threshold, actual)   \fBUNITY_TEST_ASSERT_GREATER_THAN_INT\fP((threshold), (actual), __LINE__, NULL)"

.PP
Definition at line 153 of file unity\&.h\&.
.SS "#define TEST_ASSERT_GREATER_THAN_INT16(threshold, actual)   \fBUNITY_TEST_ASSERT_GREATER_THAN_INT16\fP((threshold), (actual), __LINE__, NULL)"

.PP
Definition at line 155 of file unity\&.h\&.
.SS "#define TEST_ASSERT_GREATER_THAN_INT16_MESSAGE(threshold, actual, message)   \fBUNITY_TEST_ASSERT_GREATER_THAN_INT16\fP((threshold), (actual), __LINE__, (message))"

.PP
Definition at line 347 of file unity\&.h\&.
.SS "#define TEST_ASSERT_GREATER_THAN_INT32(threshold, actual)   \fBUNITY_TEST_ASSERT_GREATER_THAN_INT32\fP((threshold), (actual), __LINE__, NULL)"

.PP
Definition at line 156 of file unity\&.h\&.
.SS "#define TEST_ASSERT_GREATER_THAN_INT32_MESSAGE(threshold, actual, message)   \fBUNITY_TEST_ASSERT_GREATER_THAN_INT32\fP((threshold), (actual), __LINE__, (message))"

.PP
Definition at line 348 of file unity\&.h\&.
.SS "#define TEST_ASSERT_GREATER_THAN_INT64(threshold, actual)   \fBUNITY_TEST_ASSERT_GREATER_THAN_INT64\fP((threshold), (actual), __LINE__, NULL)"

.PP
Definition at line 157 of file unity\&.h\&.
.SS "#define TEST_ASSERT_GREATER_THAN_INT64_MESSAGE(threshold, actual, message)   \fBUNITY_TEST_ASSERT_GREATER_THAN_INT64\fP((threshold), (actual), __LINE__, (message))"

.PP
Definition at line 349 of file unity\&.h\&.
.SS "#define TEST_ASSERT_GREATER_THAN_INT8(threshold, actual)   \fBUNITY_TEST_ASSERT_GREATER_THAN_INT8\fP((threshold), (actual), __LINE__, NULL)"

.PP
Definition at line 154 of file unity\&.h\&.
.SS "#define TEST_ASSERT_GREATER_THAN_INT8_MESSAGE(threshold, actual, message)   \fBUNITY_TEST_ASSERT_GREATER_THAN_INT8\fP((threshold), (actual), __LINE__, (message))"

.PP
Definition at line 346 of file unity\&.h\&.
.SS "#define TEST_ASSERT_GREATER_THAN_INT_MESSAGE(threshold, actual, message)   \fBUNITY_TEST_ASSERT_GREATER_THAN_INT\fP((threshold), (actual), __LINE__, (message))"

.PP
Definition at line 345 of file unity\&.h\&.
.SS "#define TEST_ASSERT_GREATER_THAN_MESSAGE(threshold, actual, message)   \fBUNITY_TEST_ASSERT_GREATER_THAN_INT\fP((threshold), (actual), __LINE__, (message))"

.PP
Definition at line 344 of file unity\&.h\&.
.SS "#define TEST_ASSERT_GREATER_THAN_UINT(threshold, actual)   \fBUNITY_TEST_ASSERT_GREATER_THAN_UINT\fP((threshold), (actual), __LINE__, NULL)"

.PP
Definition at line 158 of file unity\&.h\&.
.SS "#define TEST_ASSERT_GREATER_THAN_UINT16(threshold, actual)   \fBUNITY_TEST_ASSERT_GREATER_THAN_UINT16\fP((threshold), (actual), __LINE__, NULL)"

.PP
Definition at line 160 of file unity\&.h\&.
.SS "#define TEST_ASSERT_GREATER_THAN_UINT16_MESSAGE(threshold, actual, message)   \fBUNITY_TEST_ASSERT_GREATER_THAN_UINT16\fP((threshold), (actual), __LINE__, (message))"

.PP
Definition at line 352 of file unity\&.h\&.
.SS "#define TEST_ASSERT_GREATER_THAN_UINT32(threshold, actual)   \fBUNITY_TEST_ASSERT_GREATER_THAN_UINT32\fP((threshold), (actual), __LINE__, NULL)"

.PP
Definition at line 161 of file unity\&.h\&.
.SS "#define TEST_ASSERT_GREATER_THAN_UINT32_MESSAGE(threshold, actual, message)   \fBUNITY_TEST_ASSERT_GREATER_THAN_UINT32\fP((threshold), (actual), __LINE__, (message))"

.PP
Definition at line 353 of file unity\&.h\&.
.SS "#define TEST_ASSERT_GREATER_THAN_UINT64(threshold, actual)   \fBUNITY_TEST_ASSERT_GREATER_THAN_UINT64\fP((threshold), (actual), __LINE__, NULL)"

.PP
Definition at line 162 of file unity\&.h\&.
.SS "#define TEST_ASSERT_GREATER_THAN_UINT64_MESSAGE(threshold, actual, message)   \fBUNITY_TEST_ASSERT_GREATER_THAN_UINT64\fP((threshold), (actual), __LINE__, (message))"

.PP
Definition at line 354 of file unity\&.h\&.
.SS "#define TEST_ASSERT_GREATER_THAN_UINT8(threshold, actual)   \fBUNITY_TEST_ASSERT_GREATER_THAN_UINT8\fP((threshold), (actual), __LINE__, NULL)"

.PP
Definition at line 159 of file unity\&.h\&.
.SS "#define TEST_ASSERT_GREATER_THAN_UINT8_MESSAGE(threshold, actual, message)   \fBUNITY_TEST_ASSERT_GREATER_THAN_UINT8\fP((threshold), (actual), __LINE__, (message))"

.PP
Definition at line 351 of file unity\&.h\&.
.SS "#define TEST_ASSERT_GREATER_THAN_UINT_MESSAGE(threshold, actual, message)   \fBUNITY_TEST_ASSERT_GREATER_THAN_UINT\fP((threshold), (actual), __LINE__, (message))"

.PP
Definition at line 350 of file unity\&.h\&.
.SS "#define TEST_ASSERT_HEX16_WITHIN(delta, expected, actual)   \fBUNITY_TEST_ASSERT_HEX16_WITHIN\fP((delta), (expected), (actual), __LINE__, NULL)"

.PP
Definition at line 229 of file unity\&.h\&.
.SS "#define TEST_ASSERT_HEX16_WITHIN_MESSAGE(delta, expected, actual, message)   \fBUNITY_TEST_ASSERT_HEX16_WITHIN\fP((delta), (expected), (actual), __LINE__, (message))"

.PP
Definition at line 421 of file unity\&.h\&.
.SS "#define TEST_ASSERT_HEX32_WITHIN(delta, expected, actual)   \fBUNITY_TEST_ASSERT_HEX32_WITHIN\fP((delta), (expected), (actual), __LINE__, NULL)"

.PP
Definition at line 230 of file unity\&.h\&.
.SS "#define TEST_ASSERT_HEX32_WITHIN_MESSAGE(delta, expected, actual, message)   \fBUNITY_TEST_ASSERT_HEX32_WITHIN\fP((delta), (expected), (actual), __LINE__, (message))"

.PP
Definition at line 422 of file unity\&.h\&.
.SS "#define TEST_ASSERT_HEX64_WITHIN(delta, expected, actual)   \fBUNITY_TEST_ASSERT_HEX64_WITHIN\fP((delta), (expected), (actual), __LINE__, NULL)"

.PP
Definition at line 231 of file unity\&.h\&.
.SS "#define TEST_ASSERT_HEX64_WITHIN_MESSAGE(delta, expected, actual, message)   \fBUNITY_TEST_ASSERT_HEX64_WITHIN\fP((delta), (expected), (actual), __LINE__, (message))"

.PP
Definition at line 423 of file unity\&.h\&.
.SS "#define TEST_ASSERT_HEX8_WITHIN(delta, expected, actual)   \fBUNITY_TEST_ASSERT_HEX8_WITHIN\fP((delta), (expected), (actual), __LINE__, NULL)"

.PP
Definition at line 228 of file unity\&.h\&.
.SS "#define TEST_ASSERT_HEX8_WITHIN_MESSAGE(delta, expected, actual, message)   \fBUNITY_TEST_ASSERT_HEX8_WITHIN\fP((delta), (expected), (actual), __LINE__, (message))"

.PP
Definition at line 420 of file unity\&.h\&.
.SS "#define TEST_ASSERT_HEX_WITHIN(delta, expected, actual)   \fBUNITY_TEST_ASSERT_HEX32_WITHIN\fP((delta), (expected), (actual), __LINE__, NULL)"

.PP
Definition at line 227 of file unity\&.h\&.
.SS "#define TEST_ASSERT_HEX_WITHIN_MESSAGE(delta, expected, actual, message)   \fBUNITY_TEST_ASSERT_HEX32_WITHIN\fP((delta), (expected), (actual), __LINE__, (message))"

.PP
Definition at line 419 of file unity\&.h\&.
.SS "#define TEST_ASSERT_INT16_WITHIN(delta, expected, actual)   \fBUNITY_TEST_ASSERT_INT16_WITHIN\fP((delta), (expected), (actual), __LINE__, NULL)"

.PP
Definition at line 219 of file unity\&.h\&.
.SS "#define TEST_ASSERT_INT16_WITHIN_MESSAGE(delta, expected, actual, message)   \fBUNITY_TEST_ASSERT_INT16_WITHIN\fP((delta), (expected), (actual), __LINE__, (message))"

.PP
Definition at line 411 of file unity\&.h\&.
.SS "#define TEST_ASSERT_INT32_WITHIN(delta, expected, actual)   \fBUNITY_TEST_ASSERT_INT32_WITHIN\fP((delta), (expected), (actual), __LINE__, NULL)"

.PP
Definition at line 220 of file unity\&.h\&.
.SS "#define TEST_ASSERT_INT32_WITHIN_MESSAGE(delta, expected, actual, message)   \fBUNITY_TEST_ASSERT_INT32_WITHIN\fP((delta), (expected), (actual), __LINE__, (message))"

.PP
Definition at line 412 of file unity\&.h\&.
.SS "#define TEST_ASSERT_INT64_WITHIN(delta, expected, actual)   \fBUNITY_TEST_ASSERT_INT64_WITHIN\fP((delta), (expected), (actual), __LINE__, NULL)"

.PP
Definition at line 221 of file unity\&.h\&.
.SS "#define TEST_ASSERT_INT64_WITHIN_MESSAGE(delta, expected, actual, message)   \fBUNITY_TEST_ASSERT_INT64_WITHIN\fP((delta), (expected), (actual), __LINE__, (message))"

.PP
Definition at line 413 of file unity\&.h\&.
.SS "#define TEST_ASSERT_INT8_WITHIN(delta, expected, actual)   \fBUNITY_TEST_ASSERT_INT8_WITHIN\fP((delta), (expected), (actual), __LINE__, NULL)"

.PP
Definition at line 218 of file unity\&.h\&.
.SS "#define TEST_ASSERT_INT8_WITHIN_MESSAGE(delta, expected, actual, message)   \fBUNITY_TEST_ASSERT_INT8_WITHIN\fP((delta), (expected), (actual), __LINE__, (message))"

.PP
Definition at line 410 of file unity\&.h\&.
.SS "#define TEST_ASSERT_INT_WITHIN(delta, expected, actual)   \fBUNITY_TEST_ASSERT_INT_WITHIN\fP((delta), (expected), (actual), __LINE__, NULL)"

.PP
Definition at line 217 of file unity\&.h\&.
.SS "#define TEST_ASSERT_INT_WITHIN_MESSAGE(delta, expected, actual, message)   \fBUNITY_TEST_ASSERT_INT_WITHIN\fP((delta), (expected), (actual), __LINE__, (message))"

.PP
Definition at line 409 of file unity\&.h\&.
.SS "#define TEST_ASSERT_LESS_OR_EQUAL(threshold, actual)   \fBUNITY_TEST_ASSERT_SMALLER_OR_EQUAL_INT\fP((threshold), (actual), __LINE__, NULL)"

.PP
Definition at line 200 of file unity\&.h\&.
.SS "#define TEST_ASSERT_LESS_OR_EQUAL_HEX16(threshold, actual)   \fBUNITY_TEST_ASSERT_SMALLER_OR_EQUAL_HEX16\fP((threshold), (actual), __LINE__, NULL)"

.PP
Definition at line 212 of file unity\&.h\&.
.SS "#define TEST_ASSERT_LESS_OR_EQUAL_HEX16_MESSAGE(threshold, actual, message)   \fBUNITY_TEST_ASSERT_SMALLER_OR_EQUAL_HEX16\fP((threshold), (actual), __LINE__, (message))"

.PP
Definition at line 404 of file unity\&.h\&.
.SS "#define TEST_ASSERT_LESS_OR_EQUAL_HEX32(threshold, actual)   \fBUNITY_TEST_ASSERT_SMALLER_OR_EQUAL_HEX32\fP((threshold), (actual), __LINE__, NULL)"

.PP
Definition at line 213 of file unity\&.h\&.
.SS "#define TEST_ASSERT_LESS_OR_EQUAL_HEX32_MESSAGE(threshold, actual, message)   \fBUNITY_TEST_ASSERT_SMALLER_OR_EQUAL_HEX32\fP((threshold), (actual), __LINE__, (message))"

.PP
Definition at line 405 of file unity\&.h\&.
.SS "#define TEST_ASSERT_LESS_OR_EQUAL_HEX64(threshold, actual)   \fBUNITY_TEST_ASSERT_SMALLER_OR_EQUAL_HEX64\fP((threshold), (actual), __LINE__, NULL)"

.PP
Definition at line 214 of file unity\&.h\&.
.SS "#define TEST_ASSERT_LESS_OR_EQUAL_HEX64_MESSAGE(threshold, actual, message)   \fBUNITY_TEST_ASSERT_SMALLER_OR_EQUAL_HEX64\fP((threshold), (actual), __LINE__, (message))"

.PP
Definition at line 406 of file unity\&.h\&.
.SS "#define TEST_ASSERT_LESS_OR_EQUAL_HEX8(threshold, actual)   \fBUNITY_TEST_ASSERT_SMALLER_OR_EQUAL_HEX8\fP((threshold), (actual), __LINE__, NULL)"

.PP
Definition at line 211 of file unity\&.h\&.
.SS "#define TEST_ASSERT_LESS_OR_EQUAL_HEX8_MESSAGE(threshold, actual, message)   \fBUNITY_TEST_ASSERT_SMALLER_OR_EQUAL_HEX8\fP((threshold), (actual), __LINE__, (message))"

.PP
Definition at line 403 of file unity\&.h\&.
.SS "#define TEST_ASSERT_LESS_OR_EQUAL_INT(threshold, actual)   \fBUNITY_TEST_ASSERT_SMALLER_OR_EQUAL_INT\fP((threshold), (actual), __LINE__, NULL)"

.PP
Definition at line 201 of file unity\&.h\&.
.SS "#define TEST_ASSERT_LESS_OR_EQUAL_INT16(threshold, actual)   \fBUNITY_TEST_ASSERT_SMALLER_OR_EQUAL_INT16\fP((threshold), (actual), __LINE__, NULL)"

.PP
Definition at line 203 of file unity\&.h\&.
.SS "#define TEST_ASSERT_LESS_OR_EQUAL_INT16_MESSAGE(threshold, actual, message)   \fBUNITY_TEST_ASSERT_SMALLER_OR_EQUAL_INT16\fP((threshold), (actual), __LINE__, (message))"

.PP
Definition at line 395 of file unity\&.h\&.
.SS "#define TEST_ASSERT_LESS_OR_EQUAL_INT32(threshold, actual)   \fBUNITY_TEST_ASSERT_SMALLER_OR_EQUAL_INT32\fP((threshold), (actual), __LINE__, NULL)"

.PP
Definition at line 204 of file unity\&.h\&.
.SS "#define TEST_ASSERT_LESS_OR_EQUAL_INT32_MESSAGE(threshold, actual, message)   \fBUNITY_TEST_ASSERT_SMALLER_OR_EQUAL_INT32\fP((threshold), (actual), __LINE__, (message))"

.PP
Definition at line 396 of file unity\&.h\&.
.SS "#define TEST_ASSERT_LESS_OR_EQUAL_INT64(threshold, actual)   \fBUNITY_TEST_ASSERT_SMALLER_OR_EQUAL_INT64\fP((threshold), (actual), __LINE__, NULL)"

.PP
Definition at line 205 of file unity\&.h\&.
.SS "#define TEST_ASSERT_LESS_OR_EQUAL_INT64_MESSAGE(threshold, actual, message)   \fBUNITY_TEST_ASSERT_SMALLER_OR_EQUAL_INT64\fP((threshold), (actual), __LINE__, (message))"

.PP
Definition at line 397 of file unity\&.h\&.
.SS "#define TEST_ASSERT_LESS_OR_EQUAL_INT8(threshold, actual)   \fBUNITY_TEST_ASSERT_SMALLER_OR_EQUAL_INT8\fP((threshold), (actual), __LINE__, NULL)"

.PP
Definition at line 202 of file unity\&.h\&.
.SS "#define TEST_ASSERT_LESS_OR_EQUAL_INT8_MESSAGE(threshold, actual, message)   \fBUNITY_TEST_ASSERT_SMALLER_OR_EQUAL_INT8\fP((threshold), (actual), __LINE__, (message))"

.PP
Definition at line 394 of file unity\&.h\&.
.SS "#define TEST_ASSERT_LESS_OR_EQUAL_INT_MESSAGE(threshold, actual, message)   \fBUNITY_TEST_ASSERT_SMALLER_OR_EQUAL_INT\fP((threshold), (actual), __LINE__, (message))"

.PP
Definition at line 393 of file unity\&.h\&.
.SS "#define TEST_ASSERT_LESS_OR_EQUAL_MESSAGE(threshold, actual, message)   \fBUNITY_TEST_ASSERT_SMALLER_OR_EQUAL_INT\fP((threshold), (actual), __LINE__, (message))"

.PP
Definition at line 392 of file unity\&.h\&.
.SS "#define TEST_ASSERT_LESS_OR_EQUAL_UINT(threshold, actual)   \fBUNITY_TEST_ASSERT_SMALLER_OR_EQUAL_UINT\fP((threshold), (actual), __LINE__, NULL)"

.PP
Definition at line 206 of file unity\&.h\&.
.SS "#define TEST_ASSERT_LESS_OR_EQUAL_UINT16(threshold, actual)   \fBUNITY_TEST_ASSERT_SMALLER_OR_EQUAL_UINT16\fP((threshold), (actual), __LINE__, NULL)"

.PP
Definition at line 208 of file unity\&.h\&.
.SS "#define TEST_ASSERT_LESS_OR_EQUAL_UINT16_MESSAGE(threshold, actual, message)   \fBUNITY_TEST_ASSERT_SMALLER_OR_EQUAL_UINT16\fP((threshold), (actual), __LINE__, (message))"

.PP
Definition at line 400 of file unity\&.h\&.
.SS "#define TEST_ASSERT_LESS_OR_EQUAL_UINT32(threshold, actual)   \fBUNITY_TEST_ASSERT_SMALLER_OR_EQUAL_UINT32\fP((threshold), (actual), __LINE__, NULL)"

.PP
Definition at line 209 of file unity\&.h\&.
.SS "#define TEST_ASSERT_LESS_OR_EQUAL_UINT32_MESSAGE(threshold, actual, message)   \fBUNITY_TEST_ASSERT_SMALLER_OR_EQUAL_UINT32\fP((threshold), (actual), __LINE__, (message))"

.PP
Definition at line 401 of file unity\&.h\&.
.SS "#define TEST_ASSERT_LESS_OR_EQUAL_UINT64(threshold, actual)   \fBUNITY_TEST_ASSERT_SMALLER_OR_EQUAL_UINT64\fP((threshold), (actual), __LINE__, NULL)"

.PP
Definition at line 210 of file unity\&.h\&.
.SS "#define TEST_ASSERT_LESS_OR_EQUAL_UINT64_MESSAGE(threshold, actual, message)   \fBUNITY_TEST_ASSERT_SMALLER_OR_EQUAL_UINT64\fP((threshold), (actual), __LINE__, (message))"

.PP
Definition at line 402 of file unity\&.h\&.
.SS "#define TEST_ASSERT_LESS_OR_EQUAL_UINT8(threshold, actual)   \fBUNITY_TEST_ASSERT_SMALLER_OR_EQUAL_UINT8\fP((threshold), (actual), __LINE__, NULL)"

.PP
Definition at line 207 of file unity\&.h\&.
.SS "#define TEST_ASSERT_LESS_OR_EQUAL_UINT8_MESSAGE(threshold, actual, message)   \fBUNITY_TEST_ASSERT_SMALLER_OR_EQUAL_UINT8\fP((threshold), (actual), __LINE__, (message))"

.PP
Definition at line 399 of file unity\&.h\&.
.SS "#define TEST_ASSERT_LESS_OR_EQUAL_UINT_MESSAGE(threshold, actual, message)   \fBUNITY_TEST_ASSERT_SMALLER_OR_EQUAL_UINT\fP((threshold), (actual), __LINE__, (message))"

.PP
Definition at line 398 of file unity\&.h\&.
.SS "#define TEST_ASSERT_LESS_THAN(threshold, actual)   \fBUNITY_TEST_ASSERT_SMALLER_THAN_INT\fP((threshold), (actual), __LINE__, NULL)"

.PP
Definition at line 168 of file unity\&.h\&.
.SS "#define TEST_ASSERT_LESS_THAN_HEX16(threshold, actual)   \fBUNITY_TEST_ASSERT_SMALLER_THAN_HEX16\fP((threshold), (actual), __LINE__, NULL)"

.PP
Definition at line 180 of file unity\&.h\&.
.SS "#define TEST_ASSERT_LESS_THAN_HEX16_MESSAGE(threshold, actual, message)   \fBUNITY_TEST_ASSERT_SMALLER_THAN_HEX16\fP((threshold), (actual), __LINE__, (message))"

.PP
Definition at line 372 of file unity\&.h\&.
.SS "#define TEST_ASSERT_LESS_THAN_HEX32(threshold, actual)   \fBUNITY_TEST_ASSERT_SMALLER_THAN_HEX32\fP((threshold), (actual), __LINE__, NULL)"

.PP
Definition at line 181 of file unity\&.h\&.
.SS "#define TEST_ASSERT_LESS_THAN_HEX32_MESSAGE(threshold, actual, message)   \fBUNITY_TEST_ASSERT_SMALLER_THAN_HEX32\fP((threshold), (actual), __LINE__, (message))"

.PP
Definition at line 373 of file unity\&.h\&.
.SS "#define TEST_ASSERT_LESS_THAN_HEX64(threshold, actual)   \fBUNITY_TEST_ASSERT_SMALLER_THAN_HEX64\fP((threshold), (actual), __LINE__, NULL)"

.PP
Definition at line 182 of file unity\&.h\&.
.SS "#define TEST_ASSERT_LESS_THAN_HEX64_MESSAGE(threshold, actual, message)   \fBUNITY_TEST_ASSERT_SMALLER_THAN_HEX64\fP((threshold), (actual), __LINE__, (message))"

.PP
Definition at line 374 of file unity\&.h\&.
.SS "#define TEST_ASSERT_LESS_THAN_HEX8(threshold, actual)   \fBUNITY_TEST_ASSERT_SMALLER_THAN_HEX8\fP((threshold), (actual), __LINE__, NULL)"

.PP
Definition at line 179 of file unity\&.h\&.
.SS "#define TEST_ASSERT_LESS_THAN_HEX8_MESSAGE(threshold, actual, message)   \fBUNITY_TEST_ASSERT_SMALLER_THAN_HEX8\fP((threshold), (actual), __LINE__, (message))"

.PP
Definition at line 371 of file unity\&.h\&.
.SS "#define TEST_ASSERT_LESS_THAN_INT(threshold, actual)   \fBUNITY_TEST_ASSERT_SMALLER_THAN_INT\fP((threshold), (actual), __LINE__, NULL)"

.PP
Definition at line 169 of file unity\&.h\&.
.SS "#define TEST_ASSERT_LESS_THAN_INT16(threshold, actual)   \fBUNITY_TEST_ASSERT_SMALLER_THAN_INT16\fP((threshold), (actual), __LINE__, NULL)"

.PP
Definition at line 171 of file unity\&.h\&.
.SS "#define TEST_ASSERT_LESS_THAN_INT16_MESSAGE(threshold, actual, message)   \fBUNITY_TEST_ASSERT_SMALLER_THAN_INT16\fP((threshold), (actual), __LINE__, (message))"

.PP
Definition at line 363 of file unity\&.h\&.
.SS "#define TEST_ASSERT_LESS_THAN_INT32(threshold, actual)   \fBUNITY_TEST_ASSERT_SMALLER_THAN_INT32\fP((threshold), (actual), __LINE__, NULL)"

.PP
Definition at line 172 of file unity\&.h\&.
.SS "#define TEST_ASSERT_LESS_THAN_INT32_MESSAGE(threshold, actual, message)   \fBUNITY_TEST_ASSERT_SMALLER_THAN_INT32\fP((threshold), (actual), __LINE__, (message))"

.PP
Definition at line 364 of file unity\&.h\&.
.SS "#define TEST_ASSERT_LESS_THAN_INT64(threshold, actual)   \fBUNITY_TEST_ASSERT_SMALLER_THAN_INT64\fP((threshold), (actual), __LINE__, NULL)"

.PP
Definition at line 173 of file unity\&.h\&.
.SS "#define TEST_ASSERT_LESS_THAN_INT64_MESSAGE(threshold, actual, message)   \fBUNITY_TEST_ASSERT_SMALLER_THAN_INT64\fP((threshold), (actual), __LINE__, (message))"

.PP
Definition at line 365 of file unity\&.h\&.
.SS "#define TEST_ASSERT_LESS_THAN_INT8(threshold, actual)   \fBUNITY_TEST_ASSERT_SMALLER_THAN_INT8\fP((threshold), (actual), __LINE__, NULL)"

.PP
Definition at line 170 of file unity\&.h\&.
.SS "#define TEST_ASSERT_LESS_THAN_INT8_MESSAGE(threshold, actual, message)   \fBUNITY_TEST_ASSERT_SMALLER_THAN_INT8\fP((threshold), (actual), __LINE__, (message))"

.PP
Definition at line 362 of file unity\&.h\&.
.SS "#define TEST_ASSERT_LESS_THAN_INT_MESSAGE(threshold, actual, message)   \fBUNITY_TEST_ASSERT_SMALLER_THAN_INT\fP((threshold), (actual), __LINE__, (message))"

.PP
Definition at line 361 of file unity\&.h\&.
.SS "#define TEST_ASSERT_LESS_THAN_MESSAGE(threshold, actual, message)   \fBUNITY_TEST_ASSERT_SMALLER_THAN_INT\fP((threshold), (actual), __LINE__, (message))"

.PP
Definition at line 360 of file unity\&.h\&.
.SS "#define TEST_ASSERT_LESS_THAN_UINT(threshold, actual)   \fBUNITY_TEST_ASSERT_SMALLER_THAN_UINT\fP((threshold), (actual), __LINE__, NULL)"

.PP
Definition at line 174 of file unity\&.h\&.
.SS "#define TEST_ASSERT_LESS_THAN_UINT16(threshold, actual)   \fBUNITY_TEST_ASSERT_SMALLER_THAN_UINT16\fP((threshold), (actual), __LINE__, NULL)"

.PP
Definition at line 176 of file unity\&.h\&.
.SS "#define TEST_ASSERT_LESS_THAN_UINT16_MESSAGE(threshold, actual, message)   \fBUNITY_TEST_ASSERT_SMALLER_THAN_UINT16\fP((threshold), (actual), __LINE__, (message))"

.PP
Definition at line 368 of file unity\&.h\&.
.SS "#define TEST_ASSERT_LESS_THAN_UINT32(threshold, actual)   \fBUNITY_TEST_ASSERT_SMALLER_THAN_UINT32\fP((threshold), (actual), __LINE__, NULL)"

.PP
Definition at line 177 of file unity\&.h\&.
.SS "#define TEST_ASSERT_LESS_THAN_UINT32_MESSAGE(threshold, actual, message)   \fBUNITY_TEST_ASSERT_SMALLER_THAN_UINT32\fP((threshold), (actual), __LINE__, (message))"

.PP
Definition at line 369 of file unity\&.h\&.
.SS "#define TEST_ASSERT_LESS_THAN_UINT64(threshold, actual)   \fBUNITY_TEST_ASSERT_SMALLER_THAN_UINT64\fP((threshold), (actual), __LINE__, NULL)"

.PP
Definition at line 178 of file unity\&.h\&.
.SS "#define TEST_ASSERT_LESS_THAN_UINT64_MESSAGE(threshold, actual, message)   \fBUNITY_TEST_ASSERT_SMALLER_THAN_UINT64\fP((threshold), (actual), __LINE__, (message))"

.PP
Definition at line 370 of file unity\&.h\&.
.SS "#define TEST_ASSERT_LESS_THAN_UINT8(threshold, actual)   \fBUNITY_TEST_ASSERT_SMALLER_THAN_UINT8\fP((threshold), (actual), __LINE__, NULL)"

.PP
Definition at line 175 of file unity\&.h\&.
.SS "#define TEST_ASSERT_LESS_THAN_UINT8_MESSAGE(threshold, actual, message)   \fBUNITY_TEST_ASSERT_SMALLER_THAN_UINT8\fP((threshold), (actual), __LINE__, (message))"

.PP
Definition at line 367 of file unity\&.h\&.
.SS "#define TEST_ASSERT_LESS_THAN_UINT_MESSAGE(threshold, actual, message)   \fBUNITY_TEST_ASSERT_SMALLER_THAN_UINT\fP((threshold), (actual), __LINE__, (message))"

.PP
Definition at line 366 of file unity\&.h\&.
.SS "#define TEST_ASSERT_MESSAGE(condition, message)   \fBUNITY_TEST_ASSERT\fP(       (condition), __LINE__, (message))"

.PP
Definition at line 312 of file unity\&.h\&.
.SS "#define TEST_ASSERT_NOT_EQUAL(expected, actual)   \fBUNITY_TEST_ASSERT\fP(((expected) !=  (actual)), __LINE__, ' Expected Not\-Equal')"

.PP
Definition at line 134 of file unity\&.h\&.
.SS "#define TEST_ASSERT_NOT_EQUAL_MESSAGE(expected, actual, message)   \fBUNITY_TEST_ASSERT\fP(((expected) !=  (actual)), __LINE__, (message))"

.PP
Definition at line 326 of file unity\&.h\&.
.SS "#define TEST_ASSERT_NOT_NULL(pointer)   \fBUNITY_TEST_ASSERT_NOT_NULL\fP((pointer), __LINE__, ' Expected Non\-NULL')"

.PP
Definition at line 125 of file unity\&.h\&.
.SS "#define TEST_ASSERT_NOT_NULL_MESSAGE(pointer, message)   \fBUNITY_TEST_ASSERT_NOT_NULL\fP((pointer), __LINE__, (message))"

.PP
Definition at line 317 of file unity\&.h\&.
.SS "#define TEST_ASSERT_NULL(pointer)   \fBUNITY_TEST_ASSERT_NULL\fP(    (pointer), __LINE__, ' Expected NULL')"

.PP
Definition at line 124 of file unity\&.h\&.
.SS "#define TEST_ASSERT_NULL_MESSAGE(pointer, message)   \fBUNITY_TEST_ASSERT_NULL\fP(    (pointer), __LINE__, (message))"

.PP
Definition at line 316 of file unity\&.h\&.
.SS "#define TEST_ASSERT_TRUE(condition)   \fBUNITY_TEST_ASSERT\fP(       (condition), __LINE__, ' Expected TRUE Was FALSE')"

.PP
Definition at line 121 of file unity\&.h\&.
.SS "#define TEST_ASSERT_TRUE_MESSAGE(condition, message)   \fBUNITY_TEST_ASSERT\fP(       (condition), __LINE__, (message))"

.PP
Definition at line 313 of file unity\&.h\&.
.SS "#define TEST_ASSERT_UINT16_WITHIN(delta, expected, actual)   \fBUNITY_TEST_ASSERT_UINT16_WITHIN\fP((delta), (expected), (actual), __LINE__, NULL)"

.PP
Definition at line 224 of file unity\&.h\&.
.SS "#define TEST_ASSERT_UINT16_WITHIN_MESSAGE(delta, expected, actual, message)   \fBUNITY_TEST_ASSERT_UINT16_WITHIN\fP((delta), (expected), (actual), __LINE__, (message))"

.PP
Definition at line 416 of file unity\&.h\&.
.SS "#define TEST_ASSERT_UINT32_WITHIN(delta, expected, actual)   \fBUNITY_TEST_ASSERT_UINT32_WITHIN\fP((delta), (expected), (actual), __LINE__, NULL)"

.PP
Definition at line 225 of file unity\&.h\&.
.SS "#define TEST_ASSERT_UINT32_WITHIN_MESSAGE(delta, expected, actual, message)   \fBUNITY_TEST_ASSERT_UINT32_WITHIN\fP((delta), (expected), (actual), __LINE__, (message))"

.PP
Definition at line 417 of file unity\&.h\&.
.SS "#define TEST_ASSERT_UINT64_WITHIN(delta, expected, actual)   \fBUNITY_TEST_ASSERT_UINT64_WITHIN\fP((delta), (expected), (actual), __LINE__, NULL)"

.PP
Definition at line 226 of file unity\&.h\&.
.SS "#define TEST_ASSERT_UINT64_WITHIN_MESSAGE(delta, expected, actual, message)   \fBUNITY_TEST_ASSERT_UINT64_WITHIN\fP((delta), (expected), (actual), __LINE__, (message))"

.PP
Definition at line 418 of file unity\&.h\&.
.SS "#define TEST_ASSERT_UINT8_WITHIN(delta, expected, actual)   \fBUNITY_TEST_ASSERT_UINT8_WITHIN\fP((delta), (expected), (actual), __LINE__, NULL)"

.PP
Definition at line 223 of file unity\&.h\&.
.SS "#define TEST_ASSERT_UINT8_WITHIN_MESSAGE(delta, expected, actual, message)   \fBUNITY_TEST_ASSERT_UINT8_WITHIN\fP((delta), (expected), (actual), __LINE__, (message))"

.PP
Definition at line 415 of file unity\&.h\&.
.SS "#define TEST_ASSERT_UINT_WITHIN(delta, expected, actual)   \fBUNITY_TEST_ASSERT_UINT_WITHIN\fP((delta), (expected), (actual), __LINE__, NULL)"

.PP
Definition at line 222 of file unity\&.h\&.
.SS "#define TEST_ASSERT_UINT_WITHIN_MESSAGE(delta, expected, actual, message)   \fBUNITY_TEST_ASSERT_UINT_WITHIN\fP((delta), (expected), (actual), __LINE__, (message))"

.PP
Definition at line 414 of file unity\&.h\&.
.SS "#define TEST_ASSERT_UNLESS(condition)   \fBUNITY_TEST_ASSERT\fP(      !(condition), __LINE__, ' Expression Evaluated To TRUE')"

.PP
Definition at line 122 of file unity\&.h\&.
.SS "#define TEST_ASSERT_UNLESS_MESSAGE(condition, message)   \fBUNITY_TEST_ASSERT\fP(      !(condition), __LINE__, (message))"

.PP
Definition at line 314 of file unity\&.h\&.
.SS "#define TEST_FAIL()   \fBUNITY_TEST_FAIL\fP(__LINE__, NULL)"

.PP
Definition at line 102 of file unity\&.h\&.
.SS "#define TEST_FAIL_MESSAGE(message)   \fBUNITY_TEST_FAIL\fP(__LINE__, (message))"

.PP
Definition at line 101 of file unity\&.h\&.
.SS "#define TEST_FILE(a)"

.PP
Definition at line 113 of file unity\&.h\&.
.SS "#define TEST_IGNORE()   \fBUNITY_TEST_IGNORE\fP(__LINE__, NULL)"

.PP
Definition at line 104 of file unity\&.h\&.
.SS "#define TEST_IGNORE_MESSAGE(message)   \fBUNITY_TEST_IGNORE\fP(__LINE__, (message))"

.PP
Definition at line 103 of file unity\&.h\&.
.SS "#define TEST_ONLY()"

.PP
Definition at line 105 of file unity\&.h\&.
.SS "#define TEST_PASS()   \fBTEST_ABORT\fP()"

.PP
Definition at line 109 of file unity\&.h\&.
.SS "#define UNITY"

.PP
Definition at line 9 of file unity\&.h\&.
.SH "Function Documentation"
.PP 
.SS "void setUp (void)"

.PP
Definition at line 31 of file test_mpbTimeBase\&.c\&.
.SS "void suiteSetUp (void)"

.SS "int suiteTearDown (int num_failures)"

.SS "void tearDown (void)"

.PP
Definition at line 36 of file test_mpbTimeBase\&.c\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for mpbTime from the source code\&.
