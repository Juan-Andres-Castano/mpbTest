.TH "md__unit_test_framework_vendor_ceedling_plugins_fake_function_framework__r_e_a_d_m_e" 3 "Thu Nov 18 2021" "mpbTime" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md__unit_test_framework_vendor_ceedling_plugins_fake_function_framework__r_e_a_d_m_e \- A Fake Function Framework Plug-in for Ceedling 
This is a plug-in for \fCCeedling\fP to use the \fCFake Function Framework\fP for mocking instead of CMock\&.
.PP
Using fff provides less strict mocking than CMock, and allows for more loosely-coupled tests\&. And, when tests fail -- since you get the actual line number of the failure -- it's a lot easier to figure out what went wrong\&.
.SH "Installing the plug-in"
.PP
To use the plugin you need to 1) get the contents of this repo and 2) configure your project to use it\&.
.SS "Get the source"
The easiest way to get the source is to just clone this repo into the Ceedling plugin folder for your existing Ceedling project\&. (Don't have a Ceedling project already? \fCHere are instructions to create one\&.\fP) From within \fC<your-project>/vendor/ceedling/plugins\fP, run:
.PP
\fCgit clone https://github.com/ElectronVector/fake_function_framework.git\fP
.PP
This will create a new folder named \fCfake_function_framework\fP in the plugins folder\&.
.SS "Enable the plug-in\&."
The plug-in is enabled from within your project\&.yml file\&.
.PP
In the \fC:plugins\fP configuration, add \fCfake_function_framework\fP to the list of enabled plugins:
.PP
.PP
.nf
:plugins:
  :load_paths:
    - vendor/ceedling/plugins
  :enabled:
    - stdout_pretty_tests_report
    - module_generator
    - fake_function_framework
.fi
.PP
 \fINote that you could put the plugin source in some other loaction\&. In that case you'd need to add a new path the \fC:load_paths\fP\&.\fP
.SH "How to use it"
.PP
You use fff with Ceedling the same way you used to use CMock\&. Modules can still be generated with the default module generator: \fCrake module:create[my_module]\fP\&. If you want to 'mock' \fCsome_module\&.h\fP in your tests, just \fC#include 'mock_some_module\&.h'\fP\&. This creates a fake function for each of the functions defined in \fCsome_module\&.h\fP\&.
.PP
The name of each fake is the original function name with an appended \fC_fake\fP\&. For example, if we're generating fakes for a stack module with \fCpush\fP and \fCpop\fP functions, we would have the fakes \fCpush_fake\fP and \fCpop_fake\fP\&. These fakes are linked into our test executable so that any time our unit under test calls \fCpush\fP or \fCpop\fP our fakes are called instead\&.
.PP
Each of these fakes is actually a structure containing information about how the function was called, and what it might return\&. We can use Unity to inspect these fakes in our tests, and verify the interactions of our units\&. There is also a global structure named \fCfff\fP which we can use to check the sequence of calls\&.
.PP
The fakes can also be configured to return particular values, so you can exercise the unit under test however you want\&.
.PP
The examples below explain how to use fff to test a variety of module interactions\&. Each example uses fakes for a 'display' module, created from a \fBdisplay\&.h\fP file with \fC#include 'mock_display\&.h'\fP\&. The \fC\fBdisplay\&.h\fP\fP file must exist and must contain the prototypes for the functions to be faked\&.
.SS "Test that a function was called once"
.PP
.nf
void
test_whenTheDeviceIsReset_thenTheStatusLedIsTurnedOff()
{
    // When
    event_deviceReset();

    // Then
    TEST_ASSERT_EQUAL(1, display_turnOffStatusLed_fake\&.call_count);
}
.fi
.PP
.SS "Test that a function was NOT called"
.PP
.nf
void
test_whenThePowerReadingIsLessThan5_thenTheStatusLedIsNotTurnedOn(void)
{
    // When
    event_powerReadingUpdate(4);

    // Then
    TEST_ASSERT_EQUAL(0, display_turnOnStatusLed_fake\&.call_count);
}
.fi
.PP
.SH "Test that a single function was called with the correct argument"
.PP
.PP
.nf
void
test_whenTheVolumeKnobIsMaxed_thenVolumeDisplayIsSetTo11(void)
{
    // When
    event_volumeKnobMaxed();

    // Then
    TEST_ASSERT_EQUAL(1, display_setVolume_fake\&.call_count);
    TEST_ASSERT_EQUAL(11, display_setVolume_fake\&.arg0_val);
}
.fi
.PP
.SH "Test that calls are made in a particular sequence"
.PP
.PP
.nf
void
test_whenTheModeSelectButtonIsPressed_thenTheDisplayModeIsCycled(void)
{
    // When
    event_modeSelectButtonPressed();
    event_modeSelectButtonPressed();
    event_modeSelectButtonPressed();

    // Then
    TEST_ASSERT_EQUAL_PTR((void*)display_setModeToMinimum, fff\&.call_history[0]);
    TEST_ASSERT_EQUAL_PTR((void*)display_setModeToMaximum, fff\&.call_history[1]);
    TEST_ASSERT_EQUAL_PTR((void*)display_setModeToAverage, fff\&.call_history[2]);
}
.fi
.PP
.SH "Fake a return value from a function"
.PP
.PP
.nf
void
test_givenTheDisplayHasAnError_whenTheDeviceIsPoweredOn_thenTheDisplayIsPoweredDown(void)
{
    // Given
    display_isError_fake\&.return_val = true;

    // When
    event_devicePoweredOn();

    // Then
    TEST_ASSERT_EQUAL(1, display_powerDown_fake\&.call_count);
}
.fi
.PP
.SH "Fake a function with a value returned by reference"
.PP
.PP
.nf
void
test_givenTheUserHasTypedSleep_whenItIsTimeToCheckTheKeyboard_theDisplayIsPoweredDown(void)
{
    // Given
    char mockedEntry[] = "sleep";
    void return_mock_value(char * entry, int length)
    {
        if (length > strlen(mockedEntry))
        {
            strncpy(entry, mockedEntry, length);
        }
    }
    display_getKeyboardEntry_fake\&.custom_fake = return_mock_value;

    // When
    event_keyboardCheckTimerExpired();

    // Then
    TEST_ASSERT_EQUAL(1, display_powerDown_fake\&.call_count);
}
.fi
.PP
.SH "Fake a function with a function pointer parameter"
.PP
.PP
.nf
void
test_givenNewDataIsAvailable_whenTheDisplayHasUpdated_thenTheEventIsComplete(void)
{
    // A mock function for capturing the callback handler function pointer\&.
    void(*registeredCallback)(void) = 0;
    void mock_display_updateData(int data, void(*callback)(void))
    {
        //Save the callback function\&.
        registeredCallback = callback;
    }
    display_updateData_fake\&.custom_fake = mock_display_updateData;

    // Given
    event_newDataAvailable(10);

    // When
    if (registeredCallback != 0)
    {
        registeredCallback();
    }

    // Then
    TEST_ASSERT_EQUAL(true, eventProcessor_isLastEventComplete());
}
.fi
.PP
.SH "Helper macros"
.PP
For convenience, there are also some helper macros that create new Unity-style asserts:
.PP
.IP "\(bu" 2
\fC\fBTEST_ASSERT_CALLED(function)\fP\fP: Asserts that a function was called once\&.
.IP "\(bu" 2
\fC\fBTEST_ASSERT_NOT_CALLED(function)\fP\fP: Asserts that a function was never called\&.
.IP "\(bu" 2
\fC\fBTEST_ASSERT_CALLED_TIMES(times, function)\fP\fP: Asserts that a function was called a particular number of times\&.
.IP "\(bu" 2
\fC\fBTEST_ASSERT_CALLED_IN_ORDER(order, function)\fP\fP: Asserts that a function was called in a particular order\&.
.PP
.PP
Here's how you might use one of these instead of simply checking the call_count value:
.PP
.PP
.nf
void
test_whenTheDeviceIsReset_thenTheStatusLedIsTurnedOff()
{
    // When
    event_deviceReset();

    // Then
    // This how to directly use fff\&.\&.\&.
    TEST_ASSERT_EQUAL(1, display_turnOffStatusLed_fake\&.call_count);
    // \&.\&.\&.and this is how to use the helper macro\&.
    TEST_ASSERT_CALLED(display_turnOffStatusLed);
}
.fi
.PP
.SH "Test setup"
.PP
All of the fake functions, and any fff global state are all reset automatically between each test\&.
.SH "CMock configuration"
.PP
Use still use some of the CMock configuration options for setting things like the mock prefix, and for including additional header files in the mock files\&.
.PP
.PP
.nf
:cmock:
    :mock_prefix: mock_
        :includes:
            -
        :includes_h_pre_orig_header:
            -
        :includes_h_post_orig_header:
            -
        :includes_c_pre_header:
            -
        :includes_c_post_header:
.fi
.PP
.SH "Running the tests"
.PP
There are unit and integration tests for the plug-in itself\&. These are run with the default \fCrake\fP task\&. The integration test runs the tests for the example project in examples/fff_example\&. For the integration tests to succeed, this repository must be placed in a Ceedling tree in the plugins folder\&.
.SH "More examples"
.PP
There is an example project in examples/fff_example\&. It shows how to use the plug-in with some full-size examples\&. 
