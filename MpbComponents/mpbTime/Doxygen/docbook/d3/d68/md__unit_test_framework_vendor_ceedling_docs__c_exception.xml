<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_md__unit_test_framework_vendor_ceedling_docs__c_exception" xml:lang="en-US">

<para>CException is a basic exception framework for C, suitable for use in embedded applications. It provides an exception framework similar in use to C++, but with much less overhead.</para>

<para>CException uses C standard library functions <computeroutput>setjmp</computeroutput> and <computeroutput>longjmp</computeroutput> to operate. As long as the target system has these two functions defined, this library should be useable with very little configuration. It even supports environments where multiple program flows are in use, such as real-time operating systems.</para>

<para>There are about a gabillion exception frameworks using a similar setjmp/longjmp method out there... and there will probably be more in the future. Unfortunately, when we started our last embedded project, all those that existed either (a) did not support multiple tasks (therefore multiple stacks) or (b) were way more complex than we really wanted. CException was born.</para>

<para><emphasis>Why use CException?</emphasis></para>

<para>0. It&apos;s ANSI C, and it beats passing error codes around.<orderedlist>
<listitem>
<para>You want something simple... CException throws a single id. You can define those ID&apos;s to be whatever you like. You might even choose which type that number is for your project. But that&apos;s as far as it goes. We weren&apos;t interested in passing objects or structs or strings... just simple error codes.</para>
</listitem><listitem>
<para>Performance... CException can be configured for single tasking or multitasking. In single tasking, there is very little overhead past the setjmp/longjmp calls (which are already fast). In multitasking, your only additional overhead is the time it takes you to determine a unique task id 0 - num_tasks.</para>
</listitem></orderedlist>
</para>

<para>For the latest version, go to <link xlink:href="http://throwtheswitch.org">ThrowTheSwitch.org</link></para>
<section xml:id="_md__unit_test_framework_vendor_ceedling_docs__c_exception_1autotoc_md24">
<title>CONTENTS OF THIS DOCUMENT</title>

<para><itemizedlist>
<listitem>
<para>Usage</para>
</listitem><listitem>
<para>Limitations *API</para>
</listitem><listitem>
<para>Configuration</para>
</listitem><listitem>
<para>Testing</para>
</listitem><listitem>
<para>License</para>
</listitem></itemizedlist>
</para>
<section xml:id="_md__unit_test_framework_vendor_ceedling_docs__c_exception_1autotoc_md25">
<title>Usage</title>

<para>Code that is to be protected are wrapped in <computeroutput>Try { } Catch { }</computeroutput> blocks. The code directly following the Try call is &quot;protected&quot;, meaning that if any Throws occur, program control is directly transferred to the start of the Catch block.</para>

<para>A numerical exception ID is included with Throw, and is made accessible from the Catch block.</para>

<para>Throws can occur from within function calls (nested as deeply as you like) or directly from within the function itself.</para>
</section>
<section xml:id="_md__unit_test_framework_vendor_ceedling_docs__c_exception_1autotoc_md26">
<title>Limitations</title>

<para>This library was made to be as fast as possible, and provide basic exception handling. It is not a full-blown exception library. Because of this, there are a few limitations that should be observed in order to successfully utilize this library:</para>

<para><orderedlist>
<listitem>
<para>Do not directly &quot;return&quot; from within a <computeroutput>Try</computeroutput> block, nor <computeroutput>goto</computeroutput> into or out of a <computeroutput>Try</computeroutput> block.</para>

<para><emphasis>Why?</emphasis></para>

<para>The <computeroutput>Try</computeroutput> macro allocates some local memory and alters a global pointer. These are cleaned up at the top of the <computeroutput>Catch</computeroutput> macro. Gotos and returns would bypass some of these steps, resulting in memory leaks or unpredictable behavior.</para>
</listitem><listitem>
<para>If (a) you change local (stack) variables within your <computeroutput>Try</computeroutput> block, AND (b) wish to make use of the updated values after an exception is thrown, those variables should be made <computeroutput>volatile</computeroutput>. Note that this is ONLY for locals and ONLY when you need access to them after a <computeroutput>Throw</computeroutput>.</para>

<para><emphasis>Why?</emphasis></para>

<para>Compilers optimize. There is no way to guarantee that the actual memory location was updated and not just a register unless the variable is marked volatile.</para>
</listitem><listitem>
<para>Memory which is <computeroutput>malloc</computeroutput>&apos;d or <computeroutput>new</computeroutput>&apos;d is not automatically released when an error is thrown. This will sometimes be desirable, and othertimes may not. It will be the responsibility of the <computeroutput>Catch</computeroutput> block to perform this kind of cleanup.</para>

<para><emphasis>Why?</emphasis></para>

<para>There&apos;s just no easy way to track <computeroutput>malloc</computeroutput>&apos;d memory, etc., without replacing or wrapping malloc calls or something like that. This is a light framework, so these options were not desirable.</para>
</listitem></orderedlist>
</para>
</section>
<section xml:id="_md__unit_test_framework_vendor_ceedling_docs__c_exception_1autotoc_md27">
<title>API</title>
<section xml:id="_md__unit_test_framework_vendor_ceedling_docs__c_exception_1autotoc_md28">
<title>Try</title>

<para><computeroutput>Try</computeroutput> is a macro which starts a protected block. It MUST be followed by a pair of braces or a single protected line (similar to an &apos;if&apos;), enclosing the data that is to be protected. It <emphasis role="bold">must</emphasis> be followed by a <computeroutput>Catch</computeroutput> block (don&apos;t worry, you&apos;ll get compiler errors to let you know if you mess any of that up).</para>
</section>
<section xml:id="_md__unit_test_framework_vendor_ceedling_docs__c_exception_1autotoc_md29">
<title>Catch(e)</title>

<para><computeroutput>Catch</computeroutput> is a macro which ends the <computeroutput>Try</computeroutput> block and starts the error handling block. The <computeroutput>Catch</computeroutput> block is called if and only if an exception was thrown while within the <computeroutput>Try</computeroutput> block. This error was thrown by a <computeroutput>Throw</computeroutput> call somewhere within <computeroutput>Try</computeroutput> (or within a function called within <computeroutput>Try</computeroutput>, or a function called by a function called within <computeroutput>Try</computeroutput>, etc).</para>

<para>The single parameter <computeroutput>e</computeroutput> is filled with the error code which was thrown. This can be used for reporting, conditional cleanup, etc. (or you can just ignore it if you really want... people ignore return codes all the time, right?). <computeroutput>e</computeroutput> should be of type <computeroutput>EXCEPTION_T</computeroutput></para>
</section>
<section xml:id="_md__unit_test_framework_vendor_ceedling_docs__c_exception_1autotoc_md30">
<title>Throw(e)</title>

<para>This is the method of throwing an error. A <computeroutput>Throw</computeroutput> should only occur from within a protected (<computeroutput>Try</computeroutput> ... <computeroutput>Catch</computeroutput>) block, though it may easily be nested many function calls deep without an impact on performance or functionality. <computeroutput>Throw</computeroutput> takes a single argument, which is an exception id which will be passed to <computeroutput>Catch</computeroutput> as the reason for the error.</para>

<para>If you wish to rethrow an error, this can be done by calling <computeroutput>Throw(e)</computeroutput> with the error code you just caught. It <emphasis role="bold">is</emphasis> valid to throw from a catch block.</para>
</section>
<section xml:id="_md__unit_test_framework_vendor_ceedling_docs__c_exception_1autotoc_md31">
<title>ExitTry()</title>

<para>On rare occasion, you might want to immediately exit your current <computeroutput>Try</computeroutput> block but <emphasis role="bold">not</emphasis> treat this as an error. Don&apos;t run the <computeroutput>Catch</computeroutput>. Just start executing from after the <computeroutput>Catch</computeroutput> as if nothing had happened... That&apos;s what <computeroutput>ExitTry</computeroutput> is for.</para>
</section>
</section>
<section xml:id="_md__unit_test_framework_vendor_ceedling_docs__c_exception_1autotoc_md32">
<title>CONFIGURATION</title>

<para>CException is a mostly portable library. It has one universal dependency, and some macros which are required if working in a multi-tasking environment.</para>

<para><orderedlist>
<listitem>
<para>The standard C library setjmp must be available. Since this is part of the standard library, chances are good that you&apos;ll be fine.</para>
</listitem><listitem>
<para>If working in a multitasking environment, methods for obtaining an index into an array of frames and to get the overall number of id&apos;s are required. If the OS supports a method to retrieve Task ID&apos;s, and those Tasks are number 0, 1, 2... you are in an ideal situation. Otherwise, a more creative mapping function may be required. Note that this function is likely to be called twice for each protected block and once during a throw. This is the only overhead in the system.</para>
</listitem></orderedlist>
</para>
</section>
<section xml:id="_md__unit_test_framework_vendor_ceedling_docs__c_exception_1autotoc_md33">
<title>Exception.h</title>

<para>By convention, most projects include <computeroutput>Exception.h</computeroutput> which defines any further requirements, then calls <computeroutput><link linkend="__c_exception_8h">CException.h</link></computeroutput> to do the gruntwork. All of these are optional. You could directly include <computeroutput><link linkend="__c_exception_8h">CException.h</link></computeroutput> if you wanted and just use the defaults provided.</para>

<para><itemizedlist>
<listitem>
<para><computeroutput>EXCEPTION_T</computeroutput><itemizedlist>
<listitem>
<para>Set this to the type you want your exception id&apos;s to be. Defaults to &apos;unsigned int&apos;.</para>
</listitem></itemizedlist>
</para>
</listitem><listitem>
<para><computeroutput>EXCEPTION_NONE</computeroutput><itemizedlist>
<listitem>
<para>Set this to a number which will never be an exception id in your system. Defaults to <computeroutput>0x5a5a5a5a</computeroutput>.</para>
</listitem></itemizedlist>
</para>
</listitem><listitem>
<para><computeroutput>EXCEPTION_GET_ID</computeroutput><itemizedlist>
<listitem>
<para>If in a multi-tasking environment, this should be set to be a call to the function described in #2 above. Defaults to just return <computeroutput>0</computeroutput> all the time (good for single tasking environments)</para>
</listitem></itemizedlist>
</para>
</listitem><listitem>
<para><computeroutput>EXCEPTION_NUM_ID</computeroutput><itemizedlist>
<listitem>
<para>If in a multi-tasking environment, this should be set to the number of ID&apos;s required (usually the number of tasks in the system). Defaults to <computeroutput>1</computeroutput> (for single tasking environments).</para>
</listitem></itemizedlist>
</para>
</listitem><listitem>
<para><computeroutput><link linkend="__c_exception_8h_1ac8517d98d7874a3e21e35c4e782220c1">CEXCEPTION_NO_CATCH_HANDLER(id)</link></computeroutput><itemizedlist>
<listitem>
<para>This macro can be optionally specified. It allows you to specify code to be called when a Throw is made outside of <computeroutput>Try</computeroutput> ... <computeroutput>Catch</computeroutput> protection. Consider this the emergency fallback plan for when something has gone terribly wrong.</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>

<para>You may also want to include any header files which will commonly be needed by the rest of your application where it uses exception handling here. For example, OS header files or exception codes would be useful.</para>

<para>Finally, there are some hook macros which you can implement to inject your own target-specific code in particular places. It is a rare instance where you will need these, but they are here if you need them:</para>

<para><itemizedlist>
<listitem>
<para><computeroutput>CEXCEPTION_HOOK_START_TRY</computeroutput><itemizedlist>
<listitem>
<para>called immediately before the Try block</para>
</listitem></itemizedlist>
</para>
</listitem><listitem>
<para><computeroutput>CEXCEPTION_HOOK_HAPPY_TRY</computeroutput><itemizedlist>
<listitem>
<para>called immediately after the Try block if no exception was thrown</para>
</listitem></itemizedlist>
</para>
</listitem><listitem>
<para><computeroutput>CEXCEPTION_HOOK_AFTER_TRY</computeroutput><itemizedlist>
<listitem>
<para>called immediately after the Try block OR before an exception is caught</para>
</listitem></itemizedlist>
</para>
</listitem><listitem>
<para><computeroutput>CEXCEPTION_HOOK_START_CATCH</computeroutput><itemizedlist>
<listitem>
<para>called immediately before the catch</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</section>
<section xml:id="_md__unit_test_framework_vendor_ceedling_docs__c_exception_1autotoc_md34">
<title>TESTING</title>

<para>If you want to validate that CException works with your tools or that it works with your custom configuration, you may want to run the test suite.</para>

<para>The test suite included makes use of the <computeroutput>Unity</computeroutput> Test Framework. It will require a native C compiler. The example makefile uses MinGW&apos;s gcc. Modify the makefile to include the proper paths to tools, then run <computeroutput>make</computeroutput> to compile and run the test application.</para>

<para><itemizedlist>
<listitem>
<para><computeroutput>C_COMPILER</computeroutput><itemizedlist>
<listitem>
<para>The C compiler to use to perform the tests</para>
</listitem></itemizedlist>
</para>
</listitem><listitem>
<para><computeroutput>C_LIBS</computeroutput><itemizedlist>
<listitem>
<para>The path to the C libraries (including setjmp)</para>
</listitem></itemizedlist>
</para>
</listitem><listitem>
<para><computeroutput>UNITY_DIR</computeroutput><itemizedlist>
<listitem>
<para>The path to the Unity framework (required to run tests) (get it at <link xlink:href="http://throwtheswitch.org">ThrowTheSwitch.org</link>)</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</section>
<section xml:id="_md__unit_test_framework_vendor_ceedling_docs__c_exception_1autotoc_md35">
<title>LICENSE</title>

<para>This software is licensed under the MIT License</para>

<para>Copyright (c) 2007-2017 Mark VanderVoord</para>

<para>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &quot;Software&quot;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</para>

<para>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</para>

<para>THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. </para>
</section>
</section>
</section>
