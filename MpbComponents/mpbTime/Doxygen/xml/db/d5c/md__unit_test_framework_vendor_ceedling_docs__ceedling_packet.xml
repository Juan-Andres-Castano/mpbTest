<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="db/d5c/md__unit_test_framework_vendor_ceedling_docs__ceedling_packet" kind="page">
    <compoundname>md_UnitTestFramework_vendor_ceedling_docs_CeedlingPacket</compoundname>
    <title>CeedlingPacket</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>[All code is copyright © 2010-2012 Ceedling Project by Mike Karlesky, Mark VanderVoord, and Greg Williams.</para>
<para>This Documentation Is Released Under a Creative Commons 3.0 Attribution Share-Alike License]</para>
<para>What the What?</para>
<para>Assembling build environments for C projects - especially with automated unit tests - is a pain. Whether it&apos;s Make or Rake or Premake or what-have-you, set up with an all-purpose build environment tool is tedious and requires considerable glue code to pull together the necessary tools and libraries. Ceedling allows you to generate an entire test and build environment for a C project from a single YAML configuration file. Ceedling is written in Ruby and works with the Rake build tool plus other goodness like Unity and CMock<itemizedlist>
<listitem><para>the unit testing and mocking frameworks for C. Ceedling and its complementary tools can support the tiniest of embedded processors, the beefiest 64 bit power houses available, and everything in between.</para>
</listitem></itemizedlist>
</para>
<para>For a build project including unit tests and using the default toolchain gcc, the configuration file could be as simple as this:</para>
<para><programlisting filename=".yaml"><codeline><highlight class="normal">:project:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>:build_root:<sp/>project/build/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>:release_build:<sp/>TRUE</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">:paths:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>:test:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>tests/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>:source:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>source/**</highlight></codeline>
</programlisting></para>
<para>From the command line, to build the release version of your project, you would simply run <computeroutput>ceedling release</computeroutput>. To run all your unit tests, you would run <computeroutput>ceedling test:all</computeroutput>. That&apos;s it!</para>
<para>Of course, many more advanced options allow you to configure your project with a variety of features to meet a variety of needs. Ceedling can work with practically any command line toolchain and directory structure – all by way of the configuration file. Further, because Ceedling piggy backs on Rake, you can add your own Rake tasks to accomplish project tasks outside of testing and release builds. A facility for plugins also allows you to extend Ceedling&apos;s capabilities for needs such as custom code metrics reporting and coverage testing.</para>
<para>What&apos;s with this Name?</para>
<para>Glad you asked. Ceedling is tailored for unit tested C projects and is built upon / around Rake (Rake is a Make replacement implemented in the Ruby scripting language). So, we&apos;ve got C, our Rake, and the fertile soil of a build environment in which to grow and tend your project and its unit tests. Ta da - <emphasis>Ceedling</emphasis>.</para>
<para>What Do You Mean &quot;tailored for unit tested C projects&quot;?</para>
<para>Well, we like to write unit tests for our C code to make it lean and mean (that whole <ulink url="http://en.wikipedia.org/wiki/Test-driven_development">Test-Driven Development</ulink> thing). Along the way, this style of writing C code spawned two tools to make the job easier: a unit test framework for C called <emphasis>Unity</emphasis> and a mocking library called <emphasis>CMock</emphasis>. And, though it&apos;s not directly related to testing, a C framework for exception handling called <emphasis>CException</emphasis> also came along.</para>
<para>These tools and frameworks are great, but they require quite a bit of environment support to pull them all together in a convenient, usable fashion. We started off with Rakefiles to assemble everything. These ended up being quite complicated and had to be hand-edited or created anew for each new project. Ceedling replaces all that tedium and rework with a configuration file that ties everything together.</para>
<para>Though Ceedling is tailored for unit testing, it can also go right ahead and build your final binary release artifact for you as well. Or, Ceedling and your tests can live alongside your existing release build setup. That said, Ceedling is more powerful as a unit test build environment than it is a general purpose release build environment; complicated projects including separate bootloaders or multiple library builds, etc. are not its strong suit.</para>
<para>Hold on. Back up. Ruby? Rake? YAML? Unity? CMock? CException?</para>
<para>Seem overwhelming? It&apos;s not bad at all, and for the benefits tests bring us, it&apos;s all worth it.</para>
<para><ulink url="http://www.ruby-lang.org/en/">Ruby</ulink> is a handy scripting language like Perl or Python. It&apos;s a modern, full featured language that happens to be quite handy for accomplishing tasks like code generation or automating one&apos;s workflow while developing in a compiled language such as C.</para>
<para><ulink url="http://rubyrake.org/">Rake</ulink> is a utility written in Ruby for accomplishing dependency tracking and task automation common to building software. It&apos;s a modern, more flexible replacement for <ulink url="http://en.wikipedia.org/wiki/Make_(software)">Make</ulink>). Rakefiles are Ruby files, but they contain build targets similar in nature to that of Makefiles (but you can also run Ruby code in your Rakefile).</para>
<para><ulink url="http://en.wikipedia.org/wiki/Yaml">YAML</ulink> is a &quot;human friendly data serialization standard for all
programming languages.&quot; It&apos;s kinda like a markup language, but don&apos;t call it that. With a YAML library, you can <ulink url="http://en.wikipedia.org/wiki/Serialization">serialize</ulink> data structures to and from the file system in a textual, human readable form. Ceedling uses a serialized data structure as its configuration input.</para>
<para><ulink url="http://github.com/ThrowTheSwitch/Unity">Unity</ulink> is a <ulink url="http://en.wikipedia.org/wiki/Unit_testing">unit test framework</ulink> for C. It provides facilities for test assertions, executing tests, and collecting / reporting test results. Unity derives its name from its implementation in a single C source file (plus two C header files) and from the nature of its implementation - Unity will build in any C toolchain and is configurable for even the very minimalist of processors.</para>
<para><ulink url="http://github.com/ThrowTheSwitch/CMock">CMock</ulink> is a tool written in Ruby able to generate entire <ulink url="http://en.wikipedia.org/wiki/Mock_object">mock functions</ulink> in C code from a given C header file. Mock functions are invaluable in <ulink url="http://martinfowler.com/articles/mocksArentStubs.html">interaction-based unit testing</ulink>. CMock&apos;s generated C code uses Unity.</para>
<para><ulink url="http://github.com/ThrowTheSwitch/CException">CException</ulink> is a C source and header file that provide a simple <ulink url="http://en.wikipedia.org/wiki/Exception_handling">exception mechanism</ulink> for C by way of wrapping up the <ulink url="http://en.wikipedia.org/wiki/Setjmp.h">setjmp / longjmp</ulink> standard library calls. Exceptions are a much cleaner and preferable alternative to managing and passing error codes up your return call trace.</para>
<sect2 id="db/d5c/md__unit_test_framework_vendor_ceedling_docs__ceedling_packet_1autotoc_md0">
<title>Notes</title>
<para><itemizedlist>
<listitem><para>YAML support is included with Ruby - requires no special installation or configuration.</para>
</listitem><listitem><para>Unity, CMock, and CException are bundled with Ceedling, and Ceedling is designed to glue them all together for your project as seamlessly as possible.</para>
</listitem></itemizedlist>
</para>
</sect2>
<sect2 id="db/d5c/md__unit_test_framework_vendor_ceedling_docs__ceedling_packet_1autotoc_md1">
<title>Installation &amp; Setup: What Exactly Do I Need to Get Started?</title>
<para>As a <ulink url="http://docs.rubygems.org/read/chapter/1">Ruby gem</ulink>:</para>
<para><orderedlist>
<listitem><para><ulink url="http://www.ruby-lang.org/en/downloads/">Download and install Ruby</ulink></para>
</listitem><listitem><para>Use Ruby&apos;s command line gem package manager to install Ceedling: <computeroutput>gem install ceedling</computeroutput> (Unity, CMock, and CException come along with Ceedling for free)</para>
</listitem><listitem><para>Execute Ceedling at command line to create example project or an empty Ceedling project in your filesystem (executing <computeroutput>ceedling help</computeroutput> first is, well, helpful).</para>
</listitem></orderedlist>
</para>
<para>Gem install notes:</para>
<para><orderedlist>
<listitem><para>Steps 1-2 are a one time affair for your local environment. When steps 1-2 are completed once, only step 3 is needed for each new project.</para>
</listitem></orderedlist>
</para>
<para>General notes:</para>
<para><orderedlist>
<listitem><para>Certain advanced features of Ceedling rely on gcc and cpp as preprocessing tools. In most *nix systems, these tools are already available. For Windows environments, we recommend the <ulink url="http://www.mingw.org/">mingw project</ulink> (Minimalist GNU for Windows). This represents an optional, additional setup / installation step to complement the list above. Upon installing mingw ensure your system path is updated or set [:environment][:path] in your <computeroutput>project.yml</computeroutput> file (see environment section later in this document).</para>
</listitem><listitem><para>To use a project file name other than the default <computeroutput>project.yml</computeroutput> or place the project file in a directory other than the one in which you&apos;ll run Rake, create an environment variable <computeroutput>CEEDLING_MAIN_PROJECT_FILE</computeroutput> with your desired project file path.</para>
</listitem><listitem><para>To better understand Rake conventions, Rake execution, and Rakefiles, consult the <ulink url="http://rubyrake.org/">Rake tutorial, examples, and user guide</ulink>.</para>
</listitem><listitem><para>When using Ceedling in Windows environments, a test file name may not include the sequences “patch” or “setup”. The Windows Installer Detection Technology (part of UAC), requires administrator privileges to execute file names with these strings.</para>
</listitem></orderedlist>
</para>
</sect2>
<sect2 id="db/d5c/md__unit_test_framework_vendor_ceedling_docs__ceedling_packet_1autotoc_md2">
<title>Now What? How Do I Make It GO?</title>
<para>We&apos;re getting a little ahead of ourselves here, but it&apos;s good context on how to drive this bus. Everything is done via the command line. We&apos;ll cover conventions and how to actually configure your project in later sections.</para>
<para>To run tests, build your release artifact, etc., you will be interacting with Rake on the command line. Ceedling works with Rake to present you with named tasks that coordinate the file generation and build steps needed to accomplish something useful. You can also add your own independent Rake tasks or create plugins to extend Ceedling (more on this later).</para>
<para><itemizedlist>
<listitem><para><computeroutput>ceedling [no arguments]</computeroutput>:</para>
<para>Run the default Rake task (conveniently recognized by the name default by Rake). Neither Rake nor Ceedling provide a default task. Rake will abort if run without arguments when no default task is defined. You can conveniently define a default task in the Rakefile discussed in the preceding setup &amp; installation section of this document.</para>
</listitem><listitem><para><computeroutput>ceedling -T</computeroutput>:</para>
<para>List all available Rake tasks with descriptions (Rake tasks without descriptions are not listed). -T is a command line switch for Rake and not the same as tasks that follow.</para>
</listitem><listitem><para><computeroutput>ceedling &lt;tasks...&gt; --trace</computeroutput>:</para>
<para>For advanced users troubleshooting a confusing build error, debug Ceedling or a plugin, <ndash/>trace provides a stack trace of dependencies walked during task execution and any Ruby failures along the way. Note that <ndash/>trace is a command line switch for Rake and is not the same as tasks that follow.</para>
</listitem><listitem><para><computeroutput>ceedling environment</computeroutput>:</para>
<para>List all configured environment variable names and string values. This task is helpful in verifying the evaluatio of any Ruby expressions in the [:environment] section of your config file.`: Note: Ceedling may set some convenience environment variables by default.</para>
</listitem><listitem><para><computeroutput>ceedling paths:*</computeroutput>:</para>
<para>List all paths collected from [:paths] entries in your YAML config file where * is the name of any section contained in [:paths]. This task is helpful in verifying the expansion of path wildcards / globs specified in the [:paths] section of your config file.</para>
</listitem><listitem><para><computeroutput>ceedling files:assembly</computeroutput></para>
</listitem><listitem><para><computeroutput>ceedling files:header</computeroutput></para>
</listitem><listitem><para><computeroutput>ceedling files:source</computeroutput></para>
</listitem><listitem><para><computeroutput>ceedling files:test</computeroutput></para>
<para>List all files and file counts collected from the relevant search paths specified by the [:paths] entries of your YAML config file. The files:assembly task will only be available if assembly support is enabled in the [:release_build] section of your configuration file.</para>
</listitem><listitem><para><computeroutput>ceedling options:*</computeroutput>:</para>
<para>Load and merge configuration settings into the main project configuration. Each task is named after a *.yml file found in the configured options directory. See documentation for the configuration setting [:project][:options_path] and for options files in advanced topics.</para>
</listitem><listitem><para><computeroutput>ceedling test:all</computeroutput>:</para>
<para>Run all unit tests (rebuilding anything that&apos;s changed along the way).</para>
</listitem><listitem><para><computeroutput>ceedling test:delta</computeroutput>:</para>
<para>Run only those unit tests for which the source or test files have changed (i.e. incremental build). Note: with the [:project][:use_test_preprocessor] configuration file option set, runner files are always regenerated limiting the total efficiency this text execution option can afford.</para>
</listitem><listitem><para><computeroutput>ceedling test:*</computeroutput>:</para>
<para>Execute the named test file or the named source file that has an accompanying test. No path. Examples: ceedling test:<ref refid="d0/d87/foo_8c" kindref="compound">foo.c</ref> or ceed test:<ref refid="d6/d36/test__foo_8c" kindref="compound">test_foo.c</ref></para>
</listitem><listitem><para><computeroutput>ceedling test:pattern[*]</computeroutput>:</para>
<para>Execute any tests whose name and/or path match the regular expression pattern (case sensitive). Example: ceedling &quot;test:pattern[(I|i)nit]&quot; will execute all tests named for initialization testing. Note: quotes may be necessary around the ceedling parameter to distinguish regex characters from command line operators.</para>
</listitem><listitem><para><computeroutput>ceedling test:path[*]</computeroutput>:</para>
<para>Execute any tests whose path contains the given string (case sensitive). Example: ceedling test:path[foo/bar] will execute all tests whose path contains foo/bar. Note: both directory separator characters / and \ are valid.</para>
</listitem><listitem><para><computeroutput>ceedling release</computeroutput>:</para>
<para>Build all source into a release artifact (if the release build option is configured).</para>
</listitem><listitem><para><computeroutput>ceedling release:compile:*</computeroutput>:</para>
<para>Sometimes you just need to compile a single file dagnabit. Example: ceedling release:compile:<ref refid="d0/d87/foo_8c" kindref="compound">foo.c</ref></para>
</listitem><listitem><para><computeroutput>ceedling release:assemble:*</computeroutput>:</para>
<para>Sometimes you just need to assemble a single file doggonit. Example: ceedling release:assemble:foo.s</para>
</listitem><listitem><para><computeroutput>ceedling module:create[Filename]</computeroutput>:</para>
</listitem><listitem><para><computeroutput>ceedling module:create[&lt;Path:&gt;Filename]</computeroutput>:</para>
<para>It&apos;s often helpful to create a file automatically. What&apos;s better than that? Creating a source file, a header file, and a corresponding test file all in one step!</para>
<para>There are also patterns which can be specified to automatically generate a bunch of files. Try <computeroutput>ceedling module:create[Poodles,mch]</computeroutput> for example!</para>
<para>The module generator has several options you can configure. F.e. Generating the source/header/test file in a subdirectory (by adding &lt;Path&gt; when calling module:create). For more info, refer to the <ulink url="https://github.com/ThrowTheSwitch/Ceedling/blob/master/docs/CeedlingPacket.md#module-generator">Module Generator</ulink> section.</para>
</listitem><listitem><para><computeroutput>ceedling logging &lt;tasks...&gt;</computeroutput>:</para>
<para>Enable logging to &lt;build path&gt;/logs. Must come before test and release tasks to log their steps and output. Log names are a concatenation of project, user, and option files loaded. User and option files are documented in the advanced topics section of this document.</para>
</listitem><listitem><para><computeroutput>ceedling verbosity[x] &lt;tasks...&gt;</computeroutput>:</para>
<para>Change the default verbosity level. [x] ranges from 0 (quiet) to 4 (obnoxious). Level [3] is the default. The verbosity task must precede all tasks in the command line list for which output is desired to be seen. Verbosity settings are generally most meaningful in conjunction with test and release tasks.</para>
</listitem><listitem><para><computeroutput>ceedling summary</computeroutput>:</para>
<para>If plugins are enabled, this task will execute the summary method of any plugins supporting it. This task is intended to provide a quick roundup of build artifact metrics without re-running any part of the build.</para>
</listitem><listitem><para><computeroutput>ceedling clean</computeroutput>:</para>
<para>Deletes all toolchain binary artifacts (object files, executables), test results, and any temporary files. Clean produces no output at the command line unless verbosity has been set to an appreciable level.</para>
</listitem><listitem><para><computeroutput>ceedling clobber</computeroutput>:</para>
<para>Extends clean task&apos;s behavior to also remove generated files: test runners, mocks, preprocessor output. Clobber produces no output at the command line unless verbosity has been set to an appreciable level.</para>
</listitem></itemizedlist>
</para>
<para>To better understand Rake conventions, Rake execution, and Rakefiles, consult the <ulink url="http://rubyrake.org/">Rake tutorial, examples, and user guide</ulink>.</para>
<para>At present, none of Ceedling&apos;s commands provide persistence. That is, they must each be specified at the command line each time they are needed. For instance, Ceedling&apos;s verbosity command only affects output at the time it&apos;s run.</para>
<para>Individual test and release file tasks are not listed in <computeroutput>-T</computeroutput> output. Because so many files may be present it&apos;s unwieldy to list them all.</para>
<para>Multiple rake tasks can be executed at the command line (order is executed as provided). For example, <computeroutput>ceed clobber test:all release</computeroutput> will removed all generated files; build and run all tests; and then build all source - in that order. If any Rake task fails along the way, execution halts before the next task.</para>
<para>The <computeroutput>clobber</computeroutput> task removes certain build directories in the course of deleting generated files. In general, it&apos;s best not to add to source control any Ceedling generated directories below the root of your top-level build directory. That is, leave anything Ceedling &amp; its accompanying tools generate out of source control (but go ahead and add the top-level build directory that holds all that stuff). Also, since Ceedling is pretty smart about what it rebuilds and regenerates, you needn&apos;t clobber often.</para>
</sect2>
<sect1 id="db/d5c/md__unit_test_framework_vendor_ceedling_docs__ceedling_packet_1autotoc_md3">
<title>Important Conventions</title>
<sect2 id="db/d5c/md__unit_test_framework_vendor_ceedling_docs__ceedling_packet_1autotoc_md4">
<title>Directory Structure, Filenames &amp; Extensions</title>
<para>Much of Ceedling&apos;s functionality is driven by collecting files matching certain patterns inside the paths it&apos;s configured to search. See the documentation for the [:extensions] section of your configuration file (found later in this document) to configure the file extensions Ceedling uses to match and collect files. Test file naming is covered later in this section.</para>
<para>Test files and source files must be segregated by directories. Any directory structure will do. Tests can be held in subdirectories within source directories, or tests and source directories can be wholly separated at the top of your project&apos;s directory tree.</para>
</sect2>
<sect2 id="db/d5c/md__unit_test_framework_vendor_ceedling_docs__ceedling_packet_1autotoc_md5">
<title>Search Path Order</title>
<para>When Ceedling searches for files (e.g. looking for header files to mock) or when it provides search paths to any of the default gcc toolchain executables, it organizes / prioritizes its search paths. The order is always: test paths, support paths, source paths, and then include paths. This can be useful, for instance, in certain testing scenarios where we desire Ceedling or a compiler to find a stand-in header file in our support directory before the actual source header file of the same name.</para>
<para>This convention only holds when Ceedling is using its default tool configurations and / or when tests are involved. If you define your own tools in the configuration file (see the [:tools] section documented later in this here document), you have complete control over what directories are searched and in what order. Further, test and support directories are only searched when appropriate. That is, when running a release build, test and support directories are not used at all.</para>
</sect2>
<sect2 id="db/d5c/md__unit_test_framework_vendor_ceedling_docs__ceedling_packet_1autotoc_md6">
<title>Source Files &amp; Binary Release Artifacts</title>
<para>Your binary release artifact results from the compilation and linking of all source files Ceedling finds in the specified source directories. At present only source files with a single (configurable) extension are recognized. That is, *.c and *.cc files will not both be recognized - only one or the other. See the configuration options and defaults in the documentation for the [:extensions] sections of your configuration file (found later in this document).</para>
</sect2>
<sect2 id="db/d5c/md__unit_test_framework_vendor_ceedling_docs__ceedling_packet_1autotoc_md7">
<title>Test Files &amp; Executable Test Fixtures</title>
<para>Ceedling builds each individual test file with its accompanying source file(s) into a single, monolithic test fixture executable. Test files are recognized by a naming convention: a (configurable) prefix such as &quot;`test_`&quot; in the file name with the same file extension as used by your C source files. See the configuration options and defaults in the documentation for the [:project] and [:extensions] sections of your configuration file (found later in this document). Depending on your configuration options, Ceedling can recognize a variety of test file naming patterns in your test search paths. For example: <computeroutput>test_some_super_functionality.c</computeroutput>, <computeroutput>TestYourSourceFile.cc</computeroutput>, or <computeroutput>testing_MyAwesomeCode.C</computeroutput> could each be valid test file names. Note, however, that Ceedling can recognize only one test file naming convention per project.</para>
<para>Ceedling knows what files to compile and link into each individual test executable by way of the #include list contained in each test file. Any C source files in the configured search directories that correspond to the header files included in a test file will be compiled and linked into the resulting test fixture executable. From this same #include list, Ceedling knows which files to mock and compile and link into the test executable (if you use mocks in your tests). That was a lot of clauses and information in a very few sentences; the example that follows in a bit will make it clearer.</para>
<para>By naming your test functions according to convention, Ceedling will extract and collect into a runner C file calls to all your test case functions. This runner file handles all the execution minutiae so that your test file can be quite simple and so that you never forget to wire up a test function to be executed. In this generated runner lives the <computeroutput><ref refid="d4/db7/test__mpb_time_base__runner_8c_1a840291bc02cba5474a4cb46a9b9566fe" kindref="member">main()</ref></computeroutput> entry point for the resulting test executable. There are no configuration options for the naming convention of your test case functions. A test case function signature must have these three elements: void return, void parameter list, and the function name prepended with lowercase &quot;`test`&quot;. In other words, a test function signature should look like this: <computeroutput>void test</computeroutput><computeroutput>[any name you like]</computeroutput><computeroutput>(void)</computeroutput>.</para>
<para>A commented sample test file follows on the next page. Also, see the sample project contained in the Ceedling documentation bundle.</para>
<para><programlisting filename=".c"><codeline><highlight class="comment">//<sp/>test_foo.c<sp/>-----------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d6/db4/unity_8h" kindref="compound">unity.h</ref>&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compile/link<sp/>in<sp/>Unity<sp/>test<sp/>framework</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;types.h&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>header<sp/>file<sp/>with<sp/>no<sp/>*.c<sp/>file<sp/>--<sp/>no<sp/>compilation/linking</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d2/d2b/foo_8h" kindref="compound">foo.h</ref>&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>source<sp/>file<sp/>foo.c<sp/>under<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;mock_bar.h&quot;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>bar.h<sp/>will<sp/>be<sp/>found<sp/>and<sp/>mocked<sp/>as<sp/>mock_bar.c<sp/>+<sp/>compiled/linked<sp/>in;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>foo.c<sp/>includes<sp/>bar.h<sp/>and<sp/>uses<sp/>functions<sp/>declared<sp/>in<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;mock_baz.h&quot;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>baz.h<sp/>will<sp/>be<sp/>found<sp/>and<sp/>mocked<sp/>as<sp/>mock_baz.c<sp/>+<sp/>compiled/linked<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>foo.c<sp/>includes<sp/>baz.h<sp/>and<sp/>uses<sp/>functions<sp/>declared<sp/>in<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d5/d39/test__mpb_time_base_8c_1a63326a1b70b6e3f070e51687798e02de" kindref="member">setUp</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{}<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>every<sp/>test<sp/>file<sp/>requires<sp/>this<sp/>function;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>setUp()<sp/>is<sp/>called<sp/>by<sp/>the<sp/>generated<sp/>runner<sp/>before<sp/>each<sp/>test<sp/>case<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d5/d39/test__mpb_time_base_8c_1ab804e0f66def63262c1d6b4e3d2a2bd7" kindref="member">tearDown</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{}<sp/></highlight><highlight class="comment">//<sp/>every<sp/>test<sp/>file<sp/>requires<sp/>this<sp/>function;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>tearDown()<sp/>is<sp/>called<sp/>by<sp/>the<sp/>generated<sp/>runner<sp/>before<sp/>each<sp/>test<sp/>case<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>a<sp/>test<sp/>case<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_Foo_Function1_should_Call_Bar_AndGrill(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Bar_AndGrill_Expect();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>setup<sp/>function<sp/>from<sp/>mock_bar.c<sp/>that<sp/>instructs<sp/>our</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>framework<sp/>to<sp/>expect<sp/>Bar_AndGrill()<sp/>to<sp/>be<sp/>called<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d6/db4/unity_8h_1af9e5695d6c7cf634206ea6d062cb54c9" kindref="member">TEST_ASSERT_EQUAL</ref>(0xFF,<sp/>Foo_Function1());<sp/></highlight><highlight class="comment">//<sp/>assertion<sp/>provided<sp/>by<sp/>Unity</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Foo_Function1()<sp/>calls<sp/>Bar_AndGrill()<sp/>&amp;<sp/>returns<sp/>a<sp/>byte</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>another<sp/>test<sp/>case<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_Foo_Function2_should_Call_Baz_Tec(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Baz_Tec_ExpectAnd_Return(1);<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>setup<sp/>function<sp/>provided<sp/>by<sp/>mock_baz.c<sp/>that<sp/>instructs<sp/>our</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>framework<sp/>to<sp/>expect<sp/>Baz_Tec()<sp/>to<sp/>be<sp/>called<sp/>once<sp/>and<sp/>return<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d6/db4/unity_8h_1a6a0527f090dfc0b5ce9724415e51ebe5" kindref="member">TEST_ASSERT_TRUE</ref>(Foo_Function2());<sp/></highlight><highlight class="comment">//<sp/>assertion<sp/>provided<sp/>by<sp/>Unity</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>of<sp/>test_foo.c<sp/>----------------------------------------</highlight></codeline>
</programlisting></para>
<para>From the test file specified above Ceedling will generate <computeroutput>test_foo_runner.c</computeroutput>; this runner file will contain <computeroutput><ref refid="d4/db7/test__mpb_time_base__runner_8c_1a840291bc02cba5474a4cb46a9b9566fe" kindref="member">main()</ref></computeroutput> and call both of the example test case functions.</para>
<para>The final test executable will be <computeroutput>test_foo.exe</computeroutput> (for Windows machines or <computeroutput>test_foo.out</computeroutput> for *nix systems - depending on default or configured file extensions). Based on the #include list above, the test executable will be the output of the linker having processed <computeroutput>unity.o</computeroutput>, <computeroutput>foo.o</computeroutput>, <computeroutput>mock_bar.o</computeroutput>, <computeroutput>mock_baz.o</computeroutput>, <computeroutput>test_foo.o</computeroutput>, and <computeroutput>test_foo_runner.o</computeroutput>. Ceedling finds the files, generates mocks, generates a runner, compiles all the files, and links everything into the test executable. Ceedling will then run the test executable and collect test results from it to be reported to the developer at the command line.</para>
<para>For more on the assertions and mocks shown, consult the documentation for Unity and CMock.</para>
</sect2>
<sect2 id="db/d5c/md__unit_test_framework_vendor_ceedling_docs__ceedling_packet_1autotoc_md8">
<title>The Magic of Dependency Tracking</title>
<para>Ceedling is pretty smart in using Rake to build up your project&apos;s dependencies. This means that Ceedling automagically rebuilds all the appropriate files in your project when necessary: when your configuration changes, Ceedling or any of the other tools are updated, or your source or test files change. For instance, if you modify a header file that is mocked, Ceedling will ensure that the mock is regenerated and all tests that use that mock are rebuilt and re-run when you initiate a relevant testing task. When you see things rebuilding, it&apos;s for a good reason. Ceedling attempts to regenerate and rebuild only what&apos;s needed for a given execution of a task. In the case of large projects, assembling dependencies and acting upon them can cause some delay in executing tasks.</para>
<para>With one exception, the trigger to rebuild or regenerate a file is always a disparity in timestamps between a target file and its source - if an input file is newer than its target dependency, the target is rebuilt or regenerated. For example, if the C source file from which an object file is compiled is newer than that object file on disk, recompilation will occur (of course, if no object file exists on disk, compilation will always occur). The one exception to this dependency behavior is specific to your input configuration. Only if your logical configuration changes will a system-wide rebuild occur. Reorganizing your input configuration or otherwise updating its file timestamp without modifying the values within the file will not trigger a rebuild. This behavior handles the various ways in which your input configuration can change (discussed later in this document) without having changed your actual project YAML file.</para>
<para>Ceedling needs a bit of help to accomplish its magic with deep dependencies. Shallow dependencies are straightforward: a mock is dependent on the header file from which it&apos;s generated, a test file is dependent upon the source files it includes (see the preceding conventions section), etc. Ceedling handles these &quot;out of the box.&quot; Deep dependencies are specifically a C-related phenomenon and occur as a consequence of include statements within C source files. Say a source file includes a header file and that header file in turn includes another header file which includes still another header file. A change to the deepest header file should trigger a recompilation of the source file, a relinking of all the object files comprising a test fixture, and a new execution of that test fixture.</para>
<para>Ceedling can handle deep dependencies but only with the help of a C preprocessor. Ceedling is quite capable, but a full C preprocessor it ain&apos;t. Your project can be configured to use a C preprocessor or not. Simple projects or large projects constructed so as to be quite flat in their include structure generally don&apos;t need deep dependency preprocessing - and can enjoy the benefits of faster execution. Legacy code, on the other hand, will almost always want to be tested with deep preprocessing enabled. Set up of the C preprocessor is covered in the documentation for the [:project] and [:tools] section of the configuration file (later in this document). Ceedling contains all the configuration necessary to use the gcc preprocessor by default. That is, as long as gcc is in your system search path, deep preprocessing of deep dependencies is available to you by simply enabling it in your project configuration file.</para>
</sect2>
<sect2 id="db/d5c/md__unit_test_framework_vendor_ceedling_docs__ceedling_packet_1autotoc_md9">
<title>Ceedling&apos;s Build Output</title>
<para>Ceedling requires a top-level build directory for all the stuff that it, the accompanying test tools, and your toolchain generate. That build directory&apos;s location is configured in the [:project] section of your configuration file (discussed later). There can be a ton of generated files. By and large, you can live a full and meaningful life knowing absolutely nothing at all about the files and directories generated below the root build directory.</para>
<para>As noted already, it&apos;s good practice to add your top-level build directory to source control but nothing generated beneath it. You&apos;ll spare yourself headache if you let Ceedling delete and regenerate files and directories in a non-versioned corner of your project&apos;s filesystem beneath the top-level build directory.</para>
<para>The <computeroutput>artifacts</computeroutput> directory is the one and only directory you may want to know about beneath the top-level build directory. The subdirectories beneath <computeroutput>artifacts</computeroutput> will hold your binary release target output (if your project is configured for release builds) and will serve as the conventional location for plugin output. This directory structure was chosen specifically because it tends to work nicely with Continuous Integration setups that recognize and list build artifacts for retrieval / download.</para>
</sect2>
<sect2 id="db/d5c/md__unit_test_framework_vendor_ceedling_docs__ceedling_packet_1autotoc_md10">
<title>The Almighty Project Configuration File (in Glorious YAML)</title>
<para>Please consult YAML documentation for the finer points of format and to understand details of our YAML-based configuration file. We recommend <ulink url="http://en.wikipedia.org/wiki/Yaml">Wikipedia&apos;s entry on YAML</ulink> for this. A few highlights from that reference page:</para>
<para><itemizedlist>
<listitem><para>YAML streams are encoded using the set of printable Unicode characters, either in UTF-8 or UTF-16</para>
</listitem><listitem><para>Whitespace indentation is used to denote structure; however tab characters are never allowed as indentation</para>
</listitem><listitem><para>Comments begin with the number sign ( # ), can start anywhere on a line, and continue until the end of the line unless enclosed by quotes</para>
</listitem><listitem><para>List members are denoted by a leading hyphen ( - ) with one member per line, or enclosed in square brackets ( [ ] ) and separated by comma space ( , )</para>
</listitem><listitem><para>Hashes are represented using the colon space ( : ) in the form key: value, either one per line or enclosed in curly braces ( { } ) and separated by comma space ( , )</para>
</listitem><listitem><para>Strings (scalars) are ordinarily unquoted, but may be enclosed in double-quotes ( " ), or single-quotes ( &apos; )</para>
</listitem><listitem><para>YAML requires that colons and commas used as list separators be followed by a space so that scalar values containing embedded punctuation can generally be represented without needing to be enclosed in quotes</para>
</listitem><listitem><para>Repeated nodes are initially denoted by an ampersand ( &amp; ) and thereafter referenced with an asterisk ( * )</para>
</listitem></itemizedlist>
</para>
<para>Notes on what follows:</para>
<para><itemizedlist>
<listitem><para>Each of the following sections represent top-level entries in the YAML configuration file.</para>
</listitem><listitem><para>Unless explicitly specified in the configuration file, default values are used by Ceedling.</para>
</listitem><listitem><para>These three settings, at minimum, must be specified:<itemizedlist>
<listitem><para>[:project][:build_root]</para>
</listitem><listitem><para>[:paths][:source]</para>
</listitem><listitem><para>[:paths][:test]</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para>As much as is possible, Ceedling validates your settings in properly formed YAML.</para>
</listitem><listitem><para>Improperly formed YAML will cause a Ruby error when the YAML is parsed. This is usually accompanied by a complaint with line and column number pointing into the project file.</para>
</listitem><listitem><para>Certain advanced features rely on gcc and cpp as preprocessing tools. In most *nix systems, these tools are already available. For Windows environments, we recommend the <ulink url="http://www.mingw.org/">mingw project</ulink> (Minimalist GNU for Windows).</para>
</listitem><listitem><para>Ceedling is primarily meant as a build tool to support automated unit testing. All the heavy lifting is involved there. Creating a simple binary release build artifact is quite trivial in comparison. Consequently, most default options and the construction of Ceedling itself is skewed towards supporting testing though Ceedling can, of course, build your binary release artifact as well. Note that complex binary release artifacts (e.g. application + bootloader or multiple libraries) are beyond Ceedling&apos;s release build ability.</para>
</listitem></itemizedlist>
</para>
<para>Conventions / features of Ceedling-specific YAML:</para>
<para><itemizedlist>
<listitem><para>Any second tier setting keys anywhere in YAML whose names end in <computeroutput>_path</computeroutput> or <computeroutput>_paths</computeroutput> are automagically processed like all Ceedling-specific paths in the YAML to have consistent directory separators (i.e. &quot;/&quot;) and to take advantage of inline Ruby string expansion (see [:environment] setting below for further explanation of string expansion).</para>
</listitem></itemizedlist>
</para>
<para><bold>Let&apos;s Be Careful Out There:</bold> Ceedling performs validation on the values you set in your configuration file (this assumes your YAML is correct and will not fail format parsing, of course). That said, validation is limited to only those settings Ceedling uses and those that can be reasonably validated. Ceedling does not limit what can exist within your configuration file. In this way, you can take full advantage of YAML as well as add sections and values for use in your own custom plugins (documented later). The consequence of this is simple but important. A misspelled configuration section name or value name is unlikely to cause Ceedling any trouble. Ceedling will happily process that section or value and simply use the properly spelled default maintained internally - thus leading to unexpected behavior without warning.</para>
<para>project: global project settings</para>
<para><itemizedlist>
<listitem><para><computeroutput>build_root</computeroutput>:</para>
<para>Top level directory into which generated path structure and files are placed. Note: this is one of the handful of configuration values that must be set. The specified path can be absolute or relative to your working directory.</para>
<para><bold>Default</bold>: (none)</para>
</listitem><listitem><para><computeroutput>use_exceptions</computeroutput>:</para>
<para>Configures the build environment to make use of CException. Note that if you do not use exceptions, there&apos;s no harm in leaving this as its default value.</para>
<para><bold>Default</bold>: TRUE</para>
</listitem><listitem><para><computeroutput>use_mocks</computeroutput>:</para>
<para>Configures the build environment to make use of CMock. Note that if you do not use mocks, there&apos;s no harm in leaving this setting as its default value.</para>
<para><bold>Default</bold>: TRUE</para>
</listitem><listitem><para><computeroutput>use_test_preprocessor</computeroutput>:</para>
<para>This option allows Ceedling to work with test files that contain conditional compilation statements (e.g. #ifdef) and header files you wish to mock that contain conditional preprocessor statements and/or macros.</para>
<para>Ceedling and CMock are advanced tools with sophisticated parsers. However, they do not include entire C language preprocessors. Consequently, with this option enabled, Ceedling will use gcc&apos;s preprocessing mode and the cpp preprocessor tool to strip down / expand test files and headers to their applicable content which can then be processed by Ceedling and CMock.</para>
<para>With this option enabled, the gcc &amp; cpp tools must exist in an accessible system search path and test runner files are always regenerated.</para>
<para><bold>Default</bold>: FALSE</para>
</listitem><listitem><para><computeroutput>use_deep_dependencies</computeroutput>:</para>
<para>The base rules and tasks that Ceedling creates using Rake capture most of the dependencies within a standard project (e.g. when the source file accompanying a test file changes, the corresponding test fixture executable will be rebuilt when tests are re-run). However, deep dependencies cannot be captured this way. If a typedef or macro changes in a header file three levels of #include statements deep, this option allows the appropriate incremental build actions to occur for both test execution and release builds.</para>
<para>This is accomplished by using the dependencies discovery mode of gcc. With this option enabled, gcc must exist in an accessible system search path.</para>
<para><bold>Default</bold>: FALSE</para>
</listitem><listitem><para><computeroutput>generate_deep_dependencies</computeroutput>:</para>
<para>When <computeroutput>use_deep_dependencies</computeroutput> is set to TRUE, Ceedling will run a separate build step to generate the deep dependencies. If you are using gcc as your primary compiler, or another compiler that can generate makefile rules as a side effect of compilation, then you can set this to FALSE to avoid the extra build step but still use the deep dependencies data when deciding which source files to rebuild.</para>
<para><bold>Default</bold>: TRUE</para>
</listitem><listitem><para><computeroutput>test_file_prefix</computeroutput>:</para>
<para>Ceedling collects test files by convention from within the test file search paths. The convention includes a unique name prefix and a file extension matching that of source files.</para>
<para>Why not simply recognize all files in test directories as test files? By using the given convention, we have greater flexibility in what we do with C files in the test directories.</para>
<para><bold>Default</bold>: &quot;test_&quot;</para>
</listitem><listitem><para><computeroutput>options_paths</computeroutput>:</para>
<para>Just as you may have various build configurations for your source codebase, you may need variations of your project configuration.</para>
<para>By specifying options paths, Ceedling will search for other project YAML files, make command line tasks available (ceedling options:variation for a variation.yml file), and merge the project configuration of these option files in with the main project file at runtime. See advanced topics.</para>
<para>Note these Rake tasks at the command line - like verbosity or logging control - must come before the test or release task they are meant to modify.</para>
<para><bold>Default</bold>: [] (empty)</para>
</listitem><listitem><para><computeroutput>release_build</computeroutput>:</para>
<para>When enabled, a release Rake task is exposed. This configuration option requires a corresponding release compiler and linker to be defined (gcc is used as the default).</para>
<para>More release configuration options are available in the release_build section.</para>
<para><bold>Default</bold>: FALSE</para>
</listitem></itemizedlist>
</para>
<para>Example <computeroutput>[:project]</computeroutput> YAML blurb</para>
<para><programlisting filename=".yaml"><codeline><highlight class="normal">:project:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>:build_root:<sp/>project_awesome/build</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>:use_exceptions:<sp/>FALSE</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>:use_test_preprocessor:<sp/>TRUE</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>:use_deep_dependencies:<sp/>TRUE</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>:options_paths:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>project/options</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>external/shared/options</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>:release_build:<sp/>TRUE</highlight></codeline>
</programlisting></para>
<para>Ceedling is primarily concerned with facilitating the somewhat complicated mechanics of automating unit tests. The same mechanisms are easily capable of building a final release binary artifact (i.e. non test code; the thing that is your final working software that you execute on target hardware).</para>
<para><itemizedlist>
<listitem><para><computeroutput>output</computeroutput>:</para>
<para>The name of your release build binary artifact to be found in &lt;build
  path&gt;/artifacts/release. Ceedling sets the default artifact file extension to that as is explicitly specified in the [:extensions] section or as is system specific otherwise.</para>
<para><bold>Default</bold>: <computeroutput>project.exe</computeroutput> or <computeroutput>project.out</computeroutput></para>
</listitem><listitem><para><computeroutput>use_assembly</computeroutput>:</para>
<para>If assembly code is present in the source tree, this option causes Ceedling to create appropriate build directories and use an assembler tool (default is the GNU tool as - override available in the [:tools] section.</para>
<para><bold>Default</bold>: FALSE</para>
</listitem><listitem><para><computeroutput>artifacts</computeroutput>:</para>
<para>By default, Ceedling copies to the &lt;build path&gt;/artifacts/release directory the output of the release linker and (optionally) a map file. Many toolchains produce other important output files as well. Adding a file path to this list will cause Ceedling to copy that file to the artifacts directory. The artifacts directory is helpful for organizing important build output files and provides a central place for tools such as Continuous Integration servers to point to build output. Selectively copying files prevents incidental build cruft from needlessly appearing in the artifacts directory. Note that inline Ruby string replacement is available in the artifacts paths (see discussion in the [:environment] section).</para>
<para><bold>Default</bold>: [] (empty)</para>
</listitem></itemizedlist>
</para>
<para>Example <computeroutput>[:release_build]</computeroutput> YAML blurb</para>
<para><programlisting filename=".yaml"><codeline><highlight class="normal">:release_build:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>:output:<sp/>top_secret.bin</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>:use_assembly:<sp/>TRUE</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>:artifacts:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>build/release/out/c/top_secret.s19</highlight></codeline>
</programlisting></para>
<para><bold>paths</bold>: options controlling search paths for source and header (and assembly) files</para>
<para><itemizedlist>
<listitem><para><computeroutput>test</computeroutput>:</para>
<para>All C files containing unit test code. Note: this is one of the handful of configuration values that must be set.</para>
<para><bold>Default</bold>: [] (empty)</para>
</listitem><listitem><para><computeroutput>source</computeroutput>:</para>
<para>All C files containing release code (code to be tested). Note: this is one of the handful of configuration values that must be set.</para>
<para><bold>Default</bold>: [] (empty)</para>
</listitem><listitem><para><computeroutput>support</computeroutput>:</para>
<para>Any C files you might need to aid your unit testing. For example, on occasion, you may need to create a header file containing a subset of function signatures matching those elsewhere in your code (e.g. a subset of your OS functions, a portion of a library API, etc.). Why? To provide finer grained control over mock function substitution or limiting the size of the generated mocks.</para>
<para><bold>Default</bold>: [] (empty)</para>
</listitem><listitem><para><computeroutput>include</computeroutput>:</para>
<para>Any header files not already in the source search path. Note there&apos;s no practical distinction between this search path and the source search path; it&apos;s merely to provide options or to support any peculiar source tree organization.</para>
<para><bold>Default</bold>: [] (empty)</para>
</listitem><listitem><para><computeroutput>test_toolchain_include</computeroutput>:</para>
<para>System header files needed by the test toolchain - should your compiler be unable to find them, finds the wrong system include search path, or you need a creative solution to a tricky technical problem. Note that if you configure your own toolchain in the [:tools] section, this search path is largely meaningless to you. However, this is a convenient way to control the system include path should you rely on the default gcc tools.</para>
<para><bold>Default</bold>: [] (empty)</para>
</listitem><listitem><para><computeroutput>release_toolchain_include</computeroutput>:</para>
<para>Same as preceding albeit related to the release toolchain.</para>
<para><bold>Default</bold>: [] (empty)</para>
</listitem><listitem><para><computeroutput>&lt;custom&gt;</computeroutput></para>
<para>Any paths you specify for custom list. List is available to tool configurations and/or plugins. Note a distinction. The preceding names are recognized internally to Ceedling and the path lists are used to build collections of files contained in those paths. A custom list is just that - a custom list of paths.</para>
</listitem></itemizedlist>
</para>
<para>Notes on path grammar within the [:paths] section:</para>
<para><itemizedlist>
<listitem><para>Order of search paths listed in [:paths] is preserved when used by an entry in the [:tools] section</para>
</listitem><listitem><para>Wherever multiple path lists are combined for use Ceedling prioritizes path groups as follows: test paths, support paths, source paths, include paths.</para>
<para>This can be useful, for instance, in certain testing scenarios where we desire Ceedling or the compiler to find a stand-in header file before the actual source header file of the same name.</para>
</listitem><listitem><para>Paths:<orderedlist>
<listitem><para>can be absolute or relative</para>
</listitem><listitem><para>can be singly explicit - a single fully specified path</para>
</listitem><listitem><para>can include a glob operator (more on this below)</para>
</listitem><listitem><para>can use inline Ruby string replacement (see [:environment] section for more)</para>
</listitem><listitem><para>default as an addition to a specific search list (more on this in the examples)</para>
</listitem><listitem><para>can act to subtract from a glob included in the path list (more on this in the examples)</para>
</listitem></orderedlist>
</para>
</listitem></itemizedlist>
</para>
<para><ulink url="http://ruby.about.com/od/beginningruby/a/dir2.htm">Globs</ulink> as used by Ceedling are wildcards for specifying directories without the need to list each and every required search path. Ceedling globs operate just as Ruby globs except that they are limited to matching directories and not files. Glob operators include the following * ** ? [-] {,} (note: this list is space separated and not comma separated as commas are used within the bracket operators).</para>
<para><itemizedlist>
<listitem><para><computeroutput>*</computeroutput>:</para>
<para>All subdirectories of depth 1 below the parent path and including the parent path</para>
</listitem><listitem><para><computeroutput>**</computeroutput>:</para>
<para>All subdirectories recursively discovered below the parent path and including the parent path</para>
</listitem><listitem><para><computeroutput>?</computeroutput>:</para>
<para>Single alphanumeric character wildcard</para>
</listitem><listitem><para><computeroutput>[x-y]</computeroutput>:</para>
<para>Single alphanumeric character as found in the specified range</para>
</listitem><listitem><para><computeroutput>{x,y}</computeroutput>:</para>
<para>Single alphanumeric character from the specified list</para>
</listitem></itemizedlist>
</para>
<para>Example [:paths] YAML blurbs</para>
<para><programlisting filename=".yaml"><codeline><highlight class="normal">:paths:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>:source:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#together<sp/>the<sp/>following<sp/>comprise<sp/>all<sp/>source<sp/>search<sp/>paths</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>project/source/*<sp/><sp/>#expansion<sp/>yields<sp/>all<sp/>subdirectories<sp/>of<sp/>depth<sp/>1<sp/>plus<sp/>parent<sp/>directory</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>project/lib<sp/><sp/><sp/><sp/><sp/><sp/><sp/>#single<sp/>path</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>:test:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#all<sp/>test<sp/>search<sp/>paths</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>project/**/test?<sp/><sp/>#expansion<sp/>yields<sp/>any<sp/>subdirectory<sp/>found<sp/>anywhere<sp/>in<sp/>the<sp/>project<sp/>that</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#begins<sp/>with<sp/>&quot;test&quot;<sp/>and<sp/>contains<sp/>5<sp/>characters</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">:paths:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>:source:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#all<sp/>source<sp/>search<sp/>paths</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>+:project/source/**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#all<sp/>subdirectories<sp/>recursively<sp/>discovered<sp/>plus<sp/>parent<sp/>directory</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>-:project/source/os/generated<sp/><sp/>#subtract<sp/>os/generated<sp/>directory<sp/>from<sp/>expansion<sp/>of<sp/>above<sp/>glob</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#note<sp/>that<sp/>&apos;+:&apos;<sp/>notation<sp/>is<sp/>merely<sp/>aesthetic;<sp/>default<sp/>is<sp/>to<sp/>add</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>:test:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#all<sp/>test<sp/>search<sp/>paths</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>project/test/bootloader<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#explicit,<sp/>single<sp/>search<sp/>paths<sp/>(searched<sp/>in<sp/>the<sp/>order<sp/>specified)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>project/test/application</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>project/test/utilities</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>:custom:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#custom<sp/>path<sp/>list</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>&quot;#{PROJECT_ROOT}/other&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#inline<sp/>Ruby<sp/>string<sp/>expansion</highlight></codeline>
</programlisting></para>
<para>Globs and inline Ruby string expansion can require trial and error to arrive at your intended results. Use the <computeroutput>ceedling paths:*</computeroutput> command line options (documented in preceding section) to verify your settings.</para>
<para>Ceedling relies on file collections automagically assembled from paths, globs, and file extensions. File collections greatly simplify project set up. However, sometimes you need to remove from or add individual files to those collections.</para>
<para><itemizedlist>
<listitem><para><computeroutput>test</computeroutput>:</para>
<para>Modify the collection of unit test C files.</para>
<para><bold>Default</bold>: [] (empty)</para>
</listitem><listitem><para><computeroutput>source</computeroutput>:</para>
<para>Modify the collection of all source files used in unit test builds and release builds.</para>
<para><bold>Default</bold>: [] (empty)</para>
</listitem><listitem><para><computeroutput>assembly</computeroutput>:</para>
<para>Modify the (optional) collection of assembly files used in release builds.</para>
<para><bold>Default</bold>: [] (empty)</para>
</listitem><listitem><para><computeroutput>include</computeroutput>:</para>
<para>Modify the collection of all source header files used in unit test builds (e.g. for mocking) and release builds.</para>
<para><bold>Default</bold>: [] (empty)</para>
</listitem><listitem><para><computeroutput>support</computeroutput>:</para>
<para>Modify the collection of supporting C files available to unit tests builds.</para>
<para><bold>Default</bold>: [] (empty)</para>
</listitem></itemizedlist>
</para>
<para>Note: All path grammar documented in [:paths] section applies to [:files] path entries - albeit at the file path level and not the directory level.</para>
<para>Example [:files] YAML blurb</para>
<para><programlisting filename=".yaml"><codeline><highlight class="normal">:files:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>:source:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>callbacks/comm.c<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>entry<sp/>defaults<sp/>to<sp/>file<sp/>addition</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>+:callbacks/comm*.c<sp/><sp/><sp/><sp/><sp/>#<sp/>add<sp/>all<sp/>comm<sp/>files<sp/>matching<sp/>glob<sp/>pattern</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>-:source/board/atm134.c<sp/>#<sp/>not<sp/>our<sp/>board</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>:test:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>-:test/io/test_output_manager.c<sp/>#<sp/>remove<sp/>unit<sp/>tests<sp/>from<sp/>test<sp/>build</highlight></codeline>
</programlisting></para>
<para><bold>environment:</bold> inserts environment variables into the shell instance executing configured tools</para>
<para>Ceedling creates environment variables from any key / value pairs in the environment section. Keys become an environment variable name in uppercase. The values are strings assigned to those environment variables. These value strings are either simple string values in YAML or the concatenation of a YAML array.</para>
<para>Ceedling is able to execute inline Ruby string substitution code to set environment variables. This evaluation occurs when the project file is first processed for any environment pair&apos;s value string including the Ruby string substitution pattern <computeroutput>#{…}</computeroutput>. Note that environment value strings that <emphasis>begin</emphasis> with this pattern should always be enclosed in quotes. YAML defaults to processing unquoted text as a string; quoting text is optional. If an environment pair&apos;s value string begins with the Ruby string substitution pattern, YAML will interpret the string as a Ruby comment (because of the <computeroutput>#</computeroutput>). Enclosing each environment value string in quotes is a safe practice.</para>
<para>[:environment] entries are processed in the configured order (later entries can reference earlier entries).</para>
<para>Special case: PATH handling</para>
<para>In the specific case of specifying an environment key named <emphasis>path</emphasis>, an array of string values will be concatenated with the appropriate platform-specific path separation character (e.g. &apos;:&apos; on *nix, &apos;;&apos; on Windows). All other instances of environment keys assigned YAML arrays use simple concatenation.</para>
<para>Example [:environment] YAML blurb</para>
<para><programlisting filename=".yaml"><codeline><highlight class="normal">:environment:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>-<sp/>:license_server:<sp/>gizmo.intranet<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#LICENSE_SERVER<sp/>set<sp/>with<sp/>value<sp/>&quot;gizmo.intranet&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>-<sp/>:license:<sp/>&quot;#{`license.exe`}&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#LICENSE<sp/>set<sp/>to<sp/>string<sp/>generated<sp/>from<sp/>shelling<sp/>out<sp/>to</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#execute<sp/>license.exe;<sp/>note<sp/>use<sp/>of<sp/>enclosing<sp/>quotes</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>-<sp/>:path:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#concatenated<sp/>with<sp/>path<sp/>separator<sp/>(see<sp/>special<sp/>case<sp/>above)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>-<sp/>Tools/gizmo/bin<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#prepend<sp/>existing<sp/>PATH<sp/>with<sp/>gizmo<sp/>path</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>-<sp/>&quot;#{ENV[&apos;PATH&apos;]}&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#pattern<sp/>#{…}<sp/>triggers<sp/>ruby<sp/>evaluation<sp/>string<sp/>substitution</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#note:<sp/>value<sp/>string<sp/>must<sp/>be<sp/>quoted<sp/>because<sp/>of<sp/>&apos;#&apos;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>-<sp/>:logfile:<sp/>system/logs/thingamabob.log<sp/><sp/>#LOGFILE<sp/>set<sp/>with<sp/>path<sp/>for<sp/>a<sp/>log<sp/>file</highlight></codeline>
</programlisting></para>
<para><bold>extension</bold>: configure file name extensions used to collect lists of files searched in [:paths]</para>
<para><itemizedlist>
<listitem><para><computeroutput>header</computeroutput>:</para>
<para>C header files</para>
<para><bold>Default</bold>: .h</para>
</listitem><listitem><para><computeroutput>source</computeroutput>:</para>
<para>C code files (whether source or test files)</para>
<para><bold>Default</bold>: .c</para>
</listitem><listitem><para><computeroutput>assembly</computeroutput>:</para>
<para>Assembly files (contents wholly assembly instructions)</para>
<para><bold>Default</bold>: .s</para>
</listitem><listitem><para><computeroutput>object</computeroutput>:</para>
<para>Resulting binary output of C code compiler (and assembler)</para>
<para><bold>Default</bold>: .o</para>
</listitem><listitem><para><computeroutput>executable</computeroutput>:</para>
<para>Binary executable to be loaded and executed upon target hardware</para>
<para><bold>Default</bold>: .exe or .out (Win or *nix)</para>
</listitem><listitem><para><computeroutput>testpass</computeroutput>:</para>
<para>Test results file (not likely to ever need a new value)</para>
<para><bold>Default</bold>: .pass</para>
</listitem><listitem><para><computeroutput>testfail</computeroutput>:</para>
<para>Test results file (not likely to ever need a new value)</para>
<para><bold>Default</bold>: .fail</para>
</listitem><listitem><para><computeroutput>dependencies</computeroutput>:</para>
<para>File containing make-style dependency rules created by gcc preprocessor</para>
<para><bold>Default</bold>: .d</para>
</listitem></itemizedlist>
</para>
<para>Example [:extension] YAML blurb <verbatim>:extension:
  :source: .cc
  :executable: .bin
</verbatim> <bold>defines</bold>: command line defines used in test and release compilation by configured tools</para>
<para><itemizedlist>
<listitem><para><computeroutput>test</computeroutput>:</para>
<para>Defines needed for testing. Useful for:<orderedlist>
<listitem><para>test files containing conditional compilation statements (i.e. tests active in only certain contexts)</para>
</listitem><listitem><para>testing legacy source wherein the isolation of source under test afforded by Ceedling and its complementary tools leaves certain symbols unset when source files are compiled in isolation</para>
</listitem></orderedlist>
</para>
<para><bold>Default</bold>: [] (empty)</para>
</listitem><listitem><para><computeroutput>test_preprocess</computeroutput>:</para>
<para>If [:project][:use_test_preprocessor] or [:project][:use_deep_dependencies] is set and code is structured in a certain way, the gcc preprocessor may need symbol definitions to properly preprocess files to extract function signatures for mocking and extract deep dependencies for incremental builds.</para>
<para><bold>Default</bold>: [] (empty)</para>
</listitem><listitem><para><computeroutput>release</computeroutput>:</para>
<para>Defines needed for the release build binary artifact.</para>
<para><bold>Default</bold>: [] (empty)</para>
</listitem><listitem><para><computeroutput>release_preprocess</computeroutput>:</para>
<para>If [:project][:use_deep_dependencies] is set and code is structured in a certain way, the gcc preprocessor may need symbol definitions to properly preprocess files for incremental release builds due to deep dependencies.</para>
<para><bold>Default</bold>: [] (empty)</para>
</listitem></itemizedlist>
</para>
<para>Example [:defines] YAML blurb</para>
<para><programlisting filename=".yaml"><codeline><highlight class="normal">:defines:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>:test:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>UNIT_TESTING<sp/><sp/>#for<sp/>select<sp/>cases<sp/>in<sp/>source<sp/>to<sp/>allow<sp/>testing<sp/>with<sp/>a<sp/>changed<sp/>behavior<sp/>or<sp/>interface</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>OFF=0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>ON=1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>FEATURE_X=ON</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>:source:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>FEATURE_X=ON</highlight></codeline>
</programlisting></para>
<para><bold>libraries</bold>: command line defines used in test and release compilation by configured tools</para>
<para>Ceedling allows you to pull in specific libraries for the purpose of release and test builds. It has a few levels of support for this. Start by adding a :libraries main section in your configuration. In this section, you can optionally have the following subsections:</para>
<para><itemizedlist>
<listitem><para><computeroutput>test</computeroutput>:</para>
<para>Library files that should be injected into your tests when linking occurs. These can be specified as either relative or absolute paths. These files MUST exist when the test attempts to build.</para>
</listitem><listitem><para><computeroutput>source</computeroutput>:</para>
<para>Library files that should be injected into your release when linking occurs. These can be specified as either relative or absolute paths. These files MUST exist when the release attempts to build UNLESS you are using the subprojects plugin. In that case, it will attempt to build that library for you as a dynamic dependency.</para>
</listitem><listitem><para><computeroutput>system</computeroutput>:</para>
<para>These libraries are assumed to be in the tool path somewhere and shouldn&apos;t need to be specified. The libraries added here will be injected into releases and tests.</para>
</listitem><listitem><para><computeroutput>flag</computeroutput>:</para>
<para>This is the method of adding an argument for each library. For example, gcc really likes it when you specify “-l${1}”</para>
</listitem></itemizedlist>
</para>
<para>Notes:</para>
<para><itemizedlist>
<listitem><para>If you&apos;ve specified your own link step, you are going to want to add ${4} to your argument list in the place where library files should be added to the command call. For gcc, this is often the very end. Other tools may vary.</para>
</listitem></itemizedlist>
</para>
<para><bold>flags</bold>: configure per-file compilation and linking flags</para>
<para>Ceedling tools (see later [:tools] section) are used to configure compilation and linking of test and source files. These tool configurations are a one-size-fits-all approach. Should individual files require special compilation or linking flags, the settings in the [:flags] section work in conjunction with tool definitions by way of argument substitution to achieve this.</para>
<para><itemizedlist>
<listitem><para><computeroutput>release</computeroutput>:</para>
<para>[:compile] or [:link] flags for release build</para>
</listitem><listitem><para><computeroutput>test</computeroutput>:</para>
<para>[:compile] or [:link] flags for test build</para>
</listitem></itemizedlist>
</para>
<para>Notes:</para>
<para><itemizedlist>
<listitem><para>Ceedling works with the [:release] and [:test] build contexts as-is; plugins can add additional contexts</para>
</listitem><listitem><para>Only [:compile] and [:link] are recognized operations beneath a context</para>
</listitem><listitem><para>File specifiers do not include a path or file extension</para>
</listitem><listitem><para>File specifiers are case sensitive (must match original file name)</para>
</listitem><listitem><para>File specifiers do support regular expressions if encased in quotes</para>
</listitem><listitem><para>&apos;*&apos; is a special (optional) file specifier to provide flags to all files not otherwise specified</para>
</listitem></itemizedlist>
</para>
<para>Example [:flags] YAML blurb</para>
<para><programlisting filename=".yaml"><codeline><highlight class="normal">:flags:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>:release:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>:compile:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:main:<sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>add<sp/>&apos;-Wall&apos;<sp/>to<sp/>compilation<sp/>of<sp/>main.c</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>-Wall</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:fan:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>add<sp/>&apos;--O2&apos;<sp/>to<sp/>compilation<sp/>of<sp/>fan.c</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>--O2</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:&apos;test_.+&apos;:<sp/><sp/><sp/>#<sp/>add<sp/>&apos;-pedantic&apos;<sp/>to<sp/>all<sp/>test-files</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>-pedantic</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:*:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>add<sp/>&apos;-foo&apos;<sp/>to<sp/>compilation<sp/>of<sp/>all<sp/>files<sp/>not<sp/>main.c<sp/>or<sp/>fan.c</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>-foo</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>:test:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>:compile:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:main:<sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>add<sp/>&apos;--O1&apos;<sp/>to<sp/>compilation<sp/>of<sp/>main.c<sp/>as<sp/>part<sp/>of<sp/>test<sp/>builds<sp/>including<sp/>main.c</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>--O1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>:link:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:test_main:<sp/><sp/>#<sp/>add<sp/>&apos;--bar<sp/>--baz&apos;<sp/>to<sp/>linking<sp/>of<sp/>test_main.exe</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>--bar</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>--baz</highlight></codeline>
</programlisting></para>
<para>Ceedling sets values for a subset of CMock settings. All CMock options are available to be set, but only those options set by Ceedling in an automated fashion are documented below. See CMock documentation.</para>
<para><bold>cmock</bold>: configure CMock&apos;s code generation options and set symbols used to modify CMock&apos;s compiled features Ceedling sets values for a subset of CMock settings. All CMock options are available to be set, but only those options set by Ceedling in an automated fashion are documented below. See CMock documentation.</para>
<para><itemizedlist>
<listitem><para><computeroutput>enforce_strict_ordering</computeroutput>:</para>
<para>Tests fail if expected call order is not same as source order</para>
<para><bold>Default</bold>: TRUE</para>
</listitem><listitem><para><computeroutput>mock_path</computeroutput>:</para>
<para>Path for generated mocks</para>
<para><bold>Default</bold>: &lt;build path&gt;/tests/mocks</para>
</listitem><listitem><para><computeroutput>defines</computeroutput>:</para>
<para>List of conditional compilation symbols used to configure CMock&apos;s compiled features. See CMock documentation to understand available options. No symbols must be set unless defaults are inappropriate for your specific environment. All symbols are used only by Ceedling to compile CMock C code; contents of [:defines] are ignored by CMock&apos;s Ruby code when instantiated.</para>
<para><bold>Default</bold>: [] (empty)</para>
</listitem><listitem><para><computeroutput>verbosity</computeroutput>:</para>
<para>If not set, defaults to Ceedling&apos;s verbosity level</para>
</listitem><listitem><para><computeroutput>plugins</computeroutput>:</para>
<para>If [:project][:use_exceptions] is enabled, the internal plugins list is pre-populated with &apos;cexception&apos;.</para>
<para>Whether or not you have included [:cmock][:plugins] in your configuration file, Ceedling automatically adds &apos;cexception&apos; to the plugin list if exceptions are enabled. To add to the list Ceedling provides CMock, simply add [:cmock][:plugins] to your configuration and specify your desired additional plugins.</para>
</listitem><listitem><para><computeroutput>includes</computeroutput>:</para>
<para>If [:cmock][:unity_helper] set, pre-populated with unity_helper file name (no path).</para>
<para>The [:cmock][:includes] list works identically to the plugins list above with regard to adding additional files to be inserted within mocks as #include statements.</para>
</listitem></itemizedlist>
</para>
<para>The last four settings above are directly tied to other Ceedling settings; hence, why they are listed and explained here. The first setting above, [:enforce_strict_ordering], defaults to FALSE within CMock. It is set to TRUE by default in Ceedling as our way of encouraging you to use strict ordering. It&apos;s a teeny bit more expensive in terms of code generated, test execution time, and complication in deciphering test failures. However, it&apos;s good practice. And, of course, you can always disable it by overriding the value in the Ceedling YAML configuration file.</para>
<para><bold>cexception</bold>: configure symbols used to modify CException&apos;s compiled features</para>
<para><itemizedlist>
<listitem><para><computeroutput>defines</computeroutput>:</para>
<para>List of conditional compilation symbols used to configure CException&apos;s features in its source and header files. See CException documentation to understand available options. No symbols must be set unless the defaults are inappropriate for your specific environment.</para>
<para><bold>Default</bold>: [] (empty)</para>
</listitem></itemizedlist>
</para>
<para><bold>unity</bold>: configure symbols used to modify Unity&apos;s compiled features</para>
<para><itemizedlist>
<listitem><para><computeroutput>defines</computeroutput>:</para>
<para>List of conditional compilation symbols used to configure Unity&apos;s features in its source and header files. See Unity documentation to understand available options. No symbols must be set unless the defaults are inappropriate for your specific environment. Most Unity defines can be easily configured through the YAML file.</para>
<para><bold>Default</bold>: [] (empty)</para>
</listitem></itemizedlist>
</para>
<para>Example [:unity] YAML blurbs <programlisting filename=".yaml"><codeline><highlight class="normal">:unity:<sp/>#itty<sp/>bitty<sp/>processor<sp/>&amp;<sp/>toolchain<sp/>with<sp/>limited<sp/>test<sp/>execution<sp/>options</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>:defines:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>UNITY_INT_WIDTH=16<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#16<sp/>bit<sp/>processor<sp/>without<sp/>support<sp/>for<sp/>32<sp/>bit<sp/>instructions</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>UNITY_EXCLUDE_FLOAT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#no<sp/>floating<sp/>point<sp/>unit</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">:unity:<sp/>#great<sp/>big<sp/>gorilla<sp/>processor<sp/>that<sp/>grunts<sp/>and<sp/>scratches</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>:defines:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>UNITY_SUPPORT_64<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#big<sp/>memory,<sp/>big<sp/>counters,<sp/>big<sp/>registers</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>UNITY_LINE_TYPE=\&quot;unsigned<sp/>int\&quot;<sp/><sp/><sp/><sp/>#apparently<sp/>we&apos;re<sp/>using<sp/>really<sp/>long<sp/>test<sp/>files,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>UNITY_COUNTER_TYPE=\&quot;unsigned<sp/>int\&quot;<sp/>#and<sp/>we&apos;ve<sp/>got<sp/>a<sp/>ton<sp/>of<sp/>test<sp/>cases<sp/>in<sp/>those<sp/>test<sp/>files</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>UNITY_FLOAT_TYPE=\&quot;double\&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#you<sp/>betcha</highlight></codeline>
</programlisting></para>
<para>Notes on Unity configuration:</para>
<para><itemizedlist>
<listitem><para><bold>Verification</bold> - Ceedling does no verification of your configuration values. In a properly configured setup, your Unity configuration values are processed, collected together with any test define symbols you specify elsewhere, and then passed to your toolchain during test compilation. Unity&apos;s conditional compilation statements, your toolchain&apos;s preprocessor, and/or your toolchain&apos;s compiler will complain appropriately if your specified configuration values are incorrect, incomplete, or incompatible.</para>
</listitem><listitem><para><bold>Routing $stdout</bold> - Unity defaults to using <computeroutput>putchar()</computeroutput> in C&apos;s standard library to display test results. For more exotic environments than a desktop with a terminal (e.g. running tests directly on a non-PC target), you have options. For example, you could create a routine that transmits a character via RS232 or USB. Once you have that routine, you can replace <computeroutput>putchar()</computeroutput> calls in Unity by overriding the function-like macro <computeroutput>UNITY_OUTPUT_CHAR</computeroutput>. Consult your toolchain and shell documentation. Eventhough this can also be defined in the YAML file most shell environments do not handle parentheses as command line arguments very well. To still be able to add this functionality all necessary options can be defined in the <computeroutput>unity_config.h</computeroutput>. Unity needs to be told to look for the <computeroutput>unity_config.h</computeroutput> in the YAML file, though.</para>
</listitem></itemizedlist>
</para>
<para>Example [:unity] YAML blurbs <programlisting filename=".yaml"><codeline><highlight class="normal">:unity:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>:defines:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>UNITY_INCLUDE_CONFIG_H</highlight></codeline>
</programlisting></para>
<para>Example unity_config.h <programlisting><codeline><highlight class="normal">#ifndef<sp/>UNITY_CONFIG_H</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>UNITY_CONFIG_H</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;uart_output.h&quot;<sp/>//Helper<sp/>library<sp/>for<sp/>your<sp/>custom<sp/>environment</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#define<sp/>UNITY_INT_WIDTH<sp/>16</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>UNITY_OUTPUT_START()<sp/>uart_init(F_CPU,<sp/>BAUD)<sp/>//Helperfunction<sp/>to<sp/>init<sp/>UART</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>UNITY_OUTPUT_CHAR(a)<sp/>uart_putchar(a)<sp/>//Helperfunction<sp/>to<sp/>forward<sp/>char<sp/>via<sp/>UART</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>UNITY_OUTPUT_COMPLETE()<sp/>uart_complete()<sp/>//Helperfunction<sp/>to<sp/>inform<sp/>that<sp/>test<sp/>has<sp/>ended</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#endif</highlight></codeline>
</programlisting></para>
<para><bold>tools</bold>: a means for representing command line tools for use under Ceedling&apos;s automation framework</para>
<para>Ceedling requires a variety of tools to work its magic. By default, the GNU toolchain (gcc, cpp, as) are configured and ready for use with no additions to the project configuration YAML file. However, as most work will require a project-specific toolchain, Ceedling provides a generic means for specifying / overriding tools.</para>
<para><itemizedlist>
<listitem><para><computeroutput>test_compiler</computeroutput>:</para>
<para>Compiler for test &amp; source-under-test code ${1}: input source ${2}: output object ${3}: optional output list ${4}: optional output dependencies file</para>
<para><bold>Default</bold>: gcc</para>
</listitem><listitem><para><computeroutput>test_linker</computeroutput>:</para>
<para>Linker to generate test fixture executables ${1}: input objects ${2}: output binary ${3}: optional output map ${4}: optional library list</para>
<para><bold>Default</bold>: gcc</para>
</listitem><listitem><para><computeroutput>test_fixture</computeroutput>:</para>
<para>Executable test fixture ${1}: simulator as executable with ${1} as input binary file argument or native test executable</para>
<para><bold>Default</bold>: ${1}</para>
</listitem><listitem><para><computeroutput>test_includes_preprocessor</computeroutput>:</para>
<para>Extractor of #include statements ${1}: input source file</para>
<para><bold>Default</bold>: cpp</para>
</listitem><listitem><para><computeroutput>test_file_preprocessor</computeroutput>:</para>
<para>Preprocessor of test files (macros, conditional compilation statements) ${1}: input source file ${2}: preprocessed output source file</para>
<para><bold>Default</bold>: gcc</para>
</listitem><listitem><para><computeroutput>test_dependencies_generator</computeroutput>:</para>
<para>Discovers deep dependencies of source &amp; test (for incremental builds) ${1}: input source file ${2}: compiled object filepath ${3}: output dependencies file</para>
<para><bold>Default</bold>: gcc</para>
</listitem><listitem><para><computeroutput>release_compiler</computeroutput>:</para>
<para>Compiler for release source code ${1}: input source ${2}: output object ${3}: optional output list ${4}: optional output dependencies file</para>
<para><bold>Default</bold>: gcc</para>
</listitem><listitem><para><computeroutput>release_assembler</computeroutput>:</para>
<para>Assembler for release assembly code ${1}: input assembly source file ${2}: output object file</para>
<para><bold>Default</bold>: as</para>
</listitem><listitem><para><computeroutput>release_linker</computeroutput>:</para>
<para>Linker for release source code ${1}: input objects ${2}: output binary ${3}: optional output map ${4}: optional library list</para>
<para><bold>Default</bold>: gcc</para>
</listitem><listitem><para><computeroutput>release_dependencies_generator</computeroutput>:</para>
<para>Discovers deep dependencies of source files (for incremental builds) ${1}: input source file ${2}: compiled object filepath ${3}: output dependencies file</para>
<para><bold>Default</bold>: gcc</para>
</listitem></itemizedlist>
</para>
<para>A Ceedling tool has a handful of configurable elements:</para>
<para><orderedlist>
<listitem><para>[:executable] (required) - Command line executable having the form of:</para>
</listitem><listitem><para>[:arguments] (required) - List of command line arguments and substitutions</para>
</listitem><listitem><para>[:name] - Simple name (e.g. &quot;nickname&quot;) of tool beyond its executable name (if not explicitly set then Ceedling will form a name from the tool&apos;s YAML entry name)</para>
</listitem><listitem><para>[:stderr_redirect] - Control of capturing $stderr messages {:none, :auto, :win, :unix, :tcsh}. Defaults to :none if unspecified; create a custom entry by specifying a simple string instead of any of the available symbols.</para>
</listitem><listitem><para>[:background_exec] - Control execution as background process {:none, :auto, :win, :unix}. Defaults to :none if unspecified.</para>
</listitem></orderedlist>
</para>
</sect2>
<sect2 id="db/d5c/md__unit_test_framework_vendor_ceedling_docs__ceedling_packet_1autotoc_md11">
<title>Tool Element Runtime Substitution</title>
<para>To accomplish useful work on multiple files, a configured tool will most often require that some number of its arguments or even the executable itself change for each run. Consequently, every tool&apos;s argument list and executable field possess two means for substitution at runtime. Ceedling provides two kinds of inline Ruby execution and a notation for populating elements with dynamically gathered values within the build environment.</para>
</sect2>
<sect2 id="db/d5c/md__unit_test_framework_vendor_ceedling_docs__ceedling_packet_1autotoc_md12">
<title>Tool Element Runtime Substitution: Inline Ruby Execution</title>
<para>In-line Ruby execution works similarly to that demonstrated for the [:environment] section except that substitution occurs as the tool is executed and not at the time the configuration file is first scanned.</para>
<para><itemizedlist>
<listitem><para><computeroutput>#{...}</computeroutput>:</para>
<para>Ruby string substitution pattern wherein the containing string is expanded to include the string generated by Ruby code between the braces. Multiple instances of this expansion can occur within a single tool element entry string. Note that if this string substitution pattern occurs at the very beginning of a string in the YAML configuration the entire string should be enclosed in quotes (see the [:environment] section for further explanation on this point).</para>
</listitem><listitem><para><computeroutput>{...}</computeroutput>:</para>
<para>If an entire tool element string is enclosed with braces, it signifies that Ceedling should execute the Ruby code contained within those braces. Say you have a collection of paths on disk and some of those paths include spaces. Further suppose that a single tool that must use those paths requires those spaces to be escaped, but all other uses of those paths requires the paths to remain unchanged. You could use this Ceedling feature to insert Ruby code that iterates those paths and escapes those spaces in the array as used by the tool of this example.</para>
</listitem></itemizedlist>
</para>
</sect2>
<sect2 id="db/d5c/md__unit_test_framework_vendor_ceedling_docs__ceedling_packet_1autotoc_md13">
<title>Tool Element Runtime Substitution: Notational Substitution</title>
<para>A Ceedling tool&apos;s other form of dynamic substitution relies on a &apos;$&apos; notation. These &apos;$&apos; operators can exist anywhere in a string and can be decorated in any way needed. To use a literal &apos;$&apos;, escape it as &apos;\$&apos;.</para>
<para><itemizedlist>
<listitem><para><computeroutput>$</computeroutput>:</para>
<para>Simple substitution for value(s) globally available within the runtime (most often a string or an array).</para>
</listitem><listitem><para><computeroutput>${#}</computeroutput>:</para>
<para>When a Ceedling tool&apos;s command line is expanded from its configured representation and used within Ceedling Ruby code, certain calls to that tool will be made with a parameter list of substitution values. Each numbered substitution corresponds to a position in a parameter list. Ceedling Ruby code expects that configured compiler and linker tools will contain ${1} and ${2} replacement arguments. In the case of a compiler ${1} will be a C code file path, and ${2} will be the file path of the resulting object file. For a linker ${1} will be an array of object files to link, and ${2} will be the resulting binary executable. For an executable test fixture ${1} is either the binary executable itself (when using a local toolchain such as gcc) or a binary input file given to a simulator in its arguments.</para>
</listitem></itemizedlist>
</para>
<para>Example [:tools] YAML blurbs</para>
<para><programlisting filename=".yaml"><codeline><highlight class="normal">:tools:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>:test_compiler:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>:executable:<sp/>compiler<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#exists<sp/>in<sp/>system<sp/>search<sp/>path</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>:name:<sp/>&apos;acme<sp/>test<sp/>compiler&apos;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>:arguments:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>-I&quot;$&quot;:<sp/>COLLECTION_PATHS_TEST_TOOLCHAIN_INCLUDE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#expands<sp/>to<sp/>-I<sp/>search<sp/>paths</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>-I&quot;$&quot;:<sp/>COLLECTION_PATHS_TEST_SUPPORT_SOURCE_INCLUDE_VENDOR<sp/><sp/><sp/>#expands<sp/>to<sp/>-I<sp/>search<sp/>paths</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>-D$:<sp/>COLLECTION_DEFINES_TEST_AND_VENDOR<sp/><sp/>#expands<sp/>to<sp/>all<sp/>-D<sp/>defined<sp/>symbols</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>--network-license<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#simple<sp/>command<sp/>line<sp/>argument</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>-optimize-level<sp/>4<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#simple<sp/>command<sp/>line<sp/>argument</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>&quot;#{`args.exe<sp/>-m<sp/>acme.prj`}&quot;<sp/><sp/><sp/>#in-line<sp/>ruby<sp/>sub<sp/>to<sp/>shell<sp/>out<sp/>&amp;<sp/>build<sp/>string<sp/>of<sp/>arguments</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>-c<sp/>${1}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#source<sp/>code<sp/>input<sp/>file<sp/>(Ruby<sp/>method<sp/>call<sp/>param<sp/>list<sp/>sub)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>-o<sp/>${2}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#object<sp/>file<sp/>output<sp/>(Ruby<sp/>method<sp/>call<sp/>param<sp/>list<sp/>sub)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>:test_linker:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>:executable:<sp/>/programs/acme/bin/linker.exe<sp/><sp/><sp/><sp/>#absolute<sp/>file<sp/>path</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>:name:<sp/>&apos;acme<sp/>test<sp/>linker&apos;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>:arguments:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>${1}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#list<sp/>of<sp/>object<sp/>files<sp/>to<sp/>link<sp/>(Ruby<sp/>method<sp/>call<sp/>param<sp/>list<sp/>sub)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>-l$-lib:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#inline<sp/>yaml<sp/>array<sp/>substitution<sp/>to<sp/>link<sp/>in<sp/>foo-lib<sp/>and<sp/>bar-lib</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>foo</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>bar</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>-o<sp/>${2}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#executable<sp/>file<sp/>output<sp/>(Ruby<sp/>method<sp/>call<sp/>param<sp/>list<sp/>sub)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>:test_fixture:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>:executable:<sp/>tools/bin/acme_simulator.exe<sp/><sp/>#relative<sp/>file<sp/>path<sp/>to<sp/>command<sp/>line<sp/>simulator</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>:name:<sp/>&apos;acme<sp/>test<sp/>fixture&apos;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>:stderr_redirect:<sp/>:win<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#inform<sp/>Ceedling<sp/>what<sp/>model<sp/>of<sp/>$stderr<sp/>capture<sp/>to<sp/>use</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>:arguments:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>-mem<sp/>large<sp/><sp/><sp/>#simple<sp/>command<sp/>line<sp/>argument</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>-f<sp/>&quot;${1}&quot;<sp/><sp/><sp/><sp/>#binary<sp/>executable<sp/>input<sp/>file<sp/>to<sp/>simulator<sp/>(Ruby<sp/>method<sp/>call<sp/>param<sp/>list<sp/>sub)</highlight></codeline>
</programlisting></para>
<para>Resulting command line constructions from preceding example [:tools] YAML blurbs <verbatim>&gt; compiler -I&quot;/usr/include” -I”project/tests”
  -I&quot;project/tests/support” -I”project/source” -I”project/include”
  -DTEST -DLONG_NAMES -network-license -optimize-level 4 arg-foo
  arg-bar arg-baz -c project/source/source.c -o
  build/tests/out/source.o
</verbatim> [notes: (1.) &quot;arg-foo arg-bar arg-baz&quot; is a fabricated example string collected from $stdout as a result of shell execution of args.exe (2.) the -c and -o arguments are fabricated examples simulating a single compilation step for a test; ${1} &amp; ${2} are single files] <verbatim>&gt; \programs\acme\bin\linker.exe thing.o unity.o
  test_thing_runner.o test_thing.o mock_foo.o mock_bar.o -lfoo-lib
  -lbar-lib -o build\tests\out\test_thing.exe
</verbatim> [note: in this scenario ${1} is an array of all the object files needed to link a test fixture executable] <verbatim>&gt; tools\bin\acme_simulator.exe -mem large -f &quot;build\tests\out\test_thing.bin 2&gt;&amp;1”
</verbatim> [note: (1.) :executable could have simply been ${1} - if we were compiling and running native executables instead of cross compiling (2.) we&apos;re using $stderr redirection to allow us to capture simulator error messages to $stdout for display at the run&apos;s conclusion]</para>
<para>Notes:</para>
<para><itemizedlist>
<listitem><para>The upper case names are Ruby global constants that Ceedling builds</para>
</listitem><listitem><para>&quot;COLLECTION_&quot; indicates that Ceedling did some work to assemble the list. For instance, expanding path globs, combining multiple path globs into a convenient summation, etc.</para>
</listitem><listitem><para>At present, $stderr redirection is primarily used to capture errors from test fixtures so that they can be displayed at the conclusion of a test run. For instance, if a simulator detects a memory access violation or a divide by zero error, this notice might go unseen in all the output scrolling past in a terminal.</para>
</listitem><listitem><para>The preprocessing tools can each be overridden with non-gcc equivalents. However, this is an advanced feature not yet documented and requires that the replacement toolchain conform to the same conventions used by gcc.</para>
</listitem></itemizedlist>
</para>
<para><bold>Ceedling Collection Used in Compilation</bold>:</para>
<para><itemizedlist>
<listitem><para><computeroutput>COLLECTION_PATHS_TEST</computeroutput>:</para>
<para>All test paths</para>
</listitem><listitem><para><computeroutput>COLLECTION_PATHS_SOURCE</computeroutput>:</para>
<para>All source paths</para>
</listitem><listitem><para><computeroutput>COLLECTION_PATHS_INCLUDE</computeroutput>:</para>
<para>All include paths</para>
</listitem><listitem><para><computeroutput>COLLECTION_PATHS_SUPPORT</computeroutput>:</para>
<para>All test support paths</para>
</listitem><listitem><para><computeroutput>COLLECTION_PATHS_SOURCE_AND_INCLUDE</computeroutput>:</para>
<para>All source and include paths</para>
</listitem><listitem><para><computeroutput>COLLECTION_PATHS_SOURCE_INCLUDE_VENDOR</computeroutput>:</para>
<para>All source and include paths + applicable vendor paths (e.g. CException&apos;s source path if exceptions enabled)</para>
</listitem><listitem><para><computeroutput>COLLECTION_PATHS_TEST_TOOLCHAIN_INCLUDE</computeroutput>:</para>
<para>All test toolchain include paths</para>
</listitem><listitem><para><computeroutput>COLLECTION_PATHS_TEST_SUPPORT_SOURCE_INCLUDE</computeroutput>:</para>
<para>All test, source, and include paths</para>
</listitem><listitem><para><computeroutput>COLLECTION_PATHS_TEST_SUPPORT_SOURCE_INCLUDE_VENDOR</computeroutput>:</para>
<para>All test, source, include, and applicable vendor paths (e.g. Unity&apos;s source path plus CMock and CException&apos;s source paths if mocks and exceptions are enabled)</para>
</listitem><listitem><para><computeroutput>COLLECTION_PATHS_RELEASE_TOOLCHAIN_INCLUDE</computeroutput>:</para>
<para>All release toolchain include paths</para>
</listitem><listitem><para><computeroutput>COLLECTION_DEFINES_TEST_AND_VENDOR</computeroutput>:</para>
<para>All symbols specified in [:defines][:test] + symbols defined for enabled vendor tools - e.g. [:unity][:defines], [:cmock][:defines], and [:cexception][:defines]</para>
</listitem><listitem><para><computeroutput>COLLECTION_DEFINES_RELEASE_AND_VENDOR</computeroutput>:</para>
<para>All symbols specified in [:defines][:release] plus symbols defined by [:cexception][:defines] if exceptions are ena bled</para>
</listitem></itemizedlist>
</para>
<para>Notes:</para>
<para><itemizedlist>
<listitem><para>Other collections exist within Ceedling. However, they are only useful for advanced features not yet documented.</para>
</listitem><listitem><para>Wherever multiple path lists are combined for use Ceedling prioritizes path groups as follows: test paths, support paths, source paths, include paths. This can be useful, for instance, in certain testing scenarios where we desire Ceedling or the compiler to find a stand-in header file before the actual source header file of the same name.</para>
</listitem></itemizedlist>
</para>
<para><bold>plugins</bold>: Ceedling extensions</para>
<para><itemizedlist>
<listitem><para><computeroutput>load_paths</computeroutput>:</para>
<para>Base paths to search for plugin subdirectories or extra ruby functionalit</para>
<para><bold>Default</bold>: [] (empty)</para>
</listitem><listitem><para><computeroutput>enabled</computeroutput>:</para>
<para>List of plugins to be used - a plugin&apos;s name is identical to the subdirectory that contains it (and the name of certain files within that subdirectory)</para>
<para><bold>Default</bold>: [] (empty)</para>
</listitem></itemizedlist>
</para>
<para>Plugins can provide a variety of added functionality to Ceedling. In general use, it&apos;s assumed that at least one reporting plugin will be used to format test results. However, if no reporting plugins are specified, Ceedling will print to <computeroutput>$stdout</computeroutput> the (quite readable) raw test results from all test fixtures executed.</para>
<para>Example [:plugins] YAML blurb</para>
<para><programlisting filename=".yaml"><codeline><highlight class="normal">:plugins:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>:load_paths:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>project/tools/ceedling/plugins<sp/><sp/>#home<sp/>to<sp/>your<sp/>collection<sp/>of<sp/>plugin<sp/>directories</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>project/support<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#maybe<sp/>home<sp/>to<sp/>some<sp/>ruby<sp/>code<sp/>your<sp/>custom<sp/>plugins<sp/>share</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>:enabled:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>stdout_pretty_tests_report<sp/><sp/><sp/><sp/><sp/><sp/>#nice<sp/>test<sp/>results<sp/>at<sp/>your<sp/>command<sp/>line</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>our_custom_code_metrics_report<sp/><sp/>#maybe<sp/>you<sp/>needed<sp/>line<sp/>count<sp/>and<sp/>complexity<sp/>metrics,<sp/>so<sp/>you</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#created<sp/>a<sp/>plugin<sp/>to<sp/>scan<sp/>all<sp/>your<sp/>code<sp/>and<sp/>collect<sp/>that<sp/>info</highlight></codeline>
</programlisting></para>
<para><itemizedlist>
<listitem><para><computeroutput>stdout_pretty_tests_report</computeroutput>:</para>
<para>Prints to $stdout a well-formatted list of ignored and failed tests, final test counts, and any extraneous output (e.g. printf statements or simulator memory errors) collected from executing the test fixtures. Meant to be used with runs at the command line.</para>
</listitem><listitem><para><computeroutput>stdout_ide_tests_report</computeroutput>:</para>
<para>Prints to $stdout simple test results formatted such that an IDE executing test-related Rake tasks can recognize file paths and line numbers in test failures, etc. Thus, you can click a test result in your IDE&apos;s execution window and jump to the failure (or ignored test) in your test file (obviously meant to be used with an <ulink url="http://throwtheswitch.org/white-papers/using-with-ides.html">IDE like Eclipse</ulink>, etc).</para>
</listitem><listitem><para><computeroutput>xml_tests_report</computeroutput>:</para>
<para>Creates an XML file of test results in the xUnit format (handy for Continuous Integration build servers or as input to other reporting tools). Produces a file report.xml in &lt;build root&gt;/artifacts/tests.</para>
</listitem><listitem><para><computeroutput>bullseye</computeroutput>:</para>
<para>Adds additional Rake tasks to execute tests with the commercial code coverage tool provided by <ulink url="http://www.bullseye.com">Bullseye</ulink>. See readme.txt inside the bullseye plugin directory for configuration and use instructions. Note: Bullseye only works with certain compilers and linkers (healthy list of supported toolchains though).</para>
</listitem><listitem><para><computeroutput>gcov</computeroutput>:</para>
<para>Adds additional Rake tasks to execute tests with the GNU code coverage tool <ulink url="http://gcc.gnu.org/onlinedocs/gcc/Gcov.html">gcov</ulink>. See readme.txt inside the gcov directory for configuration and use instructions. Only works with GNU compiler and linker.</para>
</listitem><listitem><para><computeroutput>warnings_report</computeroutput>:</para>
<para>Scans compiler and linker <computeroutput>$stdout / $stderr</computeroutput> output for the word &apos;warning&apos; (case insensitive). All code warnings (or tool warnings) are logged to a file warnings.log in the appropriate <computeroutput>&lt;build root&gt;/artifacts</computeroutput> directory (e.g. test/ for test tasks, <computeroutput>release/</computeroutput> for a release build, or even <computeroutput>bullseye/</computeroutput> for bullseye runs).</para>
</listitem></itemizedlist>
</para>
</sect2>
</sect1>
<sect1 id="db/d5c/md__unit_test_framework_vendor_ceedling_docs__ceedling_packet_1autotoc_md14">
<title>Module Generator</title>
<para>Ceedling includes a plugin called module_generator that will create a source, header and test file for you. There are several possibilities to configure this plugin through your project.yml to suit your project&apos;s needs.</para>
<sect2 id="db/d5c/md__unit_test_framework_vendor_ceedling_docs__ceedling_packet_1autotoc_md15">
<title>Directory Structure</title>
<para>The default configuration for directory/project structure is: <programlisting filename=".yaml"><codeline><highlight class="normal">:module_generator:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>:project_root:<sp/>./</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>:source_root:<sp/>src/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>:test_root:<sp/>test/</highlight></codeline>
</programlisting> You can change these variables in your project.yml file to comply with your project&apos;s directory structure.</para>
<para>If you call <computeroutput>ceedling module:create</computeroutput>, it will create three files:<orderedlist>
<listitem><para>A source file in the source_root</para>
</listitem><listitem><para>A header file in the source_root</para>
</listitem><listitem><para>A test file in the test_root</para>
</listitem></orderedlist>
</para>
<para>If you want your header file to be in another location, you can specify the &apos;:inc_root:" in your project.yml file: <programlisting filename=".yaml"><codeline><highlight class="normal">:module_generator:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>:inc_root:<sp/>inc/</highlight></codeline>
</programlisting> The module_generator will then create the header file in your defined &apos;:inc_root:&apos;. By default, &apos;:inc_root:&apos; is not defined so the module_generator will use the source_root.</para>
<para>Sometimes, your project can&apos;t be divided into a single src, inc, and test folder. You have several directories with sources/..., something like this for example: &lt;project_root&gt;<itemizedlist>
<listitem><para>myDriver<itemizedlist>
<listitem><para>src</para>
</listitem><listitem><para>inc</para>
</listitem><listitem><para>test</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para>myOtherDriver<itemizedlist>
<listitem><para>src</para>
</listitem><listitem><para>inc</para>
</listitem><listitem><para>test</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para>...</para>
</listitem></itemizedlist>
</para>
<para>Don&apos;t worry, you don&apos;t have to manually create the source/header/test files. The module_generator can accept a path to create a source_root/inc_root/test_root folder with your files: <computeroutput>ceedling module:create[&lt;module_root_path&gt;:&lt;module_name&gt;]</computeroutput></para>
<para>F.e., applied to the above project structure: <computeroutput>ceedling module:create[myOtherDriver:driver]</computeroutput> This will make the module_generator run in the subdirectory &apos;myOtherDriver&apos; and generate the module files for you in that directory. So, this command will generate the following files:<orderedlist>
<listitem><para>A source file &apos;driver.c&apos; in &lt;project_root&gt;/myOtherDriver/&lt;source_root&gt;</para>
</listitem><listitem><para>A header file &apos;driver.h&apos; in &lt;project_root&gt;/myOtherDriver/&lt;source_root&gt; (or &lt;inc_root&gt; if specified)</para>
</listitem><listitem><para>A test file &apos;test_driver.c&apos; in &lt;project_root&gt;/myOtherDriver/&lt;test_root&gt;</para>
</listitem></orderedlist>
</para>
</sect2>
<sect2 id="db/d5c/md__unit_test_framework_vendor_ceedling_docs__ceedling_packet_1autotoc_md16">
<title>Naming</title>
<para>By default, the module_generator will generate your files in lowercase. <computeroutput>ceedling module:create[mydriver]</computeroutput> and <computeroutput>ceedling module:create[myDriver]</computeroutput>(note the uppercase) will generate the same files:<orderedlist>
<listitem><para>mydriver.c</para>
</listitem><listitem><para>mydriver.h</para>
</listitem><listitem><para>test_mydriver.c</para>
</listitem></orderedlist>
</para>
<para>You can configure the module_generator to use a differect naming mechanism through the project.yml: <programlisting filename=".yaml"><codeline><highlight class="normal">:module_generator:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>:naming:<sp/>&quot;camel&quot;</highlight></codeline>
</programlisting> There are other possibilities as well (bumpy, camel, snake, caps). Refer to the unity module generator for more info (the unity module generator is used under the hood by module_generator).</para>
</sect2>
</sect1>
<sect1 id="db/d5c/md__unit_test_framework_vendor_ceedling_docs__ceedling_packet_1autotoc_md17">
<title>Advanced Topics (Coming)</title>
<sect2 id="db/d5c/md__unit_test_framework_vendor_ceedling_docs__ceedling_packet_1autotoc_md18">
<title>Modifying Your Configuration without Modifying Your Project File: Option Files &amp; User Files</title>
<para>Modifying your project file without modifying your project file</para>
</sect2>
<sect2 id="db/d5c/md__unit_test_framework_vendor_ceedling_docs__ceedling_packet_1autotoc_md19">
<title>Debugging and/or printf()</title>
<para>When you gotta get your hands dirty...</para>
</sect2>
<sect2 id="db/d5c/md__unit_test_framework_vendor_ceedling_docs__ceedling_packet_1autotoc_md20">
<title>Ceedling Plays Nice with Others - Using Ceedling for Tests Alongside Another Release Build Setup</title>
<para>You&apos;ve got options.</para>
</sect2>
<sect2 id="db/d5c/md__unit_test_framework_vendor_ceedling_docs__ceedling_packet_1autotoc_md21">
<title>Adding Handy Rake Tasks for Your Project (without Fancy Pants Custom Plugins)</title>
<para>Simple as snot.</para>
</sect2>
<sect2 id="db/d5c/md__unit_test_framework_vendor_ceedling_docs__ceedling_packet_1autotoc_md22">
<title>Working with Non-Desktop Testing Environments</title>
<para>For those crazy platforms lacking command line simulators and for which cross-compiling on the desktop just ain&apos;t gonna get it done.</para>
</sect2>
<sect2 id="db/d5c/md__unit_test_framework_vendor_ceedling_docs__ceedling_packet_1autotoc_md23">
<title>Creating Custom Plugins</title>
<para>Oh boy. This is going to take some explaining. </para>
</sect2>
</sect1>
    </detaileddescription>
    <location file="UnitTestFramework/vendor/ceedling/docs/CeedlingPacket.md"/>
  </compounddef>
</doxygen>
