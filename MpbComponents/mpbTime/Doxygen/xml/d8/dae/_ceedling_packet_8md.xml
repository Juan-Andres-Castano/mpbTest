<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="d8/dae/_ceedling_packet_8md" kind="file" language="Markdown">
    <compoundname>CeedlingPacket.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">[All<sp/>code<sp/>is<sp/>copyright<sp/>©<sp/>2010-2012<sp/>Ceedling<sp/>Project</highlight></codeline>
<codeline><highlight class="normal">by<sp/>Mike<sp/>Karlesky,<sp/>Mark<sp/>VanderVoord,<sp/>and<sp/>Greg<sp/>Williams.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">This<sp/>Documentation<sp/>Is<sp/>Released<sp/>Under<sp/>a</highlight></codeline>
<codeline><highlight class="normal">Creative<sp/>Commons<sp/>3.0<sp/>Attribution<sp/>Share-Alike<sp/>License]</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">What<sp/>the<sp/>What?</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Assembling<sp/>build<sp/>environments<sp/>for<sp/>C<sp/>projects<sp/>-<sp/>especially<sp/>with</highlight></codeline>
<codeline><highlight class="normal">automated<sp/>unit<sp/>tests<sp/>-<sp/>is<sp/>a<sp/>pain.<sp/>Whether<sp/>it&apos;s<sp/>Make<sp/>or<sp/>Rake<sp/>or<sp/>Premake</highlight></codeline>
<codeline><highlight class="normal">or<sp/>what-have-you,<sp/>set<sp/>up<sp/>with<sp/>an<sp/>all-purpose<sp/>build<sp/>environment</highlight></codeline>
<codeline><highlight class="normal">tool<sp/>is<sp/>tedious<sp/>and<sp/>requires<sp/>considerable<sp/>glue<sp/>code<sp/>to<sp/>pull<sp/>together</highlight></codeline>
<codeline><highlight class="normal">the<sp/>necessary<sp/>tools<sp/>and<sp/>libraries.<sp/>Ceedling<sp/>allows<sp/>you<sp/>to<sp/>generate</highlight></codeline>
<codeline><highlight class="normal">an<sp/>entire<sp/>test<sp/>and<sp/>build<sp/>environment<sp/>for<sp/>a<sp/>C<sp/>project<sp/>from<sp/>a<sp/>single</highlight></codeline>
<codeline><highlight class="normal">YAML<sp/>configuration<sp/>file.<sp/>Ceedling<sp/>is<sp/>written<sp/>in<sp/>Ruby<sp/>and<sp/>works</highlight></codeline>
<codeline><highlight class="normal">with<sp/>the<sp/>Rake<sp/>build<sp/>tool<sp/>plus<sp/>other<sp/>goodness<sp/>like<sp/>Unity<sp/>and<sp/>CMock</highlight></codeline>
<codeline><highlight class="normal">-<sp/>the<sp/>unit<sp/>testing<sp/>and<sp/>mocking<sp/>frameworks<sp/>for<sp/>C.<sp/>Ceedling<sp/>and</highlight></codeline>
<codeline><highlight class="normal">its<sp/>complementary<sp/>tools<sp/>can<sp/>support<sp/>the<sp/>tiniest<sp/>of<sp/>embedded</highlight></codeline>
<codeline><highlight class="normal">processors,<sp/>the<sp/>beefiest<sp/>64<sp/>bit<sp/>power<sp/>houses<sp/>available,<sp/>and</highlight></codeline>
<codeline><highlight class="normal">everything<sp/>in<sp/>between.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">For<sp/>a<sp/>build<sp/>project<sp/>including<sp/>unit<sp/>tests<sp/>and<sp/>using<sp/>the<sp/>default</highlight></codeline>
<codeline><highlight class="normal">toolchain<sp/>gcc,<sp/>the<sp/>configuration<sp/>file<sp/>could<sp/>be<sp/>as<sp/>simple<sp/>as<sp/>this:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```yaml</highlight></codeline>
<codeline><highlight class="normal">:project:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>:build_root:<sp/>project/build/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>:release_build:<sp/>TRUE</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">:paths:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>:test:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>tests/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>:source:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>source/**</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">From<sp/>the<sp/>command<sp/>line,<sp/>to<sp/>build<sp/>the<sp/>release<sp/>version<sp/>of<sp/>your<sp/>project,</highlight></codeline>
<codeline><highlight class="normal">you<sp/>would<sp/>simply<sp/>run<sp/>`ceedling<sp/>release`.<sp/>To<sp/>run<sp/>all<sp/>your<sp/>unit<sp/>tests,</highlight></codeline>
<codeline><highlight class="normal">you<sp/>would<sp/>run<sp/>`ceedling<sp/>test:all`.<sp/>That&apos;s<sp/>it!</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Of<sp/>course,<sp/>many<sp/>more<sp/>advanced<sp/>options<sp/>allow<sp/>you<sp/>to<sp/>configure</highlight></codeline>
<codeline><highlight class="normal">your<sp/>project<sp/>with<sp/>a<sp/>variety<sp/>of<sp/>features<sp/>to<sp/>meet<sp/>a<sp/>variety<sp/>of<sp/>needs.</highlight></codeline>
<codeline><highlight class="normal">Ceedling<sp/>can<sp/>work<sp/>with<sp/>practically<sp/>any<sp/>command<sp/>line<sp/>toolchain</highlight></codeline>
<codeline><highlight class="normal">and<sp/>directory<sp/>structure<sp/>–<sp/>all<sp/>by<sp/>way<sp/>of<sp/>the<sp/>configuration<sp/>file.</highlight></codeline>
<codeline><highlight class="normal">Further,<sp/>because<sp/>Ceedling<sp/>piggy<sp/>backs<sp/>on<sp/>Rake,<sp/>you<sp/>can<sp/>add<sp/>your</highlight></codeline>
<codeline><highlight class="normal">own<sp/>Rake<sp/>tasks<sp/>to<sp/>accomplish<sp/>project<sp/>tasks<sp/>outside<sp/>of<sp/>testing</highlight></codeline>
<codeline><highlight class="normal">and<sp/>release<sp/>builds.<sp/>A<sp/>facility<sp/>for<sp/>plugins<sp/>also<sp/>allows<sp/>you<sp/>to</highlight></codeline>
<codeline><highlight class="normal">extend<sp/>Ceedling&apos;s<sp/>capabilities<sp/>for<sp/>needs<sp/>such<sp/>as<sp/>custom<sp/>code</highlight></codeline>
<codeline><highlight class="normal">metrics<sp/>reporting<sp/>and<sp/>coverage<sp/>testing.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">What&apos;s<sp/>with<sp/>this<sp/>Name?</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Glad<sp/>you<sp/>asked.<sp/>Ceedling<sp/>is<sp/>tailored<sp/>for<sp/>unit<sp/>tested<sp/>C<sp/>projects</highlight></codeline>
<codeline><highlight class="normal">and<sp/>is<sp/>built<sp/>upon<sp/>/<sp/>around<sp/>Rake<sp/>(Rake<sp/>is<sp/>a<sp/>Make<sp/>replacement<sp/>implemented</highlight></codeline>
<codeline><highlight class="normal">in<sp/>the<sp/>Ruby<sp/>scripting<sp/>language).<sp/>So,<sp/>we&apos;ve<sp/>got<sp/>C,<sp/>our<sp/>Rake,<sp/>and</highlight></codeline>
<codeline><highlight class="normal">the<sp/>fertile<sp/>soil<sp/>of<sp/>a<sp/>build<sp/>environment<sp/>in<sp/>which<sp/>to<sp/>grow<sp/>and<sp/>tend</highlight></codeline>
<codeline><highlight class="normal">your<sp/>project<sp/>and<sp/>its<sp/>unit<sp/>tests.<sp/>Ta<sp/>da<sp/>-<sp/>_Ceedling_.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">What<sp/>Do<sp/>You<sp/>Mean<sp/>&quot;tailored<sp/>for<sp/>unit<sp/>tested<sp/>C<sp/>projects&quot;?</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Well,<sp/>we<sp/>like<sp/>to<sp/>write<sp/>unit<sp/>tests<sp/>for<sp/>our<sp/>C<sp/>code<sp/>to<sp/>make<sp/>it<sp/>lean<sp/>and</highlight></codeline>
<codeline><highlight class="normal">mean<sp/>(that<sp/>whole<sp/>[Test-Driven<sp/>Development][tdd]</highlight></codeline>
<codeline><highlight class="normal">thing).<sp/>Along<sp/>the<sp/>way,<sp/>this<sp/>style<sp/>of<sp/>writing<sp/>C<sp/>code<sp/>spawned<sp/>two</highlight></codeline>
<codeline><highlight class="normal">tools<sp/>to<sp/>make<sp/>the<sp/>job<sp/>easier:<sp/>a<sp/>unit<sp/>test<sp/>framework<sp/>for<sp/>C<sp/>called</highlight></codeline>
<codeline><highlight class="normal">_Unity_<sp/>and<sp/>a<sp/>mocking<sp/>library<sp/>called<sp/>_CMock_.<sp/>And,<sp/>though<sp/>it&apos;s</highlight></codeline>
<codeline><highlight class="normal">not<sp/>directly<sp/>related<sp/>to<sp/>testing,<sp/>a<sp/>C<sp/>framework<sp/>for<sp/>exception</highlight></codeline>
<codeline><highlight class="normal">handling<sp/>called<sp/>_CException_<sp/>also<sp/>came<sp/>along.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">[tdd]:<sp/>http://en.wikipedia.org/wiki/Test-driven_development</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">These<sp/>tools<sp/>and<sp/>frameworks<sp/>are<sp/>great,<sp/>but<sp/>they<sp/>require<sp/>quite</highlight></codeline>
<codeline><highlight class="normal">a<sp/>bit<sp/>of<sp/>environment<sp/>support<sp/>to<sp/>pull<sp/>them<sp/>all<sp/>together<sp/>in<sp/>a<sp/>convenient,</highlight></codeline>
<codeline><highlight class="normal">usable<sp/>fashion.<sp/>We<sp/>started<sp/>off<sp/>with<sp/>Rakefiles<sp/>to<sp/>assemble<sp/>everything.</highlight></codeline>
<codeline><highlight class="normal">These<sp/>ended<sp/>up<sp/>being<sp/>quite<sp/>complicated<sp/>and<sp/>had<sp/>to<sp/>be<sp/>hand-edited</highlight></codeline>
<codeline><highlight class="normal">or<sp/>created<sp/>anew<sp/>for<sp/>each<sp/>new<sp/>project.<sp/>Ceedling<sp/>replaces<sp/>all<sp/>that</highlight></codeline>
<codeline><highlight class="normal">tedium<sp/>and<sp/>rework<sp/>with<sp/>a<sp/>configuration<sp/>file<sp/>that<sp/>ties<sp/>everything</highlight></codeline>
<codeline><highlight class="normal">together.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Though<sp/>Ceedling<sp/>is<sp/>tailored<sp/>for<sp/>unit<sp/>testing,<sp/>it<sp/>can<sp/>also<sp/>go<sp/>right<sp/>ahead</highlight></codeline>
<codeline><highlight class="normal">and<sp/>build<sp/>your<sp/>final<sp/>binary<sp/>release<sp/>artifact<sp/>for<sp/>you<sp/>as<sp/>well.<sp/>Or,</highlight></codeline>
<codeline><highlight class="normal">Ceedling<sp/>and<sp/>your<sp/>tests<sp/>can<sp/>live<sp/>alongside<sp/>your<sp/>existing<sp/>release<sp/>build</highlight></codeline>
<codeline><highlight class="normal">setup.<sp/>That<sp/>said,<sp/>Ceedling<sp/>is<sp/>more<sp/>powerful<sp/>as<sp/>a<sp/>unit<sp/>test<sp/>build</highlight></codeline>
<codeline><highlight class="normal">environment<sp/>than<sp/>it<sp/>is<sp/>a<sp/>general<sp/>purpose<sp/>release<sp/>build<sp/>environment;</highlight></codeline>
<codeline><highlight class="normal">complicated<sp/>projects<sp/>including<sp/>separate<sp/>bootloaders<sp/>or<sp/>multiple<sp/>library</highlight></codeline>
<codeline><highlight class="normal">builds,<sp/>etc.<sp/>are<sp/>not<sp/>its<sp/>strong<sp/>suit.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Hold<sp/>on.<sp/>Back<sp/>up.<sp/>Ruby?<sp/>Rake?<sp/>YAML?<sp/>Unity?<sp/>CMock?<sp/>CException?</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Seem<sp/>overwhelming?<sp/>It&apos;s<sp/>not<sp/>bad<sp/>at<sp/>all,<sp/>and<sp/>for<sp/>the<sp/>benefits<sp/>tests</highlight></codeline>
<codeline><highlight class="normal">bring<sp/>us,<sp/>it&apos;s<sp/>all<sp/>worth<sp/>it.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">[Ruby][]<sp/>is<sp/>a<sp/>handy<sp/>scripting</highlight></codeline>
<codeline><highlight class="normal">language<sp/>like<sp/>Perl<sp/>or<sp/>Python.<sp/>It&apos;s<sp/>a<sp/>modern,<sp/>full<sp/>featured<sp/>language</highlight></codeline>
<codeline><highlight class="normal">that<sp/>happens<sp/>to<sp/>be<sp/>quite<sp/>handy<sp/>for<sp/>accomplishing<sp/>tasks<sp/>like<sp/>code</highlight></codeline>
<codeline><highlight class="normal">generation<sp/>or<sp/>automating<sp/>one&apos;s<sp/>workflow<sp/>while<sp/>developing<sp/>in</highlight></codeline>
<codeline><highlight class="normal">a<sp/>compiled<sp/>language<sp/>such<sp/>as<sp/>C.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">[Ruby]:<sp/>http://www.ruby-lang.org/en/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">[Rake][]<sp/>is<sp/>a<sp/>utility<sp/>written<sp/>in<sp/>Ruby</highlight></codeline>
<codeline><highlight class="normal">for<sp/>accomplishing<sp/>dependency<sp/>tracking<sp/>and<sp/>task<sp/>automation</highlight></codeline>
<codeline><highlight class="normal">common<sp/>to<sp/>building<sp/>software.<sp/>It&apos;s<sp/>a<sp/>modern,<sp/>more<sp/>flexible<sp/>replacement</highlight></codeline>
<codeline><highlight class="normal">for<sp/>[Make][]).</highlight></codeline>
<codeline><highlight class="normal">Rakefiles<sp/>are<sp/>Ruby<sp/>files,<sp/>but<sp/>they<sp/>contain<sp/>build<sp/>targets<sp/>similar</highlight></codeline>
<codeline><highlight class="normal">in<sp/>nature<sp/>to<sp/>that<sp/>of<sp/>Makefiles<sp/>(but<sp/>you<sp/>can<sp/>also<sp/>run<sp/>Ruby<sp/>code<sp/>in</highlight></codeline>
<codeline><highlight class="normal">your<sp/>Rakefile).</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">[Rake]:<sp/>http://rubyrake.org/</highlight></codeline>
<codeline><highlight class="normal">[Make]:<sp/>http://en.wikipedia.org/wiki/Make_(software)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">[YAML][]<sp/>is<sp/>a<sp/>&quot;human<sp/>friendly<sp/>data<sp/>serialization<sp/>standard<sp/>for<sp/>all</highlight></codeline>
<codeline><highlight class="normal">programming<sp/>languages.&quot;<sp/>It&apos;s<sp/>kinda<sp/>like<sp/>a<sp/>markup<sp/>language,<sp/>but<sp/>don&apos;t</highlight></codeline>
<codeline><highlight class="normal">call<sp/>it<sp/>that.<sp/>With<sp/>a<sp/>YAML<sp/>library,<sp/>you<sp/>can<sp/>[serialize][]<sp/>data<sp/>structures</highlight></codeline>
<codeline><highlight class="normal">to<sp/>and<sp/>from<sp/>the<sp/>file<sp/>system<sp/>in<sp/>a<sp/>textual,<sp/>human<sp/>readable<sp/>form.<sp/>Ceedling</highlight></codeline>
<codeline><highlight class="normal">uses<sp/>a<sp/>serialized<sp/>data<sp/>structure<sp/>as<sp/>its<sp/>configuration<sp/>input.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">[YAML]:<sp/>http://en.wikipedia.org/wiki/Yaml</highlight></codeline>
<codeline><highlight class="normal">[serialize]:<sp/>http://en.wikipedia.org/wiki/Serialization</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">[Unity]<sp/>is<sp/>a<sp/>[unit<sp/>test<sp/>framework][test]<sp/>for<sp/>C.<sp/>It<sp/>provides<sp/>facilities</highlight></codeline>
<codeline><highlight class="normal">for<sp/>test<sp/>assertions,<sp/>executing<sp/>tests,<sp/>and<sp/>collecting<sp/>/<sp/>reporting<sp/>test</highlight></codeline>
<codeline><highlight class="normal">results.<sp/>Unity<sp/>derives<sp/>its<sp/>name<sp/>from<sp/>its<sp/>implementation<sp/>in<sp/>a<sp/>single<sp/>C</highlight></codeline>
<codeline><highlight class="normal">source<sp/>file<sp/>(plus<sp/>two<sp/>C<sp/>header<sp/>files)<sp/>and<sp/>from<sp/>the<sp/>nature<sp/>of<sp/>its</highlight></codeline>
<codeline><highlight class="normal">implementation<sp/>-<sp/>Unity<sp/>will<sp/>build<sp/>in<sp/>any<sp/>C<sp/>toolchain<sp/>and<sp/>is<sp/>configurable</highlight></codeline>
<codeline><highlight class="normal">for<sp/>even<sp/>the<sp/>very<sp/>minimalist<sp/>of<sp/>processors.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">[Unity]:<sp/>http://github.com/ThrowTheSwitch/Unity</highlight></codeline>
<codeline><highlight class="normal">[test]:<sp/>http://en.wikipedia.org/wiki/Unit_testing</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">[CMock]<sp/>is<sp/>a<sp/>tool<sp/>written<sp/>in<sp/>Ruby<sp/>able<sp/>to<sp/>generate<sp/>entire</highlight></codeline>
<codeline><highlight class="normal">[mock<sp/>functions][mock]<sp/>in<sp/>C<sp/>code<sp/>from<sp/>a<sp/>given<sp/>C<sp/>header<sp/>file.<sp/>Mock</highlight></codeline>
<codeline><highlight class="normal">functions<sp/>are<sp/>invaluable<sp/>in<sp/>[interaction-based<sp/>unit<sp/>testing][ut].</highlight></codeline>
<codeline><highlight class="normal">CMock&apos;s<sp/>generated<sp/>C<sp/>code<sp/>uses<sp/>Unity.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">[CMock]:<sp/>http://github.com/ThrowTheSwitch/CMock</highlight></codeline>
<codeline><highlight class="normal">[mock]:<sp/>http://en.wikipedia.org/wiki/Mock_object</highlight></codeline>
<codeline><highlight class="normal">[ut]:<sp/>http://martinfowler.com/articles/mocksArentStubs.html</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">[CException]<sp/>is<sp/>a<sp/>C<sp/>source<sp/>and<sp/>header<sp/>file<sp/>that<sp/>provide<sp/>a<sp/>simple</highlight></codeline>
<codeline><highlight class="normal">[exception<sp/>mechanism][exn]<sp/>for<sp/>C<sp/>by<sp/>way<sp/>of<sp/>wrapping<sp/>up<sp/>the</highlight></codeline>
<codeline><highlight class="normal">[setjmp<sp/>/<sp/>longjmp][setjmp]<sp/>standard<sp/>library<sp/>calls.<sp/>Exceptions<sp/>are<sp/>a<sp/>much</highlight></codeline>
<codeline><highlight class="normal">cleaner<sp/>and<sp/>preferable<sp/>alternative<sp/>to<sp/>managing<sp/>and<sp/>passing<sp/>error<sp/>codes</highlight></codeline>
<codeline><highlight class="normal">up<sp/>your<sp/>return<sp/>call<sp/>trace.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">[CException]:<sp/>http://github.com/ThrowTheSwitch/CException</highlight></codeline>
<codeline><highlight class="normal">[exn]:<sp/>http://en.wikipedia.org/wiki/Exception_handling</highlight></codeline>
<codeline><highlight class="normal">[setjmp]:<sp/>http://en.wikipedia.org/wiki/Setjmp.h</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Notes</highlight></codeline>
<codeline><highlight class="normal">-----</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>YAML<sp/>support<sp/>is<sp/>included<sp/>with<sp/>Ruby<sp/>-<sp/>requires<sp/>no<sp/>special<sp/>installation</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>or<sp/>configuration.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>Unity,<sp/>CMock,<sp/>and<sp/>CException<sp/>are<sp/>bundled<sp/>with<sp/>Ceedling,<sp/>and</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Ceedling<sp/>is<sp/>designed<sp/>to<sp/>glue<sp/>them<sp/>all<sp/>together<sp/>for<sp/>your<sp/>project</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>as<sp/>seamlessly<sp/>as<sp/>possible.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Installation<sp/>&amp;<sp/>Setup:<sp/>What<sp/>Exactly<sp/>Do<sp/>I<sp/>Need<sp/>to<sp/>Get<sp/>Started?</highlight></codeline>
<codeline><highlight class="normal">------------------------------------------------------------</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">As<sp/>a<sp/>[Ruby<sp/>gem](http://docs.rubygems.org/read/chapter/1):</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">1.<sp/>[Download<sp/>and<sp/>install<sp/>Ruby](http://www.ruby-lang.org/en/downloads/)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">2.<sp/>Use<sp/>Ruby&apos;s<sp/>command<sp/>line<sp/>gem<sp/>package<sp/>manager<sp/>to<sp/>install<sp/>Ceedling:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>`gem<sp/>install<sp/>ceedling`</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>(Unity,<sp/>CMock,<sp/>and<sp/>CException<sp/>come<sp/>along<sp/>with<sp/>Ceedling<sp/>for<sp/>free)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">3.<sp/>Execute<sp/>Ceedling<sp/>at<sp/>command<sp/>line<sp/>to<sp/>create<sp/>example<sp/>project</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>or<sp/>an<sp/>empty<sp/>Ceedling<sp/>project<sp/>in<sp/>your<sp/>filesystem<sp/>(executing</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>`ceedling<sp/>help`<sp/>first<sp/>is,<sp/>well,<sp/>helpful).</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Gem<sp/>install<sp/>notes:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">1.<sp/>Steps<sp/>1-2<sp/>are<sp/>a<sp/>one<sp/>time<sp/>affair<sp/>for<sp/>your<sp/>local<sp/>environment.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>When<sp/>steps<sp/>1-2<sp/>are<sp/>completed<sp/>once,<sp/>only<sp/>step<sp/>3<sp/>is<sp/>needed<sp/>for</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>each<sp/>new<sp/>project.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">General<sp/>notes:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">1.<sp/>Certain<sp/>advanced<sp/>features<sp/>of<sp/>Ceedling<sp/>rely<sp/>on<sp/>gcc<sp/>and<sp/>cpp</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>as<sp/>preprocessing<sp/>tools.<sp/>In<sp/>most<sp/>*nix<sp/>systems,<sp/>these<sp/>tools</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>are<sp/>already<sp/>available.<sp/>For<sp/>Windows<sp/>environments,<sp/>we<sp/>recommend</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>the<sp/>[mingw<sp/>project](http://www.mingw.org/)<sp/>(Minimalist</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>GNU<sp/>for<sp/>Windows).<sp/>This<sp/>represents<sp/>an<sp/>optional,<sp/>additional</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>setup<sp/>/<sp/>installation<sp/>step<sp/>to<sp/>complement<sp/>the<sp/>list<sp/>above.<sp/>Upon</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>installing<sp/>mingw<sp/>ensure<sp/>your<sp/>system<sp/>path<sp/>is<sp/>updated<sp/>or<sp/>set</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>[:environment][:path]<sp/>in<sp/>your<sp/>`project.yml`<sp/>file<sp/>(see</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>environment<sp/>section<sp/>later<sp/>in<sp/>this<sp/>document).</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">2.<sp/>To<sp/>use<sp/>a<sp/>project<sp/>file<sp/>name<sp/>other<sp/>than<sp/>the<sp/>default<sp/>`project.yml`</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>or<sp/>place<sp/>the<sp/>project<sp/>file<sp/>in<sp/>a<sp/>directory<sp/>other<sp/>than<sp/>the<sp/>one</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>in<sp/>which<sp/>you&apos;ll<sp/>run<sp/>Rake,<sp/>create<sp/>an<sp/>environment<sp/>variable</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>`CEEDLING_MAIN_PROJECT_FILE`<sp/>with<sp/>your<sp/>desired<sp/>project</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>file<sp/>path.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">3.<sp/>To<sp/>better<sp/>understand<sp/>Rake<sp/>conventions,<sp/>Rake<sp/>execution,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>and<sp/>Rakefiles,<sp/>consult<sp/>the<sp/>[Rake<sp/>tutorial,<sp/>examples,<sp/>and</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>user<sp/>guide](http://rubyrake.org/).</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">4.<sp/>When<sp/>using<sp/>Ceedling<sp/>in<sp/>Windows<sp/>environments,<sp/>a<sp/>test<sp/>file<sp/>name<sp/>may<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>not<sp/>include<sp/>the<sp/>sequences<sp/>“patch”<sp/>or<sp/>“setup”.<sp/>The<sp/>Windows<sp/>Installer<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>Detection<sp/>Technology<sp/>(part<sp/>of<sp/>UAC),<sp/>requires<sp/>administrator<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>privileges<sp/>to<sp/>execute<sp/>file<sp/>names<sp/>with<sp/>these<sp/>strings.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Now<sp/>What?<sp/>How<sp/>Do<sp/>I<sp/>Make<sp/>It<sp/>GO?</highlight></codeline>
<codeline><highlight class="normal">------------------------------</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">We&apos;re<sp/>getting<sp/>a<sp/>little<sp/>ahead<sp/>of<sp/>ourselves<sp/>here,<sp/>but<sp/>it&apos;s<sp/>good</highlight></codeline>
<codeline><highlight class="normal">context<sp/>on<sp/>how<sp/>to<sp/>drive<sp/>this<sp/>bus.<sp/>Everything<sp/>is<sp/>done<sp/>via<sp/>the<sp/>command</highlight></codeline>
<codeline><highlight class="normal">line.<sp/>We&apos;ll<sp/>cover<sp/>conventions<sp/>and<sp/>how<sp/>to<sp/>actually<sp/>configure</highlight></codeline>
<codeline><highlight class="normal">your<sp/>project<sp/>in<sp/>later<sp/>sections.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">To<sp/>run<sp/>tests,<sp/>build<sp/>your<sp/>release<sp/>artifact,<sp/>etc.,<sp/>you<sp/>will<sp/>be<sp/>interacting</highlight></codeline>
<codeline><highlight class="normal">with<sp/>Rake<sp/>on<sp/>the<sp/>command<sp/>line.<sp/>Ceedling<sp/>works<sp/>with<sp/>Rake<sp/>to<sp/>present</highlight></codeline>
<codeline><highlight class="normal">you<sp/>with<sp/>named<sp/>tasks<sp/>that<sp/>coordinate<sp/>the<sp/>file<sp/>generation<sp/>and</highlight></codeline>
<codeline><highlight class="normal">build<sp/>steps<sp/>needed<sp/>to<sp/>accomplish<sp/>something<sp/>useful.<sp/>You<sp/>can<sp/>also</highlight></codeline>
<codeline><highlight class="normal">add<sp/>your<sp/>own<sp/>independent<sp/>Rake<sp/>tasks<sp/>or<sp/>create<sp/>plugins<sp/>to<sp/>extend</highlight></codeline>
<codeline><highlight class="normal">Ceedling<sp/>(more<sp/>on<sp/>this<sp/>later).</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`ceedling<sp/>[no<sp/>arguments]`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>Run<sp/>the<sp/>default<sp/>Rake<sp/>task<sp/>(conveniently<sp/>recognized<sp/>by<sp/>the<sp/>name<sp/>default</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>by<sp/>Rake).<sp/>Neither<sp/>Rake<sp/>nor<sp/>Ceedling<sp/>provide<sp/>a<sp/>default<sp/>task.<sp/>Rake<sp/>will</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>abort<sp/>if<sp/>run<sp/>without<sp/>arguments<sp/>when<sp/>no<sp/>default<sp/>task<sp/>is<sp/>defined.<sp/>You<sp/>can</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>conveniently<sp/>define<sp/>a<sp/>default<sp/>task<sp/>in<sp/>the<sp/>Rakefile<sp/>discussed<sp/>in<sp/>the</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>preceding<sp/>setup<sp/>&amp;<sp/>installation<sp/>section<sp/>of<sp/>this<sp/>document.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`ceedling<sp/>-T`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>List<sp/>all<sp/>available<sp/>Rake<sp/>tasks<sp/>with<sp/>descriptions<sp/>(Rake<sp/>tasks<sp/>without</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>descriptions<sp/>are<sp/>not<sp/>listed).<sp/>-T<sp/>is<sp/>a<sp/>command<sp/>line<sp/>switch<sp/>for<sp/>Rake<sp/>and</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>not<sp/>the<sp/>same<sp/>as<sp/>tasks<sp/>that<sp/>follow.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`ceedling<sp/>&lt;tasks...&gt;<sp/>--trace`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>For<sp/>advanced<sp/>users<sp/>troubleshooting<sp/>a<sp/>confusing<sp/>build<sp/>error,<sp/>debug</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Ceedling<sp/>or<sp/>a<sp/>plugin,<sp/>--trace<sp/>provides<sp/>a<sp/>stack<sp/>trace<sp/>of<sp/>dependencies</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>walked<sp/>during<sp/>task<sp/>execution<sp/>and<sp/>any<sp/>Ruby<sp/>failures<sp/>along<sp/>the<sp/>way.<sp/>Note</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>that<sp/>--trace<sp/>is<sp/>a<sp/>command<sp/>line<sp/>switch<sp/>for<sp/>Rake<sp/>and<sp/>is<sp/>not<sp/>the<sp/>same<sp/>as</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>tasks<sp/>that<sp/>follow.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`ceedling<sp/>environment`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>List<sp/>all<sp/>configured<sp/>environment<sp/>variable<sp/>names<sp/>and<sp/>string<sp/>values.<sp/>This</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>task<sp/>is<sp/>helpful<sp/>in<sp/>verifying<sp/>the<sp/>evaluatio<sp/>of<sp/>any<sp/>Ruby<sp/>expressions<sp/>in</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>the<sp/>[:environment]<sp/>section<sp/>of<sp/>your<sp/>config<sp/>file.`:<sp/>Note:<sp/>Ceedling<sp/>may</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>set<sp/>some<sp/>convenience<sp/>environment<sp/>variables<sp/>by<sp/>default.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`ceedling<sp/>paths:*`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>List<sp/>all<sp/>paths<sp/>collected<sp/>from<sp/>[:paths]<sp/>entries<sp/>in<sp/>your<sp/>YAML<sp/>config</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>file<sp/>where<sp/>*<sp/>is<sp/>the<sp/>name<sp/>of<sp/>any<sp/>section<sp/>contained<sp/>in<sp/>[:paths].<sp/>This</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>task<sp/>is<sp/>helpful<sp/>in<sp/>verifying<sp/>the<sp/>expansion<sp/>of<sp/>path<sp/>wildcards<sp/>/<sp/>globs</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>specified<sp/>in<sp/>the<sp/>[:paths]<sp/>section<sp/>of<sp/>your<sp/>config<sp/>file.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`ceedling<sp/>files:assembly`</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`ceedling<sp/>files:header`</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`ceedling<sp/>files:source`</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`ceedling<sp/>files:test`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>List<sp/>all<sp/>files<sp/>and<sp/>file<sp/>counts<sp/>collected<sp/>from<sp/>the<sp/>relevant<sp/>search</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>paths<sp/>specified<sp/>by<sp/>the<sp/>[:paths]<sp/>entries<sp/>of<sp/>your<sp/>YAML<sp/>config<sp/>file.<sp/>The</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>files:assembly<sp/>task<sp/>will<sp/>only<sp/>be<sp/>available<sp/>if<sp/>assembly<sp/>support<sp/>is</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>enabled<sp/>in<sp/>the<sp/>[:release_build]<sp/>section<sp/>of<sp/>your<sp/>configuration<sp/>file.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`ceedling<sp/>options:*`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>Load<sp/>and<sp/>merge<sp/>configuration<sp/>settings<sp/>into<sp/>the<sp/>main<sp/>project</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>configuration.<sp/>Each<sp/>task<sp/>is<sp/>named<sp/>after<sp/>a<sp/>*.yml<sp/>file<sp/>found<sp/>in<sp/>the</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>configured<sp/>options<sp/>directory.<sp/>See<sp/>documentation<sp/>for<sp/>the<sp/>configuration</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>setting<sp/>[:project][:options_path]<sp/>and<sp/>for<sp/>options<sp/>files<sp/>in<sp/>advanced</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>topics.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`ceedling<sp/>test:all`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>Run<sp/>all<sp/>unit<sp/>tests<sp/>(rebuilding<sp/>anything<sp/>that&apos;s<sp/>changed<sp/>along<sp/>the<sp/>way).</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`ceedling<sp/>test:delta`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>Run<sp/>only<sp/>those<sp/>unit<sp/>tests<sp/>for<sp/>which<sp/>the<sp/>source<sp/>or<sp/>test<sp/>files<sp/>have</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>changed<sp/>(i.e.<sp/>incremental<sp/>build).<sp/>Note:<sp/>with<sp/>the</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>[:project][:use_test_preprocessor]<sp/>configuration<sp/>file<sp/>option<sp/>set,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>runner<sp/>files<sp/>are<sp/>always<sp/>regenerated<sp/>limiting<sp/>the<sp/>total<sp/>efficiency<sp/>this</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>text<sp/>execution<sp/>option<sp/>can<sp/>afford.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`ceedling<sp/>test:*`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>Execute<sp/>the<sp/>named<sp/>test<sp/>file<sp/>or<sp/>the<sp/>named<sp/>source<sp/>file<sp/>that<sp/>has<sp/>an</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>accompanying<sp/>test.<sp/>No<sp/>path.<sp/>Examples:<sp/>ceedling<sp/>test:foo.c<sp/>or<sp/>ceed</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>test:test_foo.c</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`ceedling<sp/>test:pattern[*]`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>Execute<sp/>any<sp/>tests<sp/>whose<sp/>name<sp/>and/or<sp/>path<sp/>match<sp/>the<sp/>regular<sp/>expression</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pattern<sp/>(case<sp/>sensitive).<sp/>Example:<sp/>ceedling<sp/>&quot;test:pattern[(I|i)nit]&quot;<sp/>will</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>execute<sp/>all<sp/>tests<sp/>named<sp/>for<sp/>initialization<sp/>testing.<sp/>Note:<sp/>quotes<sp/>may</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>be<sp/>necessary<sp/>around<sp/>the<sp/>ceedling<sp/>parameter<sp/>to<sp/>distinguish<sp/>regex<sp/>characters</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>from<sp/>command<sp/>line<sp/>operators.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`ceedling<sp/>test:path[*]`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>Execute<sp/>any<sp/>tests<sp/>whose<sp/>path<sp/>contains<sp/>the<sp/>given<sp/>string<sp/>(case</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>sensitive).<sp/>Example:<sp/>ceedling<sp/>test:path[foo/bar]<sp/>will<sp/>execute<sp/>all<sp/>tests</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>whose<sp/>path<sp/>contains<sp/>foo/bar.<sp/>Note:<sp/>both<sp/>directory<sp/>separator<sp/>characters</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>/<sp/>and<sp/>\<sp/>are<sp/>valid.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`ceedling<sp/>release`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>Build<sp/>all<sp/>source<sp/>into<sp/>a<sp/>release<sp/>artifact<sp/>(if<sp/>the<sp/>release<sp/>build<sp/>option</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>is<sp/>configured).</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`ceedling<sp/>release:compile:*`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>Sometimes<sp/>you<sp/>just<sp/>need<sp/>to<sp/>compile<sp/>a<sp/>single<sp/>file<sp/>dagnabit.<sp/>Example:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ceedling<sp/>release:compile:foo.c</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`ceedling<sp/>release:assemble:*`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>Sometimes<sp/>you<sp/>just<sp/>need<sp/>to<sp/>assemble<sp/>a<sp/>single<sp/>file<sp/>doggonit.<sp/>Example:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ceedling<sp/>release:assemble:foo.s</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`ceedling<sp/>module:create[Filename]`:</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`ceedling<sp/>module:create[&lt;Path:&gt;Filename]`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>It&apos;s<sp/>often<sp/>helpful<sp/>to<sp/>create<sp/>a<sp/>file<sp/>automatically.<sp/>What&apos;s<sp/>better<sp/>than</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>that?<sp/>Creating<sp/>a<sp/>source<sp/>file,<sp/>a<sp/>header<sp/>file,<sp/>and<sp/>a<sp/>corresponding<sp/>test</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>file<sp/>all<sp/>in<sp/>one<sp/>step!</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>There<sp/>are<sp/>also<sp/>patterns<sp/>which<sp/>can<sp/>be<sp/>specified<sp/>to<sp/>automatically<sp/>generate</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>a<sp/>bunch<sp/>of<sp/>files.<sp/>Try<sp/>`ceedling<sp/>module:create[Poodles,mch]`<sp/>for<sp/>example!</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>The<sp/>module<sp/>generator<sp/>has<sp/>several<sp/>options<sp/>you<sp/>can<sp/>configure.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>F.e.<sp/>Generating<sp/>the<sp/>source/header/test<sp/>file<sp/>in<sp/>a<sp/>subdirectory<sp/>(by<sp/>adding<sp/>&lt;Path&gt;<sp/>when<sp/>calling<sp/>module:create).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>For<sp/>more<sp/>info,<sp/>refer<sp/>to<sp/>the<sp/>[Module<sp/>Generator](https://github.com/ThrowTheSwitch/Ceedling/blob/master/docs/CeedlingPacket.md#module-generator)<sp/>section.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`ceedling<sp/>logging<sp/>&lt;tasks...&gt;`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>Enable<sp/>logging<sp/>to<sp/>&lt;build<sp/>path&gt;/logs.<sp/>Must<sp/>come<sp/>before<sp/>test<sp/>and<sp/>release</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>tasks<sp/>to<sp/>log<sp/>their<sp/>steps<sp/>and<sp/>output.<sp/>Log<sp/>names<sp/>are<sp/>a<sp/>concatenation<sp/>of</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>project,<sp/>user,<sp/>and<sp/>option<sp/>files<sp/>loaded.<sp/>User<sp/>and<sp/>option<sp/>files<sp/>are</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>documented<sp/>in<sp/>the<sp/>advanced<sp/>topics<sp/>section<sp/>of<sp/>this<sp/>document.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`ceedling<sp/>verbosity[x]<sp/>&lt;tasks...&gt;`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>Change<sp/>the<sp/>default<sp/>verbosity<sp/>level.<sp/>[x]<sp/>ranges<sp/>from<sp/>0<sp/>(quiet)<sp/>to<sp/>4</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>(obnoxious).<sp/>Level<sp/>[3]<sp/>is<sp/>the<sp/>default.<sp/>The<sp/>verbosity<sp/>task<sp/>must<sp/>precede</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>all<sp/>tasks<sp/>in<sp/>the<sp/>command<sp/>line<sp/>list<sp/>for<sp/>which<sp/>output<sp/>is<sp/>desired<sp/>to<sp/>be</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>seen.<sp/>Verbosity<sp/>settings<sp/>are<sp/>generally<sp/>most<sp/>meaningful<sp/>in<sp/>conjunction</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>with<sp/>test<sp/>and<sp/>release<sp/>tasks.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`ceedling<sp/>summary`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>If<sp/>plugins<sp/>are<sp/>enabled,<sp/>this<sp/>task<sp/>will<sp/>execute<sp/>the<sp/>summary<sp/>method<sp/>of</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>any<sp/>plugins<sp/>supporting<sp/>it.<sp/>This<sp/>task<sp/>is<sp/>intended<sp/>to<sp/>provide<sp/>a<sp/>quick</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>roundup<sp/>of<sp/>build<sp/>artifact<sp/>metrics<sp/>without<sp/>re-running<sp/>any<sp/>part<sp/>of<sp/>the</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>build.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`ceedling<sp/>clean`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>Deletes<sp/>all<sp/>toolchain<sp/>binary<sp/>artifacts<sp/>(object<sp/>files,<sp/>executables),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>test<sp/>results,<sp/>and<sp/>any<sp/>temporary<sp/>files.<sp/>Clean<sp/>produces<sp/>no<sp/>output<sp/>at<sp/>the</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>command<sp/>line<sp/>unless<sp/>verbosity<sp/>has<sp/>been<sp/>set<sp/>to<sp/>an<sp/>appreciable<sp/>level.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`ceedling<sp/>clobber`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>Extends<sp/>clean<sp/>task&apos;s<sp/>behavior<sp/>to<sp/>also<sp/>remove<sp/>generated<sp/>files:<sp/>test</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>runners,<sp/>mocks,<sp/>preprocessor<sp/>output.<sp/>Clobber<sp/>produces<sp/>no<sp/>output<sp/>at<sp/>the</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>command<sp/>line<sp/>unless<sp/>verbosity<sp/>has<sp/>been<sp/>set<sp/>to<sp/>an<sp/>appreciable<sp/>level.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">To<sp/>better<sp/>understand<sp/>Rake<sp/>conventions,<sp/>Rake<sp/>execution,<sp/>and</highlight></codeline>
<codeline><highlight class="normal">Rakefiles,<sp/>consult<sp/>the<sp/>[Rake<sp/>tutorial,<sp/>examples,<sp/>and<sp/>user<sp/>guide][guide].</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">[guide]:<sp/>http://rubyrake.org/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">At<sp/>present,<sp/>none<sp/>of<sp/>Ceedling&apos;s<sp/>commands<sp/>provide<sp/>persistence.</highlight></codeline>
<codeline><highlight class="normal">That<sp/>is,<sp/>they<sp/>must<sp/>each<sp/>be<sp/>specified<sp/>at<sp/>the<sp/>command<sp/>line<sp/>each<sp/>time</highlight></codeline>
<codeline><highlight class="normal">they<sp/>are<sp/>needed.<sp/>For<sp/>instance,<sp/>Ceedling&apos;s<sp/>verbosity<sp/>command</highlight></codeline>
<codeline><highlight class="normal">only<sp/>affects<sp/>output<sp/>at<sp/>the<sp/>time<sp/>it&apos;s<sp/>run.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Individual<sp/>test<sp/>and<sp/>release<sp/>file<sp/>tasks</highlight></codeline>
<codeline><highlight class="normal">are<sp/>not<sp/>listed<sp/>in<sp/>`-T`<sp/>output.<sp/>Because<sp/>so<sp/>many<sp/>files<sp/>may<sp/>be<sp/>present</highlight></codeline>
<codeline><highlight class="normal">it&apos;s<sp/>unwieldy<sp/>to<sp/>list<sp/>them<sp/>all.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Multiple<sp/>rake<sp/>tasks<sp/>can<sp/>be<sp/>executed<sp/>at<sp/>the<sp/>command<sp/>line<sp/>(order</highlight></codeline>
<codeline><highlight class="normal">is<sp/>executed<sp/>as<sp/>provided).<sp/>For<sp/>example,<sp/>`ceed</highlight></codeline>
<codeline><highlight class="normal">clobber<sp/>test:all<sp/>release`<sp/>will<sp/>removed<sp/>all<sp/>generated<sp/>files;</highlight></codeline>
<codeline><highlight class="normal">build<sp/>and<sp/>run<sp/>all<sp/>tests;<sp/>and<sp/>then<sp/>build<sp/>all<sp/>source<sp/>-<sp/>in<sp/>that<sp/>order.</highlight></codeline>
<codeline><highlight class="normal">If<sp/>any<sp/>Rake<sp/>task<sp/>fails<sp/>along<sp/>the<sp/>way,<sp/>execution<sp/>halts<sp/>before<sp/>the</highlight></codeline>
<codeline><highlight class="normal">next<sp/>task.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>`clobber`<sp/>task<sp/>removes<sp/>certain<sp/>build<sp/>directories<sp/>in<sp/>the</highlight></codeline>
<codeline><highlight class="normal">course<sp/>of<sp/>deleting<sp/>generated<sp/>files.<sp/>In<sp/>general,<sp/>it&apos;s<sp/>best<sp/>not</highlight></codeline>
<codeline><highlight class="normal">to<sp/>add<sp/>to<sp/>source<sp/>control<sp/>any<sp/>Ceedling<sp/>generated<sp/>directories</highlight></codeline>
<codeline><highlight class="normal">below<sp/>the<sp/>root<sp/>of<sp/>your<sp/>top-level<sp/>build<sp/>directory.<sp/>That<sp/>is,<sp/>leave</highlight></codeline>
<codeline><highlight class="normal">anything<sp/>Ceedling<sp/>&amp;<sp/>its<sp/>accompanying<sp/>tools<sp/>generate<sp/>out<sp/>of<sp/>source</highlight></codeline>
<codeline><highlight class="normal">control<sp/>(but<sp/>go<sp/>ahead<sp/>and<sp/>add<sp/>the<sp/>top-level<sp/>build<sp/>directory<sp/>that</highlight></codeline>
<codeline><highlight class="normal">holds<sp/>all<sp/>that<sp/>stuff).<sp/>Also,<sp/>since<sp/>Ceedling<sp/>is<sp/>pretty<sp/>smart<sp/>about</highlight></codeline>
<codeline><highlight class="normal">what<sp/>it<sp/>rebuilds<sp/>and<sp/>regenerates,<sp/>you<sp/>needn&apos;t<sp/>clobber<sp/>often.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Important<sp/>Conventions</highlight></codeline>
<codeline><highlight class="normal">=====================</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Directory<sp/>Structure,<sp/>Filenames<sp/>&amp;<sp/>Extensions</highlight></codeline>
<codeline><highlight class="normal">-------------------------------------------</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Much<sp/>of<sp/>Ceedling&apos;s<sp/>functionality<sp/>is<sp/>driven<sp/>by<sp/>collecting<sp/>files</highlight></codeline>
<codeline><highlight class="normal">matching<sp/>certain<sp/>patterns<sp/>inside<sp/>the<sp/>paths<sp/>it&apos;s<sp/>configured</highlight></codeline>
<codeline><highlight class="normal">to<sp/>search.<sp/>See<sp/>the<sp/>documentation<sp/>for<sp/>the<sp/>[:extensions]<sp/>section</highlight></codeline>
<codeline><highlight class="normal">of<sp/>your<sp/>configuration<sp/>file<sp/>(found<sp/>later<sp/>in<sp/>this<sp/>document)<sp/>to</highlight></codeline>
<codeline><highlight class="normal">configure<sp/>the<sp/>file<sp/>extensions<sp/>Ceedling<sp/>uses<sp/>to<sp/>match<sp/>and<sp/>collect</highlight></codeline>
<codeline><highlight class="normal">files.<sp/>Test<sp/>file<sp/>naming<sp/>is<sp/>covered<sp/>later<sp/>in<sp/>this<sp/>section.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Test<sp/>files<sp/>and<sp/>source<sp/>files<sp/>must<sp/>be<sp/>segregated<sp/>by<sp/>directories.</highlight></codeline>
<codeline><highlight class="normal">Any<sp/>directory<sp/>structure<sp/>will<sp/>do.<sp/>Tests<sp/>can<sp/>be<sp/>held<sp/>in<sp/>subdirectories</highlight></codeline>
<codeline><highlight class="normal">within<sp/>source<sp/>directories,<sp/>or<sp/>tests<sp/>and<sp/>source<sp/>directories</highlight></codeline>
<codeline><highlight class="normal">can<sp/>be<sp/>wholly<sp/>separated<sp/>at<sp/>the<sp/>top<sp/>of<sp/>your<sp/>project&apos;s<sp/>directory</highlight></codeline>
<codeline><highlight class="normal">tree.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Search<sp/>Path<sp/>Order</highlight></codeline>
<codeline><highlight class="normal">-----------------</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">When<sp/>Ceedling<sp/>searches<sp/>for<sp/>files<sp/>(e.g.<sp/>looking<sp/>for<sp/>header<sp/>files</highlight></codeline>
<codeline><highlight class="normal">to<sp/>mock)<sp/>or<sp/>when<sp/>it<sp/>provides<sp/>search<sp/>paths<sp/>to<sp/>any<sp/>of<sp/>the<sp/>default</highlight></codeline>
<codeline><highlight class="normal">gcc<sp/>toolchain<sp/>executables,<sp/>it<sp/>organizes<sp/>/<sp/>prioritizes<sp/>its<sp/>search</highlight></codeline>
<codeline><highlight class="normal">paths.<sp/>The<sp/>order<sp/>is<sp/>always:<sp/>test<sp/>paths,<sp/>support<sp/>paths,<sp/>source</highlight></codeline>
<codeline><highlight class="normal">paths,<sp/>and<sp/>then<sp/>include<sp/>paths.<sp/>This<sp/>can<sp/>be<sp/>useful,<sp/>for<sp/>instance,</highlight></codeline>
<codeline><highlight class="normal">in<sp/>certain<sp/>testing<sp/>scenarios<sp/>where<sp/>we<sp/>desire<sp/>Ceedling<sp/>or<sp/>a<sp/>compiler</highlight></codeline>
<codeline><highlight class="normal">to<sp/>find<sp/>a<sp/>stand-in<sp/>header<sp/>file<sp/>in<sp/>our<sp/>support<sp/>directory<sp/>before</highlight></codeline>
<codeline><highlight class="normal">the<sp/>actual<sp/>source<sp/>header<sp/>file<sp/>of<sp/>the<sp/>same<sp/>name.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">This<sp/>convention<sp/>only<sp/>holds<sp/>when<sp/>Ceedling<sp/>is<sp/>using<sp/>its<sp/>default</highlight></codeline>
<codeline><highlight class="normal">tool<sp/>configurations<sp/>and<sp/>/<sp/>or<sp/>when<sp/>tests<sp/>are<sp/>involved.<sp/>If<sp/>you<sp/>define</highlight></codeline>
<codeline><highlight class="normal">your<sp/>own<sp/>tools<sp/>in<sp/>the<sp/>configuration<sp/>file<sp/>(see<sp/>the<sp/>[:tools]<sp/>section</highlight></codeline>
<codeline><highlight class="normal">documented<sp/>later<sp/>in<sp/>this<sp/>here<sp/>document),<sp/>you<sp/>have<sp/>complete<sp/>control</highlight></codeline>
<codeline><highlight class="normal">over<sp/>what<sp/>directories<sp/>are<sp/>searched<sp/>and<sp/>in<sp/>what<sp/>order.<sp/>Further,</highlight></codeline>
<codeline><highlight class="normal">test<sp/>and<sp/>support<sp/>directories<sp/>are<sp/>only<sp/>searched<sp/>when<sp/>appropriate.</highlight></codeline>
<codeline><highlight class="normal">That<sp/>is,<sp/>when<sp/>running<sp/>a<sp/>release<sp/>build,<sp/>test<sp/>and<sp/>support<sp/>directories</highlight></codeline>
<codeline><highlight class="normal">are<sp/>not<sp/>used<sp/>at<sp/>all.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Source<sp/>Files<sp/>&amp;<sp/>Binary<sp/>Release<sp/>Artifacts</highlight></codeline>
<codeline><highlight class="normal">---------------------------------------</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Your<sp/>binary<sp/>release<sp/>artifact<sp/>results<sp/>from<sp/>the<sp/>compilation<sp/>and</highlight></codeline>
<codeline><highlight class="normal">linking<sp/>of<sp/>all<sp/>source<sp/>files<sp/>Ceedling<sp/>finds<sp/>in<sp/>the<sp/>specified<sp/>source</highlight></codeline>
<codeline><highlight class="normal">directories.<sp/>At<sp/>present<sp/>only<sp/>source<sp/>files<sp/>with<sp/>a<sp/>single<sp/>(configurable)</highlight></codeline>
<codeline><highlight class="normal">extension<sp/>are<sp/>recognized.<sp/>That<sp/>is,<sp/>*.c<sp/>and<sp/>*.cc<sp/>files<sp/>will<sp/>not</highlight></codeline>
<codeline><highlight class="normal">both<sp/>be<sp/>recognized<sp/>-<sp/>only<sp/>one<sp/>or<sp/>the<sp/>other.<sp/>See<sp/>the<sp/>configuration</highlight></codeline>
<codeline><highlight class="normal">options<sp/>and<sp/>defaults<sp/>in<sp/>the<sp/>documentation<sp/>for<sp/>the<sp/>[:extensions]</highlight></codeline>
<codeline><highlight class="normal">sections<sp/>of<sp/>your<sp/>configuration<sp/>file<sp/>(found<sp/>later<sp/>in<sp/>this<sp/>document).</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Test<sp/>Files<sp/>&amp;<sp/>Executable<sp/>Test<sp/>Fixtures</highlight></codeline>
<codeline><highlight class="normal">-------------------------------------</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Ceedling<sp/>builds<sp/>each<sp/>individual<sp/>test<sp/>file<sp/>with<sp/>its<sp/>accompanying</highlight></codeline>
<codeline><highlight class="normal">source<sp/>file(s)<sp/>into<sp/>a<sp/>single,<sp/>monolithic<sp/>test<sp/>fixture<sp/>executable.</highlight></codeline>
<codeline><highlight class="normal">Test<sp/>files<sp/>are<sp/>recognized<sp/>by<sp/>a<sp/>naming<sp/>convention:<sp/>a<sp/>(configurable)</highlight></codeline>
<codeline><highlight class="normal">prefix<sp/>such<sp/>as<sp/>&quot;`test_`&quot;<sp/>in<sp/>the<sp/>file<sp/>name<sp/>with<sp/>the<sp/>same<sp/>file<sp/>extension</highlight></codeline>
<codeline><highlight class="normal">as<sp/>used<sp/>by<sp/>your<sp/>C<sp/>source<sp/>files.<sp/>See<sp/>the<sp/>configuration<sp/>options</highlight></codeline>
<codeline><highlight class="normal">and<sp/>defaults<sp/>in<sp/>the<sp/>documentation<sp/>for<sp/>the<sp/>[:project]<sp/>and<sp/>[:extensions]</highlight></codeline>
<codeline><highlight class="normal">sections<sp/>of<sp/>your<sp/>configuration<sp/>file<sp/>(found<sp/>later<sp/>in<sp/>this<sp/>document).</highlight></codeline>
<codeline><highlight class="normal">Depending<sp/>on<sp/>your<sp/>configuration<sp/>options,<sp/>Ceedling<sp/>can<sp/>recognize</highlight></codeline>
<codeline><highlight class="normal">a<sp/>variety<sp/>of<sp/>test<sp/>file<sp/>naming<sp/>patterns<sp/>in<sp/>your<sp/>test<sp/>search<sp/>paths.</highlight></codeline>
<codeline><highlight class="normal">For<sp/>example:<sp/>`test_some_super_functionality.c`,<sp/>`TestYourSourceFile.cc`,</highlight></codeline>
<codeline><highlight class="normal">or<sp/>`testing_MyAwesomeCode.C`<sp/>could<sp/>each<sp/>be<sp/>valid<sp/>test<sp/>file</highlight></codeline>
<codeline><highlight class="normal">names.<sp/>Note,<sp/>however,<sp/>that<sp/>Ceedling<sp/>can<sp/>recognize<sp/>only<sp/>one<sp/>test</highlight></codeline>
<codeline><highlight class="normal">file<sp/>naming<sp/>convention<sp/>per<sp/>project.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Ceedling<sp/>knows<sp/>what<sp/>files<sp/>to<sp/>compile<sp/>and<sp/>link<sp/>into<sp/>each<sp/>individual</highlight></codeline>
<codeline><highlight class="normal">test<sp/>executable<sp/>by<sp/>way<sp/>of<sp/>the<sp/>#include<sp/>list<sp/>contained<sp/>in<sp/>each</highlight></codeline>
<codeline><highlight class="normal">test<sp/>file.<sp/>Any<sp/>C<sp/>source<sp/>files<sp/>in<sp/>the<sp/>configured<sp/>search<sp/>directories</highlight></codeline>
<codeline><highlight class="normal">that<sp/>correspond<sp/>to<sp/>the<sp/>header<sp/>files<sp/>included<sp/>in<sp/>a<sp/>test<sp/>file<sp/>will</highlight></codeline>
<codeline><highlight class="normal">be<sp/>compiled<sp/>and<sp/>linked<sp/>into<sp/>the<sp/>resulting<sp/>test<sp/>fixture<sp/>executable.</highlight></codeline>
<codeline><highlight class="normal">From<sp/>this<sp/>same<sp/>#include<sp/>list,<sp/>Ceedling<sp/>knows<sp/>which<sp/>files<sp/>to<sp/>mock</highlight></codeline>
<codeline><highlight class="normal">and<sp/>compile<sp/>and<sp/>link<sp/>into<sp/>the<sp/>test<sp/>executable<sp/>(if<sp/>you<sp/>use<sp/>mocks</highlight></codeline>
<codeline><highlight class="normal">in<sp/>your<sp/>tests).<sp/>That<sp/>was<sp/>a<sp/>lot<sp/>of<sp/>clauses<sp/>and<sp/>information<sp/>in<sp/>a<sp/>very</highlight></codeline>
<codeline><highlight class="normal">few<sp/>sentences;<sp/>the<sp/>example<sp/>that<sp/>follows<sp/>in<sp/>a<sp/>bit<sp/>will<sp/>make<sp/>it<sp/>clearer.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">By<sp/>naming<sp/>your<sp/>test<sp/>functions<sp/>according<sp/>to<sp/>convention,<sp/>Ceedling</highlight></codeline>
<codeline><highlight class="normal">will<sp/>extract<sp/>and<sp/>collect<sp/>into<sp/>a<sp/>runner<sp/>C<sp/>file<sp/>calls<sp/>to<sp/>all<sp/>your</highlight></codeline>
<codeline><highlight class="normal">test<sp/>case<sp/>functions.<sp/>This<sp/>runner<sp/>file<sp/>handles<sp/>all<sp/>the<sp/>execution</highlight></codeline>
<codeline><highlight class="normal">minutiae<sp/>so<sp/>that<sp/>your<sp/>test<sp/>file<sp/>can<sp/>be<sp/>quite<sp/>simple<sp/>and<sp/>so<sp/>that</highlight></codeline>
<codeline><highlight class="normal">you<sp/>never<sp/>forget<sp/>to<sp/>wire<sp/>up<sp/>a<sp/>test<sp/>function<sp/>to<sp/>be<sp/>executed.<sp/>In<sp/>this</highlight></codeline>
<codeline><highlight class="normal">generated<sp/>runner<sp/>lives<sp/>the<sp/>`main()`<sp/>entry<sp/>point<sp/>for<sp/>the<sp/>resulting</highlight></codeline>
<codeline><highlight class="normal">test<sp/>executable.<sp/>There<sp/>are<sp/>no<sp/>configuration<sp/>options<sp/>for<sp/>the</highlight></codeline>
<codeline><highlight class="normal">naming<sp/>convention<sp/>of<sp/>your<sp/>test<sp/>case<sp/>functions.<sp/>A<sp/>test<sp/>case<sp/>function</highlight></codeline>
<codeline><highlight class="normal">signature<sp/>must<sp/>have<sp/>these<sp/>three<sp/>elements:<sp/>void<sp/>return,<sp/>void</highlight></codeline>
<codeline><highlight class="normal">parameter<sp/>list,<sp/>and<sp/>the<sp/>function<sp/>name<sp/>prepended<sp/>with<sp/>lowercase</highlight></codeline>
<codeline><highlight class="normal">&quot;`test`&quot;.<sp/>In<sp/>other<sp/>words,<sp/>a<sp/>test<sp/>function<sp/>signature<sp/>should<sp/>look</highlight></codeline>
<codeline><highlight class="normal">like<sp/>this:<sp/>`void<sp/>test``[any<sp/>name<sp/>you<sp/>like]``(void)`.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">A<sp/>commented<sp/>sample<sp/>test<sp/>file<sp/>follows<sp/>on<sp/>the<sp/>next<sp/>page.<sp/>Also,<sp/>see</highlight></codeline>
<codeline><highlight class="normal">the<sp/>sample<sp/>project<sp/>contained<sp/>in<sp/>the<sp/>Ceedling<sp/>documentation</highlight></codeline>
<codeline><highlight class="normal">bundle.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">//<sp/>test_foo.c<sp/>-----------------------------------------------</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;unity.h&quot;<sp/><sp/><sp/><sp/><sp/>//<sp/>compile/link<sp/>in<sp/>Unity<sp/>test<sp/>framework</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;types.h&quot;<sp/><sp/><sp/><sp/><sp/>//<sp/>header<sp/>file<sp/>with<sp/>no<sp/>*.c<sp/>file<sp/>--<sp/>no<sp/>compilation/linking</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;foo.h&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>source<sp/>file<sp/>foo.c<sp/>under<sp/>test</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;mock_bar.h&quot;<sp/><sp/>//<sp/>bar.h<sp/>will<sp/>be<sp/>found<sp/>and<sp/>mocked<sp/>as<sp/>mock_bar.c<sp/>+<sp/>compiled/linked<sp/>in;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>foo.c<sp/>includes<sp/>bar.h<sp/>and<sp/>uses<sp/>functions<sp/>declared<sp/>in<sp/>it</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;mock_baz.h&quot;<sp/><sp/>//<sp/>baz.h<sp/>will<sp/>be<sp/>found<sp/>and<sp/>mocked<sp/>as<sp/>mock_baz.c<sp/>+<sp/>compiled/linked<sp/>in</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>foo.c<sp/>includes<sp/>baz.h<sp/>and<sp/>uses<sp/>functions<sp/>declared<sp/>in<sp/>it</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>setUp(void)<sp/>{}<sp/><sp/><sp/><sp/>//<sp/>every<sp/>test<sp/>file<sp/>requires<sp/>this<sp/>function;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>setUp()<sp/>is<sp/>called<sp/>by<sp/>the<sp/>generated<sp/>runner<sp/>before<sp/>each<sp/>test<sp/>case<sp/>function</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>tearDown(void)<sp/>{}<sp/>//<sp/>every<sp/>test<sp/>file<sp/>requires<sp/>this<sp/>function;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>tearDown()<sp/>is<sp/>called<sp/>by<sp/>the<sp/>generated<sp/>runner<sp/>before<sp/>each<sp/>test<sp/>case<sp/>function</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>a<sp/>test<sp/>case<sp/>function</highlight></codeline>
<codeline><highlight class="normal">void<sp/>test_Foo_Function1_should_Call_Bar_AndGrill(void)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Bar_AndGrill_Expect();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>setup<sp/>function<sp/>from<sp/>mock_bar.c<sp/>that<sp/>instructs<sp/>our</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>framework<sp/>to<sp/>expect<sp/>Bar_AndGrill()<sp/>to<sp/>be<sp/>called<sp/>once</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TEST_ASSERT_EQUAL(0xFF,<sp/>Foo_Function1());<sp/>//<sp/>assertion<sp/>provided<sp/>by<sp/>Unity</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Foo_Function1()<sp/>calls<sp/>Bar_AndGrill()<sp/>&amp;<sp/>returns<sp/>a<sp/>byte</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>another<sp/>test<sp/>case<sp/>function</highlight></codeline>
<codeline><highlight class="normal">void<sp/>test_Foo_Function2_should_Call_Baz_Tec(void)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Baz_Tec_ExpectAnd_Return(1);<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>setup<sp/>function<sp/>provided<sp/>by<sp/>mock_baz.c<sp/>that<sp/>instructs<sp/>our</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>framework<sp/>to<sp/>expect<sp/>Baz_Tec()<sp/>to<sp/>be<sp/>called<sp/>once<sp/>and<sp/>return<sp/>1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TEST_ASSERT_TRUE(Foo_Function2());<sp/>//<sp/>assertion<sp/>provided<sp/>by<sp/>Unity</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>end<sp/>of<sp/>test_foo.c<sp/>----------------------------------------</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">From<sp/>the<sp/>test<sp/>file<sp/>specified<sp/>above<sp/>Ceedling<sp/>will<sp/>generate<sp/>`test_foo_runner.c`;</highlight></codeline>
<codeline><highlight class="normal">this<sp/>runner<sp/>file<sp/>will<sp/>contain<sp/>`main()`<sp/>and<sp/>call<sp/>both<sp/>of<sp/>the<sp/>example</highlight></codeline>
<codeline><highlight class="normal">test<sp/>case<sp/>functions.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>final<sp/>test<sp/>executable<sp/>will<sp/>be<sp/>`test_foo.exe`<sp/>(for<sp/>Windows</highlight></codeline>
<codeline><highlight class="normal">machines<sp/>or<sp/>`test_foo.out`<sp/>for<sp/>*nix<sp/>systems<sp/>-<sp/>depending<sp/>on<sp/>default</highlight></codeline>
<codeline><highlight class="normal">or<sp/>configured<sp/>file<sp/>extensions).<sp/>Based<sp/>on<sp/>the<sp/>#include<sp/>list<sp/>above,</highlight></codeline>
<codeline><highlight class="normal">the<sp/>test<sp/>executable<sp/>will<sp/>be<sp/>the<sp/>output<sp/>of<sp/>the<sp/>linker<sp/>having<sp/>processed</highlight></codeline>
<codeline><highlight class="normal">`unity.o`,<sp/>`foo.o`,<sp/>`mock_bar.o`,<sp/>`mock_baz.o`,<sp/>`test_foo.o`,</highlight></codeline>
<codeline><highlight class="normal">and<sp/>`test_foo_runner.o`.<sp/>Ceedling<sp/>finds<sp/>the<sp/>files,<sp/>generates</highlight></codeline>
<codeline><highlight class="normal">mocks,<sp/>generates<sp/>a<sp/>runner,<sp/>compiles<sp/>all<sp/>the<sp/>files,<sp/>and<sp/>links</highlight></codeline>
<codeline><highlight class="normal">everything<sp/>into<sp/>the<sp/>test<sp/>executable.<sp/>Ceedling<sp/>will<sp/>then<sp/>run</highlight></codeline>
<codeline><highlight class="normal">the<sp/>test<sp/>executable<sp/>and<sp/>collect<sp/>test<sp/>results<sp/>from<sp/>it<sp/>to<sp/>be<sp/>reported</highlight></codeline>
<codeline><highlight class="normal">to<sp/>the<sp/>developer<sp/>at<sp/>the<sp/>command<sp/>line.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">For<sp/>more<sp/>on<sp/>the<sp/>assertions<sp/>and<sp/>mocks<sp/>shown,<sp/>consult<sp/>the<sp/>documentation</highlight></codeline>
<codeline><highlight class="normal">for<sp/>Unity<sp/>and<sp/>CMock.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>Magic<sp/>of<sp/>Dependency<sp/>Tracking</highlight></codeline>
<codeline><highlight class="normal">--------------------------------</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Ceedling<sp/>is<sp/>pretty<sp/>smart<sp/>in<sp/>using<sp/>Rake<sp/>to<sp/>build<sp/>up<sp/>your<sp/>project&apos;s</highlight></codeline>
<codeline><highlight class="normal">dependencies.<sp/>This<sp/>means<sp/>that<sp/>Ceedling<sp/>automagically<sp/>rebuilds</highlight></codeline>
<codeline><highlight class="normal">all<sp/>the<sp/>appropriate<sp/>files<sp/>in<sp/>your<sp/>project<sp/>when<sp/>necessary:<sp/>when</highlight></codeline>
<codeline><highlight class="normal">your<sp/>configuration<sp/>changes,<sp/>Ceedling<sp/>or<sp/>any<sp/>of<sp/>the<sp/>other<sp/>tools</highlight></codeline>
<codeline><highlight class="normal">are<sp/>updated,<sp/>or<sp/>your<sp/>source<sp/>or<sp/>test<sp/>files<sp/>change.<sp/>For<sp/>instance,</highlight></codeline>
<codeline><highlight class="normal">if<sp/>you<sp/>modify<sp/>a<sp/>header<sp/>file<sp/>that<sp/>is<sp/>mocked,<sp/>Ceedling<sp/>will<sp/>ensure</highlight></codeline>
<codeline><highlight class="normal">that<sp/>the<sp/>mock<sp/>is<sp/>regenerated<sp/>and<sp/>all<sp/>tests<sp/>that<sp/>use<sp/>that<sp/>mock<sp/>are</highlight></codeline>
<codeline><highlight class="normal">rebuilt<sp/>and<sp/>re-run<sp/>when<sp/>you<sp/>initiate<sp/>a<sp/>relevant<sp/>testing<sp/>task.</highlight></codeline>
<codeline><highlight class="normal">When<sp/>you<sp/>see<sp/>things<sp/>rebuilding,<sp/>it&apos;s<sp/>for<sp/>a<sp/>good<sp/>reason.<sp/>Ceedling</highlight></codeline>
<codeline><highlight class="normal">attempts<sp/>to<sp/>regenerate<sp/>and<sp/>rebuild<sp/>only<sp/>what&apos;s<sp/>needed<sp/>for<sp/>a<sp/>given</highlight></codeline>
<codeline><highlight class="normal">execution<sp/>of<sp/>a<sp/>task.<sp/>In<sp/>the<sp/>case<sp/>of<sp/>large<sp/>projects,<sp/>assembling</highlight></codeline>
<codeline><highlight class="normal">dependencies<sp/>and<sp/>acting<sp/>upon<sp/>them<sp/>can<sp/>cause<sp/>some<sp/>delay<sp/>in<sp/>executing</highlight></codeline>
<codeline><highlight class="normal">tasks.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">With<sp/>one<sp/>exception,<sp/>the<sp/>trigger<sp/>to<sp/>rebuild<sp/>or<sp/>regenerate<sp/>a<sp/>file</highlight></codeline>
<codeline><highlight class="normal">is<sp/>always<sp/>a<sp/>disparity<sp/>in<sp/>timestamps<sp/>between<sp/>a<sp/>target<sp/>file<sp/>and</highlight></codeline>
<codeline><highlight class="normal">its<sp/>source<sp/>-<sp/>if<sp/>an<sp/>input<sp/>file<sp/>is<sp/>newer<sp/>than<sp/>its<sp/>target<sp/>dependency,</highlight></codeline>
<codeline><highlight class="normal">the<sp/>target<sp/>is<sp/>rebuilt<sp/>or<sp/>regenerated.<sp/>For<sp/>example,<sp/>if<sp/>the<sp/>C<sp/>source</highlight></codeline>
<codeline><highlight class="normal">file<sp/>from<sp/>which<sp/>an<sp/>object<sp/>file<sp/>is<sp/>compiled<sp/>is<sp/>newer<sp/>than<sp/>that<sp/>object</highlight></codeline>
<codeline><highlight class="normal">file<sp/>on<sp/>disk,<sp/>recompilation<sp/>will<sp/>occur<sp/>(of<sp/>course,<sp/>if<sp/>no<sp/>object</highlight></codeline>
<codeline><highlight class="normal">file<sp/>exists<sp/>on<sp/>disk,<sp/>compilation<sp/>will<sp/>always<sp/>occur).<sp/>The<sp/>one</highlight></codeline>
<codeline><highlight class="normal">exception<sp/>to<sp/>this<sp/>dependency<sp/>behavior<sp/>is<sp/>specific<sp/>to<sp/>your<sp/>input</highlight></codeline>
<codeline><highlight class="normal">configuration.<sp/>Only<sp/>if<sp/>your<sp/>logical<sp/>configuration<sp/>changes</highlight></codeline>
<codeline><highlight class="normal">will<sp/>a<sp/>system-wide<sp/>rebuild<sp/>occur.<sp/>Reorganizing<sp/>your<sp/>input<sp/>configuration</highlight></codeline>
<codeline><highlight class="normal">or<sp/>otherwise<sp/>updating<sp/>its<sp/>file<sp/>timestamp<sp/>without<sp/>modifying</highlight></codeline>
<codeline><highlight class="normal">the<sp/>values<sp/>within<sp/>the<sp/>file<sp/>will<sp/>not<sp/>trigger<sp/>a<sp/>rebuild.<sp/>This<sp/>behavior</highlight></codeline>
<codeline><highlight class="normal">handles<sp/>the<sp/>various<sp/>ways<sp/>in<sp/>which<sp/>your<sp/>input<sp/>configuration<sp/>can</highlight></codeline>
<codeline><highlight class="normal">change<sp/>(discussed<sp/>later<sp/>in<sp/>this<sp/>document)<sp/>without<sp/>having<sp/>changed</highlight></codeline>
<codeline><highlight class="normal">your<sp/>actual<sp/>project<sp/>YAML<sp/>file.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Ceedling<sp/>needs<sp/>a<sp/>bit<sp/>of<sp/>help<sp/>to<sp/>accomplish<sp/>its<sp/>magic<sp/>with<sp/>deep</highlight></codeline>
<codeline><highlight class="normal">dependencies.<sp/>Shallow<sp/>dependencies<sp/>are<sp/>straightforward:</highlight></codeline>
<codeline><highlight class="normal">a<sp/>mock<sp/>is<sp/>dependent<sp/>on<sp/>the<sp/>header<sp/>file<sp/>from<sp/>which<sp/>it&apos;s<sp/>generated,</highlight></codeline>
<codeline><highlight class="normal">a<sp/>test<sp/>file<sp/>is<sp/>dependent<sp/>upon<sp/>the<sp/>source<sp/>files<sp/>it<sp/>includes<sp/>(see</highlight></codeline>
<codeline><highlight class="normal">the<sp/>preceding<sp/>conventions<sp/>section),<sp/>etc.<sp/>Ceedling<sp/>handles</highlight></codeline>
<codeline><highlight class="normal">these<sp/>&quot;out<sp/>of<sp/>the<sp/>box.&quot;<sp/>Deep<sp/>dependencies<sp/>are<sp/>specifically<sp/>a</highlight></codeline>
<codeline><highlight class="normal">C-related<sp/>phenomenon<sp/>and<sp/>occur<sp/>as<sp/>a<sp/>consequence<sp/>of<sp/>include<sp/>statements</highlight></codeline>
<codeline><highlight class="normal">within<sp/>C<sp/>source<sp/>files.<sp/>Say<sp/>a<sp/>source<sp/>file<sp/>includes<sp/>a<sp/>header<sp/>file</highlight></codeline>
<codeline><highlight class="normal">and<sp/>that<sp/>header<sp/>file<sp/>in<sp/>turn<sp/>includes<sp/>another<sp/>header<sp/>file<sp/>which</highlight></codeline>
<codeline><highlight class="normal">includes<sp/>still<sp/>another<sp/>header<sp/>file.<sp/>A<sp/>change<sp/>to<sp/>the<sp/>deepest<sp/>header</highlight></codeline>
<codeline><highlight class="normal">file<sp/>should<sp/>trigger<sp/>a<sp/>recompilation<sp/>of<sp/>the<sp/>source<sp/>file,<sp/>a<sp/>relinking</highlight></codeline>
<codeline><highlight class="normal">of<sp/>all<sp/>the<sp/>object<sp/>files<sp/>comprising<sp/>a<sp/>test<sp/>fixture,<sp/>and<sp/>a<sp/>new<sp/>execution</highlight></codeline>
<codeline><highlight class="normal">of<sp/>that<sp/>test<sp/>fixture.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Ceedling<sp/>can<sp/>handle<sp/>deep<sp/>dependencies<sp/>but<sp/>only<sp/>with<sp/>the<sp/>help</highlight></codeline>
<codeline><highlight class="normal">of<sp/>a<sp/>C<sp/>preprocessor.<sp/>Ceedling<sp/>is<sp/>quite<sp/>capable,<sp/>but<sp/>a<sp/>full<sp/>C<sp/>preprocessor</highlight></codeline>
<codeline><highlight class="normal">it<sp/>ain&apos;t.<sp/>Your<sp/>project<sp/>can<sp/>be<sp/>configured<sp/>to<sp/>use<sp/>a<sp/>C<sp/>preprocessor</highlight></codeline>
<codeline><highlight class="normal">or<sp/>not.<sp/>Simple<sp/>projects<sp/>or<sp/>large<sp/>projects<sp/>constructed<sp/>so<sp/>as<sp/>to</highlight></codeline>
<codeline><highlight class="normal">be<sp/>quite<sp/>flat<sp/>in<sp/>their<sp/>include<sp/>structure<sp/>generally<sp/>don&apos;t<sp/>need</highlight></codeline>
<codeline><highlight class="normal">deep<sp/>dependency<sp/>preprocessing<sp/>-<sp/>and<sp/>can<sp/>enjoy<sp/>the<sp/>benefits<sp/>of</highlight></codeline>
<codeline><highlight class="normal">faster<sp/>execution.<sp/>Legacy<sp/>code,<sp/>on<sp/>the<sp/>other<sp/>hand,<sp/>will<sp/>almost</highlight></codeline>
<codeline><highlight class="normal">always<sp/>want<sp/>to<sp/>be<sp/>tested<sp/>with<sp/>deep<sp/>preprocessing<sp/>enabled.<sp/>Set</highlight></codeline>
<codeline><highlight class="normal">up<sp/>of<sp/>the<sp/>C<sp/>preprocessor<sp/>is<sp/>covered<sp/>in<sp/>the<sp/>documentation<sp/>for<sp/>the</highlight></codeline>
<codeline><highlight class="normal">[:project]<sp/>and<sp/>[:tools]<sp/>section<sp/>of<sp/>the<sp/>configuration<sp/>file<sp/>(later</highlight></codeline>
<codeline><highlight class="normal">in<sp/>this<sp/>document).<sp/>Ceedling<sp/>contains<sp/>all<sp/>the<sp/>configuration</highlight></codeline>
<codeline><highlight class="normal">necessary<sp/>to<sp/>use<sp/>the<sp/>gcc<sp/>preprocessor<sp/>by<sp/>default.<sp/>That<sp/>is,<sp/>as</highlight></codeline>
<codeline><highlight class="normal">long<sp/>as<sp/>gcc<sp/>is<sp/>in<sp/>your<sp/>system<sp/>search<sp/>path,<sp/>deep<sp/>preprocessing</highlight></codeline>
<codeline><highlight class="normal">of<sp/>deep<sp/>dependencies<sp/>is<sp/>available<sp/>to<sp/>you<sp/>by<sp/>simply<sp/>enabling<sp/>it</highlight></codeline>
<codeline><highlight class="normal">in<sp/>your<sp/>project<sp/>configuration<sp/>file.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Ceedling&apos;s<sp/>Build<sp/>Output</highlight></codeline>
<codeline><highlight class="normal">-----------------------</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Ceedling<sp/>requires<sp/>a<sp/>top-level<sp/>build<sp/>directory<sp/>for<sp/>all<sp/>the<sp/>stuff</highlight></codeline>
<codeline><highlight class="normal">that<sp/>it,<sp/>the<sp/>accompanying<sp/>test<sp/>tools,<sp/>and<sp/>your<sp/>toolchain<sp/>generate.</highlight></codeline>
<codeline><highlight class="normal">That<sp/>build<sp/>directory&apos;s<sp/>location<sp/>is<sp/>configured<sp/>in<sp/>the<sp/>[:project]</highlight></codeline>
<codeline><highlight class="normal">section<sp/>of<sp/>your<sp/>configuration<sp/>file<sp/>(discussed<sp/>later).<sp/>There</highlight></codeline>
<codeline><highlight class="normal">can<sp/>be<sp/>a<sp/>ton<sp/>of<sp/>generated<sp/>files.<sp/>By<sp/>and<sp/>large,<sp/>you<sp/>can<sp/>live<sp/>a<sp/>full</highlight></codeline>
<codeline><highlight class="normal">and<sp/>meaningful<sp/>life<sp/>knowing<sp/>absolutely<sp/>nothing<sp/>at<sp/>all<sp/>about</highlight></codeline>
<codeline><highlight class="normal">the<sp/>files<sp/>and<sp/>directories<sp/>generated<sp/>below<sp/>the<sp/>root<sp/>build<sp/>directory.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">As<sp/>noted<sp/>already,<sp/>it&apos;s<sp/>good<sp/>practice<sp/>to<sp/>add<sp/>your<sp/>top-level<sp/>build</highlight></codeline>
<codeline><highlight class="normal">directory<sp/>to<sp/>source<sp/>control<sp/>but<sp/>nothing<sp/>generated<sp/>beneath<sp/>it.</highlight></codeline>
<codeline><highlight class="normal">You&apos;ll<sp/>spare<sp/>yourself<sp/>headache<sp/>if<sp/>you<sp/>let<sp/>Ceedling<sp/>delete<sp/>and</highlight></codeline>
<codeline><highlight class="normal">regenerate<sp/>files<sp/>and<sp/>directories<sp/>in<sp/>a<sp/>non-versioned<sp/>corner</highlight></codeline>
<codeline><highlight class="normal">of<sp/>your<sp/>project&apos;s<sp/>filesystem<sp/>beneath<sp/>the<sp/>top-level<sp/>build<sp/>directory.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>`artifacts`<sp/>directory<sp/>is<sp/>the<sp/>one<sp/>and<sp/>only<sp/>directory<sp/>you<sp/>may</highlight></codeline>
<codeline><highlight class="normal">want<sp/>to<sp/>know<sp/>about<sp/>beneath<sp/>the<sp/>top-level<sp/>build<sp/>directory.<sp/>The</highlight></codeline>
<codeline><highlight class="normal">subdirectories<sp/>beneath<sp/>`artifacts`<sp/>will<sp/>hold<sp/>your<sp/>binary<sp/>release</highlight></codeline>
<codeline><highlight class="normal">target<sp/>output<sp/>(if<sp/>your<sp/>project<sp/>is<sp/>configured<sp/>for<sp/>release<sp/>builds)</highlight></codeline>
<codeline><highlight class="normal">and<sp/>will<sp/>serve<sp/>as<sp/>the<sp/>conventional<sp/>location<sp/>for<sp/>plugin<sp/>output.</highlight></codeline>
<codeline><highlight class="normal">This<sp/>directory<sp/>structure<sp/>was<sp/>chosen<sp/>specifically<sp/>because<sp/>it</highlight></codeline>
<codeline><highlight class="normal">tends<sp/>to<sp/>work<sp/>nicely<sp/>with<sp/>Continuous<sp/>Integration<sp/>setups<sp/>that</highlight></codeline>
<codeline><highlight class="normal">recognize<sp/>and<sp/>list<sp/>build<sp/>artifacts<sp/>for<sp/>retrieval<sp/>/<sp/>download.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>Almighty<sp/>Project<sp/>Configuration<sp/>File<sp/>(in<sp/>Glorious<sp/>YAML)</highlight></codeline>
<codeline><highlight class="normal">----------------------------------------------------------</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Please<sp/>consult<sp/>YAML<sp/>documentation<sp/>for<sp/>the<sp/>finer<sp/>points<sp/>of<sp/>format</highlight></codeline>
<codeline><highlight class="normal">and<sp/>to<sp/>understand<sp/>details<sp/>of<sp/>our<sp/>YAML-based<sp/>configuration<sp/>file.</highlight></codeline>
<codeline><highlight class="normal">We<sp/>recommend<sp/>[Wikipedia&apos;s<sp/>entry<sp/>on<sp/>YAML](http://en.wikipedia.org/wiki/Yaml)</highlight></codeline>
<codeline><highlight class="normal">for<sp/>this.<sp/>A<sp/>few<sp/>highlights<sp/>from<sp/>that<sp/>reference<sp/>page:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>YAML<sp/>streams<sp/>are<sp/>encoded<sp/>using<sp/>the<sp/>set<sp/>of<sp/>printable<sp/>Unicode</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>characters,<sp/>either<sp/>in<sp/>UTF-8<sp/>or<sp/>UTF-16</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>Whitespace<sp/>indentation<sp/>is<sp/>used<sp/>to<sp/>denote<sp/>structure;<sp/>however</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>tab<sp/>characters<sp/>are<sp/>never<sp/>allowed<sp/>as<sp/>indentation</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>Comments<sp/>begin<sp/>with<sp/>the<sp/>number<sp/>sign<sp/>(<sp/>#<sp/>),<sp/>can<sp/>start<sp/>anywhere</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>on<sp/>a<sp/>line,<sp/>and<sp/>continue<sp/>until<sp/>the<sp/>end<sp/>of<sp/>the<sp/>line<sp/>unless<sp/>enclosed</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>by<sp/>quotes</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>List<sp/>members<sp/>are<sp/>denoted<sp/>by<sp/>a<sp/>leading<sp/>hyphen<sp/>(<sp/>-<sp/>)<sp/>with<sp/>one<sp/>member</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>per<sp/>line,<sp/>or<sp/>enclosed<sp/>in<sp/>square<sp/>brackets<sp/>(<sp/>[<sp/>]<sp/>)<sp/>and<sp/>separated</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>by<sp/>comma<sp/>space<sp/>(<sp/>,<sp/>)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>Hashes<sp/>are<sp/>represented<sp/>using<sp/>the<sp/>colon<sp/>space<sp/>(<sp/>:<sp/>)<sp/>in<sp/>the<sp/>form</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>key:<sp/>value,<sp/>either<sp/>one<sp/>per<sp/>line<sp/>or<sp/>enclosed<sp/>in<sp/>curly<sp/>braces</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>(<sp/>{<sp/>}<sp/>)<sp/>and<sp/>separated<sp/>by<sp/>comma<sp/>space<sp/>(<sp/>,<sp/>)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>Strings<sp/>(scalars)<sp/>are<sp/>ordinarily<sp/>unquoted,<sp/>but<sp/>may<sp/>be<sp/>enclosed</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>in<sp/>double-quotes<sp/>(<sp/>&quot;<sp/>),<sp/>or<sp/>single-quotes<sp/>(<sp/>&apos;<sp/>)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>YAML<sp/>requires<sp/>that<sp/>colons<sp/>and<sp/>commas<sp/>used<sp/>as<sp/>list<sp/>separators</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>be<sp/>followed<sp/>by<sp/>a<sp/>space<sp/>so<sp/>that<sp/>scalar<sp/>values<sp/>containing<sp/>embedded</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>punctuation<sp/>can<sp/>generally<sp/>be<sp/>represented<sp/>without<sp/>needing</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>to<sp/>be<sp/>enclosed<sp/>in<sp/>quotes</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>Repeated<sp/>nodes<sp/>are<sp/>initially<sp/>denoted<sp/>by<sp/>an<sp/>ampersand<sp/>(<sp/>&amp;<sp/>)<sp/>and</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>thereafter<sp/>referenced<sp/>with<sp/>an<sp/>asterisk<sp/>(<sp/>*<sp/>)</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Notes<sp/>on<sp/>what<sp/>follows:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>Each<sp/>of<sp/>the<sp/>following<sp/>sections<sp/>represent<sp/>top-level<sp/>entries</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>in<sp/>the<sp/>YAML<sp/>configuration<sp/>file.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>Unless<sp/>explicitly<sp/>specified<sp/>in<sp/>the<sp/>configuration<sp/>file,<sp/>default</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>values<sp/>are<sp/>used<sp/>by<sp/>Ceedling.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>These<sp/>three<sp/>settings,<sp/>at<sp/>minimum,<sp/>must<sp/>be<sp/>specified:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>[:project][:build_root]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>[:paths][:source]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>[:paths][:test]</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>As<sp/>much<sp/>as<sp/>is<sp/>possible,<sp/>Ceedling<sp/>validates<sp/>your<sp/>settings<sp/>in</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>properly<sp/>formed<sp/>YAML.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>Improperly<sp/>formed<sp/>YAML<sp/>will<sp/>cause<sp/>a<sp/>Ruby<sp/>error<sp/>when<sp/>the<sp/>YAML</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>is<sp/>parsed.<sp/>This<sp/>is<sp/>usually<sp/>accompanied<sp/>by<sp/>a<sp/>complaint<sp/>with</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>line<sp/>and<sp/>column<sp/>number<sp/>pointing<sp/>into<sp/>the<sp/>project<sp/>file.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>Certain<sp/>advanced<sp/>features<sp/>rely<sp/>on<sp/>gcc<sp/>and<sp/>cpp<sp/>as<sp/>preprocessing</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>tools.<sp/>In<sp/>most<sp/>*nix<sp/>systems,<sp/>these<sp/>tools<sp/>are<sp/>already<sp/>available.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>For<sp/>Windows<sp/>environments,<sp/>we<sp/>recommend<sp/>the<sp/>[mingw<sp/>project](http://www.mingw.org/)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>(Minimalist<sp/>GNU<sp/>for<sp/>Windows).</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>Ceedling<sp/>is<sp/>primarily<sp/>meant<sp/>as<sp/>a<sp/>build<sp/>tool<sp/>to<sp/>support<sp/>automated</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>unit<sp/>testing.<sp/>All<sp/>the<sp/>heavy<sp/>lifting<sp/>is<sp/>involved<sp/>there.<sp/>Creating</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>a<sp/>simple<sp/>binary<sp/>release<sp/>build<sp/>artifact<sp/>is<sp/>quite<sp/>trivial<sp/>in</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>comparison.<sp/>Consequently,<sp/>most<sp/>default<sp/>options<sp/>and<sp/>the<sp/>construction</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>of<sp/>Ceedling<sp/>itself<sp/>is<sp/>skewed<sp/>towards<sp/>supporting<sp/>testing<sp/>though</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Ceedling<sp/>can,<sp/>of<sp/>course,<sp/>build<sp/>your<sp/>binary<sp/>release<sp/>artifact</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>as<sp/>well.<sp/>Note<sp/>that<sp/>complex<sp/>binary<sp/>release<sp/>artifacts<sp/>(e.g.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>application<sp/>+<sp/>bootloader<sp/>or<sp/>multiple<sp/>libraries)<sp/>are<sp/>beyond</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Ceedling&apos;s<sp/>release<sp/>build<sp/>ability.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Conventions<sp/>/<sp/>features<sp/>of<sp/>Ceedling-specific<sp/>YAML:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>Any<sp/>second<sp/>tier<sp/>setting<sp/>keys<sp/>anywhere<sp/>in<sp/>YAML<sp/>whose<sp/>names<sp/>end</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>in<sp/>`_path`<sp/>or<sp/>`_paths`<sp/>are<sp/>automagically<sp/>processed<sp/>like<sp/>all</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Ceedling-specific<sp/>paths<sp/>in<sp/>the<sp/>YAML<sp/>to<sp/>have<sp/>consistent<sp/>directory</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>separators<sp/>(i.e.<sp/>&quot;/&quot;)<sp/>and<sp/>to<sp/>take<sp/>advantage<sp/>of<sp/>inline<sp/>Ruby</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>string<sp/>expansion<sp/>(see<sp/>[:environment]<sp/>setting<sp/>below<sp/>for<sp/>further</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>explanation<sp/>of<sp/>string<sp/>expansion).</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Let&apos;s<sp/>Be<sp/>Careful<sp/>Out<sp/>There:**<sp/>Ceedling<sp/>performs<sp/>validation</highlight></codeline>
<codeline><highlight class="normal">on<sp/>the<sp/>values<sp/>you<sp/>set<sp/>in<sp/>your<sp/>configuration<sp/>file<sp/>(this<sp/>assumes</highlight></codeline>
<codeline><highlight class="normal">your<sp/>YAML<sp/>is<sp/>correct<sp/>and<sp/>will<sp/>not<sp/>fail<sp/>format<sp/>parsing,<sp/>of<sp/>course).</highlight></codeline>
<codeline><highlight class="normal">That<sp/>said,<sp/>validation<sp/>is<sp/>limited<sp/>to<sp/>only<sp/>those<sp/>settings<sp/>Ceedling</highlight></codeline>
<codeline><highlight class="normal">uses<sp/>and<sp/>those<sp/>that<sp/>can<sp/>be<sp/>reasonably<sp/>validated.<sp/>Ceedling<sp/>does</highlight></codeline>
<codeline><highlight class="normal">not<sp/>limit<sp/>what<sp/>can<sp/>exist<sp/>within<sp/>your<sp/>configuration<sp/>file.<sp/>In<sp/>this</highlight></codeline>
<codeline><highlight class="normal">way,<sp/>you<sp/>can<sp/>take<sp/>full<sp/>advantage<sp/>of<sp/>YAML<sp/>as<sp/>well<sp/>as<sp/>add<sp/>sections</highlight></codeline>
<codeline><highlight class="normal">and<sp/>values<sp/>for<sp/>use<sp/>in<sp/>your<sp/>own<sp/>custom<sp/>plugins<sp/>(documented<sp/>later).</highlight></codeline>
<codeline><highlight class="normal">The<sp/>consequence<sp/>of<sp/>this<sp/>is<sp/>simple<sp/>but<sp/>important.<sp/>A<sp/>misspelled</highlight></codeline>
<codeline><highlight class="normal">configuration<sp/>section<sp/>name<sp/>or<sp/>value<sp/>name<sp/>is<sp/>unlikely<sp/>to<sp/>cause</highlight></codeline>
<codeline><highlight class="normal">Ceedling<sp/>any<sp/>trouble.<sp/>Ceedling<sp/>will<sp/>happily<sp/>process<sp/>that<sp/>section</highlight></codeline>
<codeline><highlight class="normal">or<sp/>value<sp/>and<sp/>simply<sp/>use<sp/>the<sp/>properly<sp/>spelled<sp/>default<sp/>maintained</highlight></codeline>
<codeline><highlight class="normal">internally<sp/>-<sp/>thus<sp/>leading<sp/>to<sp/>unexpected<sp/>behavior<sp/>without<sp/>warning.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">project:<sp/>global<sp/>project<sp/>settings</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`build_root`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>Top<sp/>level<sp/>directory<sp/>into<sp/>which<sp/>generated<sp/>path<sp/>structure<sp/>and<sp/>files<sp/>are</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>placed.<sp/>Note:<sp/>this<sp/>is<sp/>one<sp/>of<sp/>the<sp/>handful<sp/>of<sp/>configuration<sp/>values<sp/>that</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>must<sp/>be<sp/>set.<sp/>The<sp/>specified<sp/>path<sp/>can<sp/>be<sp/>absolute<sp/>or<sp/>relative<sp/>to<sp/>your</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>working<sp/>directory.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>**Default**:<sp/>(none)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`use_exceptions`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>Configures<sp/>the<sp/>build<sp/>environment<sp/>to<sp/>make<sp/>use<sp/>of<sp/>CException.<sp/>Note<sp/>that</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>you<sp/>do<sp/>not<sp/>use<sp/>exceptions,<sp/>there&apos;s<sp/>no<sp/>harm<sp/>in<sp/>leaving<sp/>this<sp/>as<sp/>its</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>default<sp/>value.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>**Default**:<sp/>TRUE</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`use_mocks`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>Configures<sp/>the<sp/>build<sp/>environment<sp/>to<sp/>make<sp/>use<sp/>of<sp/>CMock.<sp/>Note<sp/>that<sp/>if</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>you<sp/>do<sp/>not<sp/>use<sp/>mocks,<sp/>there&apos;s<sp/>no<sp/>harm<sp/>in<sp/>leaving<sp/>this<sp/>setting<sp/>as<sp/>its</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>default<sp/>value.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>**Default**:<sp/>TRUE</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`use_test_preprocessor`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>This<sp/>option<sp/>allows<sp/>Ceedling<sp/>to<sp/>work<sp/>with<sp/>test<sp/>files<sp/>that<sp/>contain</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>conditional<sp/>compilation<sp/>statements<sp/>(e.g.<sp/>#ifdef)<sp/>and<sp/>header<sp/>files<sp/>you</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>wish<sp/>to<sp/>mock<sp/>that<sp/>contain<sp/>conditional<sp/>preprocessor<sp/>statements<sp/>and/or</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>macros.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>Ceedling<sp/>and<sp/>CMock<sp/>are<sp/>advanced<sp/>tools<sp/>with<sp/>sophisticated<sp/>parsers.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>However,<sp/>they<sp/>do<sp/>not<sp/>include<sp/>entire<sp/>C<sp/>language<sp/>preprocessors.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Consequently,<sp/>with<sp/>this<sp/>option<sp/>enabled,<sp/>Ceedling<sp/>will<sp/>use<sp/>gcc&apos;s</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>preprocessing<sp/>mode<sp/>and<sp/>the<sp/>cpp<sp/>preprocessor<sp/>tool<sp/>to<sp/>strip<sp/>down<sp/>/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>expand<sp/>test<sp/>files<sp/>and<sp/>headers<sp/>to<sp/>their<sp/>applicable<sp/>content<sp/>which<sp/>can</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>then<sp/>be<sp/>processed<sp/>by<sp/>Ceedling<sp/>and<sp/>CMock.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>With<sp/>this<sp/>option<sp/>enabled,<sp/>the<sp/>gcc<sp/>&amp;<sp/>cpp<sp/>tools<sp/>must<sp/>exist<sp/>in<sp/>an</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>accessible<sp/>system<sp/>search<sp/>path<sp/>and<sp/>test<sp/>runner<sp/>files<sp/>are<sp/>always</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>regenerated.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>**Default**:<sp/>FALSE</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`use_deep_dependencies`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>The<sp/>base<sp/>rules<sp/>and<sp/>tasks<sp/>that<sp/>Ceedling<sp/>creates<sp/>using<sp/>Rake<sp/>capture<sp/>most</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>of<sp/>the<sp/>dependencies<sp/>within<sp/>a<sp/>standard<sp/>project<sp/>(e.g.<sp/>when<sp/>the<sp/>source</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>file<sp/>accompanying<sp/>a<sp/>test<sp/>file<sp/>changes,<sp/>the<sp/>corresponding<sp/>test<sp/>fixture</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>executable<sp/>will<sp/>be<sp/>rebuilt<sp/>when<sp/>tests<sp/>are<sp/>re-run).<sp/>However,<sp/>deep</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>dependencies<sp/>cannot<sp/>be<sp/>captured<sp/>this<sp/>way.<sp/>If<sp/>a<sp/>typedef<sp/>or<sp/>macro</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>changes<sp/>in<sp/>a<sp/>header<sp/>file<sp/>three<sp/>levels<sp/>of<sp/>#include<sp/>statements<sp/>deep,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>this<sp/>option<sp/>allows<sp/>the<sp/>appropriate<sp/>incremental<sp/>build<sp/>actions<sp/>to<sp/>occur</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>for<sp/>both<sp/>test<sp/>execution<sp/>and<sp/>release<sp/>builds.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>This<sp/>is<sp/>accomplished<sp/>by<sp/>using<sp/>the<sp/>dependencies<sp/>discovery<sp/>mode<sp/>of<sp/>gcc.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>With<sp/>this<sp/>option<sp/>enabled,<sp/>gcc<sp/>must<sp/>exist<sp/>in<sp/>an<sp/>accessible<sp/>system</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>search<sp/>path.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>**Default**:<sp/>FALSE</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`generate_deep_dependencies`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>When<sp/>`use_deep_dependencies`<sp/>is<sp/>set<sp/>to<sp/>TRUE,<sp/>Ceedling<sp/>will<sp/>run<sp/>a<sp/>separate</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>build<sp/>step<sp/>to<sp/>generate<sp/>the<sp/>deep<sp/>dependencies.<sp/>If<sp/>you<sp/>are<sp/>using<sp/>gcc<sp/>as<sp/>your</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>primary<sp/>compiler,<sp/>or<sp/>another<sp/>compiler<sp/>that<sp/>can<sp/>generate<sp/>makefile<sp/>rules<sp/>as</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>a<sp/>side<sp/>effect<sp/>of<sp/>compilation,<sp/>then<sp/>you<sp/>can<sp/>set<sp/>this<sp/>to<sp/>FALSE<sp/>to<sp/>avoid<sp/>the</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>extra<sp/>build<sp/>step<sp/>but<sp/>still<sp/>use<sp/>the<sp/>deep<sp/>dependencies<sp/>data<sp/>when<sp/>deciding</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>which<sp/>source<sp/>files<sp/>to<sp/>rebuild.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>**Default**:<sp/>TRUE</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`test_file_prefix`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>Ceedling<sp/>collects<sp/>test<sp/>files<sp/>by<sp/>convention<sp/>from<sp/>within<sp/>the<sp/>test<sp/>file</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>search<sp/>paths.<sp/>The<sp/>convention<sp/>includes<sp/>a<sp/>unique<sp/>name<sp/>prefix<sp/>and<sp/>a<sp/>file</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>extension<sp/>matching<sp/>that<sp/>of<sp/>source<sp/>files.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>Why<sp/>not<sp/>simply<sp/>recognize<sp/>all<sp/>files<sp/>in<sp/>test<sp/>directories<sp/>as<sp/>test<sp/>files?</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>By<sp/>using<sp/>the<sp/>given<sp/>convention,<sp/>we<sp/>have<sp/>greater<sp/>flexibility<sp/>in<sp/>what<sp/>we</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>do<sp/>with<sp/>C<sp/>files<sp/>in<sp/>the<sp/>test<sp/>directories.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>**Default**:<sp/>&quot;test_&quot;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`options_paths`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>Just<sp/>as<sp/>you<sp/>may<sp/>have<sp/>various<sp/>build<sp/>configurations<sp/>for<sp/>your<sp/>source</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>codebase,<sp/>you<sp/>may<sp/>need<sp/>variations<sp/>of<sp/>your<sp/>project<sp/>configuration.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>By<sp/>specifying<sp/>options<sp/>paths,<sp/>Ceedling<sp/>will<sp/>search<sp/>for<sp/>other<sp/>project</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>YAML<sp/>files,<sp/>make<sp/>command<sp/>line<sp/>tasks<sp/>available<sp/>(ceedling<sp/>options:variation</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>for<sp/>a<sp/>variation.yml<sp/>file),<sp/>and<sp/>merge<sp/>the<sp/>project<sp/>configuration<sp/>of</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>these<sp/>option<sp/>files<sp/>in<sp/>with<sp/>the<sp/>main<sp/>project<sp/>file<sp/>at<sp/>runtime.<sp/>See</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>advanced<sp/>topics.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>Note<sp/>these<sp/>Rake<sp/>tasks<sp/>at<sp/>the<sp/>command<sp/>line<sp/>-<sp/>like<sp/>verbosity<sp/>or<sp/>logging</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>control<sp/>-<sp/>must<sp/>come<sp/>before<sp/>the<sp/>test<sp/>or<sp/>release<sp/>task<sp/>they<sp/>are<sp/>meant<sp/>to</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>modify.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>**Default**:<sp/>[]<sp/>(empty)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`release_build`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>When<sp/>enabled,<sp/>a<sp/>release<sp/>Rake<sp/>task<sp/>is<sp/>exposed.<sp/>This<sp/>configuration</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>option<sp/>requires<sp/>a<sp/>corresponding<sp/>release<sp/>compiler<sp/>and<sp/>linker<sp/>to<sp/>be</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>defined<sp/>(gcc<sp/>is<sp/>used<sp/>as<sp/>the<sp/>default).</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>More<sp/>release<sp/>configuration<sp/>options<sp/>are<sp/>available<sp/>in<sp/>the<sp/>release_build</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>section.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>**Default**:<sp/>FALSE</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Example<sp/>`[:project]`<sp/>YAML<sp/>blurb</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```yaml</highlight></codeline>
<codeline><highlight class="normal">:project:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>:build_root:<sp/>project_awesome/build</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>:use_exceptions:<sp/>FALSE</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>:use_test_preprocessor:<sp/>TRUE</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>:use_deep_dependencies:<sp/>TRUE</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>:options_paths:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>project/options</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>external/shared/options</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>:release_build:<sp/>TRUE</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Ceedling<sp/>is<sp/>primarily<sp/>concerned<sp/>with<sp/>facilitating<sp/>the<sp/>somewhat</highlight></codeline>
<codeline><highlight class="normal">complicated<sp/>mechanics<sp/>of<sp/>automating<sp/>unit<sp/>tests.<sp/>The<sp/>same<sp/>mechanisms</highlight></codeline>
<codeline><highlight class="normal">are<sp/>easily<sp/>capable<sp/>of<sp/>building<sp/>a<sp/>final<sp/>release<sp/>binary<sp/>artifact</highlight></codeline>
<codeline><highlight class="normal">(i.e.<sp/>non<sp/>test<sp/>code;<sp/>the<sp/>thing<sp/>that<sp/>is<sp/>your<sp/>final<sp/>working<sp/>software</highlight></codeline>
<codeline><highlight class="normal">that<sp/>you<sp/>execute<sp/>on<sp/>target<sp/>hardware).</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`output`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>The<sp/>name<sp/>of<sp/>your<sp/>release<sp/>build<sp/>binary<sp/>artifact<sp/>to<sp/>be<sp/>found<sp/>in<sp/>&lt;build</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>path&gt;/artifacts/release.<sp/>Ceedling<sp/>sets<sp/>the<sp/>default<sp/>artifact<sp/>file</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>extension<sp/>to<sp/>that<sp/>as<sp/>is<sp/>explicitly<sp/>specified<sp/>in<sp/>the<sp/>[:extensions]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>section<sp/>or<sp/>as<sp/>is<sp/>system<sp/>specific<sp/>otherwise.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>**Default**:<sp/>`project.exe`<sp/>or<sp/>`project.out`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`use_assembly`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>If<sp/>assembly<sp/>code<sp/>is<sp/>present<sp/>in<sp/>the<sp/>source<sp/>tree,<sp/>this<sp/>option<sp/>causes</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Ceedling<sp/>to<sp/>create<sp/>appropriate<sp/>build<sp/>directories<sp/>and<sp/>use<sp/>an<sp/>assembler</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>tool<sp/>(default<sp/>is<sp/>the<sp/>GNU<sp/>tool<sp/>as<sp/>-<sp/>override<sp/>available<sp/>in<sp/>the<sp/>[:tools]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>section.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>**Default**:<sp/>FALSE</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`artifacts`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>By<sp/>default,<sp/>Ceedling<sp/>copies<sp/>to<sp/>the<sp/>&lt;build<sp/>path&gt;/artifacts/release</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>directory<sp/>the<sp/>output<sp/>of<sp/>the<sp/>release<sp/>linker<sp/>and<sp/>(optionally)<sp/>a<sp/>map</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>file.<sp/>Many<sp/>toolchains<sp/>produce<sp/>other<sp/>important<sp/>output<sp/>files<sp/>as<sp/>well.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Adding<sp/>a<sp/>file<sp/>path<sp/>to<sp/>this<sp/>list<sp/>will<sp/>cause<sp/>Ceedling<sp/>to<sp/>copy<sp/>that<sp/>file</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>to<sp/>the<sp/>artifacts<sp/>directory.<sp/>The<sp/>artifacts<sp/>directory<sp/>is<sp/>helpful<sp/>for</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>organizing<sp/>important<sp/>build<sp/>output<sp/>files<sp/>and<sp/>provides<sp/>a<sp/>central<sp/>place</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>for<sp/>tools<sp/>such<sp/>as<sp/>Continuous<sp/>Integration<sp/>servers<sp/>to<sp/>point<sp/>to<sp/>build</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>output.<sp/>Selectively<sp/>copying<sp/>files<sp/>prevents<sp/>incidental<sp/>build<sp/>cruft<sp/>from</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>needlessly<sp/>appearing<sp/>in<sp/>the<sp/>artifacts<sp/>directory.<sp/>Note<sp/>that<sp/>inline<sp/>Ruby</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>string<sp/>replacement<sp/>is<sp/>available<sp/>in<sp/>the<sp/>artifacts<sp/>paths<sp/>(see<sp/>discussion</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>in<sp/>the<sp/>[:environment]<sp/>section).</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>**Default**:<sp/>[]<sp/>(empty)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Example<sp/>`[:release_build]`<sp/>YAML<sp/>blurb</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```yaml</highlight></codeline>
<codeline><highlight class="normal">:release_build:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>:output:<sp/>top_secret.bin</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>:use_assembly:<sp/>TRUE</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>:artifacts:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>build/release/out/c/top_secret.s19</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**paths**:<sp/>options<sp/>controlling<sp/>search<sp/>paths<sp/>for<sp/>source<sp/>and<sp/>header</highlight></codeline>
<codeline><highlight class="normal">(and<sp/>assembly)<sp/>files</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`test`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>All<sp/>C<sp/>files<sp/>containing<sp/>unit<sp/>test<sp/>code.<sp/>Note:<sp/>this<sp/>is<sp/>one<sp/>of<sp/>the</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>handful<sp/>of<sp/>configuration<sp/>values<sp/>that<sp/>must<sp/>be<sp/>set.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>**Default**:<sp/>[]<sp/>(empty)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`source`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>All<sp/>C<sp/>files<sp/>containing<sp/>release<sp/>code<sp/>(code<sp/>to<sp/>be<sp/>tested).<sp/>Note:<sp/>this<sp/>is</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>one<sp/>of<sp/>the<sp/>handful<sp/>of<sp/>configuration<sp/>values<sp/>that<sp/>must<sp/>be<sp/>set.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>**Default**:<sp/>[]<sp/>(empty)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`support`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>Any<sp/>C<sp/>files<sp/>you<sp/>might<sp/>need<sp/>to<sp/>aid<sp/>your<sp/>unit<sp/>testing.<sp/>For<sp/>example,<sp/>on</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>occasion,<sp/>you<sp/>may<sp/>need<sp/>to<sp/>create<sp/>a<sp/>header<sp/>file<sp/>containing<sp/>a<sp/>subset<sp/>of</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>function<sp/>signatures<sp/>matching<sp/>those<sp/>elsewhere<sp/>in<sp/>your<sp/>code<sp/>(e.g.<sp/>a</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>subset<sp/>of<sp/>your<sp/>OS<sp/>functions,<sp/>a<sp/>portion<sp/>of<sp/>a<sp/>library<sp/>API,<sp/>etc.).<sp/>Why?</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>To<sp/>provide<sp/>finer<sp/>grained<sp/>control<sp/>over<sp/>mock<sp/>function<sp/>substitution<sp/>or</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>limiting<sp/>the<sp/>size<sp/>of<sp/>the<sp/>generated<sp/>mocks.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>**Default**:<sp/>[]<sp/>(empty)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`include`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>Any<sp/>header<sp/>files<sp/>not<sp/>already<sp/>in<sp/>the<sp/>source<sp/>search<sp/>path.<sp/>Note<sp/>there&apos;s</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>no<sp/>practical<sp/>distinction<sp/>between<sp/>this<sp/>search<sp/>path<sp/>and<sp/>the<sp/>source</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>search<sp/>path;<sp/>it&apos;s<sp/>merely<sp/>to<sp/>provide<sp/>options<sp/>or<sp/>to<sp/>support<sp/>any</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>peculiar<sp/>source<sp/>tree<sp/>organization.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>**Default**:<sp/>[]<sp/>(empty)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`test_toolchain_include`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>System<sp/>header<sp/>files<sp/>needed<sp/>by<sp/>the<sp/>test<sp/>toolchain<sp/>-<sp/>should<sp/>your</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>compiler<sp/>be<sp/>unable<sp/>to<sp/>find<sp/>them,<sp/>finds<sp/>the<sp/>wrong<sp/>system<sp/>include<sp/>search</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>path,<sp/>or<sp/>you<sp/>need<sp/>a<sp/>creative<sp/>solution<sp/>to<sp/>a<sp/>tricky<sp/>technical<sp/>problem.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Note<sp/>that<sp/>if<sp/>you<sp/>configure<sp/>your<sp/>own<sp/>toolchain<sp/>in<sp/>the<sp/>[:tools]<sp/>section,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>this<sp/>search<sp/>path<sp/>is<sp/>largely<sp/>meaningless<sp/>to<sp/>you.<sp/>However,<sp/>this<sp/>is<sp/>a</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>convenient<sp/>way<sp/>to<sp/>control<sp/>the<sp/>system<sp/>include<sp/>path<sp/>should<sp/>you<sp/>rely<sp/>on</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>the<sp/>default<sp/>gcc<sp/>tools.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>**Default**:<sp/>[]<sp/>(empty)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`release_toolchain_include`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>Same<sp/>as<sp/>preceding<sp/>albeit<sp/>related<sp/>to<sp/>the<sp/>release<sp/>toolchain.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>**Default**:<sp/>[]<sp/>(empty)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`&lt;custom&gt;`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>Any<sp/>paths<sp/>you<sp/>specify<sp/>for<sp/>custom<sp/>list.<sp/>List<sp/>is<sp/>available<sp/>to<sp/>tool</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>configurations<sp/>and/or<sp/>plugins.<sp/>Note<sp/>a<sp/>distinction.<sp/>The<sp/>preceding<sp/>names</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>are<sp/>recognized<sp/>internally<sp/>to<sp/>Ceedling<sp/>and<sp/>the<sp/>path<sp/>lists<sp/>are<sp/>used<sp/>to</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>build<sp/>collections<sp/>of<sp/>files<sp/>contained<sp/>in<sp/>those<sp/>paths.<sp/>A<sp/>custom<sp/>list<sp/>is</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>just<sp/>that<sp/>-<sp/>a<sp/>custom<sp/>list<sp/>of<sp/>paths.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Notes<sp/>on<sp/>path<sp/>grammar<sp/>within<sp/>the<sp/>[:paths]<sp/>section:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>Order<sp/>of<sp/>search<sp/>paths<sp/>listed<sp/>in<sp/>[:paths]<sp/>is<sp/>preserved<sp/>when<sp/>used<sp/>by<sp/>an</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>entry<sp/>in<sp/>the<sp/>[:tools]<sp/>section</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>Wherever<sp/>multiple<sp/>path<sp/>lists<sp/>are<sp/>combined<sp/>for<sp/>use<sp/>Ceedling<sp/>prioritizes</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>path<sp/>groups<sp/>as<sp/>follows:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>test<sp/>paths,<sp/>support<sp/>paths,<sp/>source<sp/>paths,<sp/>include<sp/>paths.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>This<sp/>can<sp/>be<sp/>useful,<sp/>for<sp/>instance,<sp/>in<sp/>certain<sp/>testing<sp/>scenarios<sp/>where</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>we<sp/>desire<sp/>Ceedling<sp/>or<sp/>the<sp/>compiler<sp/>to<sp/>find<sp/>a<sp/>stand-in<sp/>header<sp/>file<sp/>before</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>the<sp/>actual<sp/>source<sp/>header<sp/>file<sp/>of<sp/>the<sp/>same<sp/>name.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>Paths:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>1.<sp/>can<sp/>be<sp/>absolute<sp/>or<sp/>relative</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>2.<sp/>can<sp/>be<sp/>singly<sp/>explicit<sp/>-<sp/>a<sp/>single<sp/>fully<sp/>specified<sp/>path</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>3.<sp/>can<sp/>include<sp/>a<sp/>glob<sp/>operator<sp/>(more<sp/>on<sp/>this<sp/>below)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>4.<sp/>can<sp/>use<sp/>inline<sp/>Ruby<sp/>string<sp/>replacement<sp/>(see<sp/>[:environment]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>section<sp/>for<sp/>more)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>5.<sp/>default<sp/>as<sp/>an<sp/>addition<sp/>to<sp/>a<sp/>specific<sp/>search<sp/>list<sp/>(more<sp/>on<sp/>this</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>in<sp/>the<sp/>examples)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>6.<sp/>can<sp/>act<sp/>to<sp/>subtract<sp/>from<sp/>a<sp/>glob<sp/>included<sp/>in<sp/>the<sp/>path<sp/>list<sp/>(more</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>on<sp/>this<sp/>in<sp/>the<sp/>examples)</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">[Globs](http://ruby.about.com/od/beginningruby/a/dir2.htm)</highlight></codeline>
<codeline><highlight class="normal">as<sp/>used<sp/>by<sp/>Ceedling<sp/>are<sp/>wildcards<sp/>for<sp/>specifying<sp/>directories</highlight></codeline>
<codeline><highlight class="normal">without<sp/>the<sp/>need<sp/>to<sp/>list<sp/>each<sp/>and<sp/>every<sp/>required<sp/>search<sp/>path.</highlight></codeline>
<codeline><highlight class="normal">Ceedling<sp/>globs<sp/>operate<sp/>just<sp/>as<sp/>Ruby<sp/>globs<sp/>except<sp/>that<sp/>they<sp/>are</highlight></codeline>
<codeline><highlight class="normal">limited<sp/>to<sp/>matching<sp/>directories<sp/>and<sp/>not<sp/>files.<sp/>Glob<sp/>operators</highlight></codeline>
<codeline><highlight class="normal">include<sp/>the<sp/>following<sp/>*<sp/>**<sp/>?<sp/>[-]<sp/>{,}<sp/>(note:<sp/>this<sp/>list<sp/>is<sp/>space<sp/>separated</highlight></codeline>
<codeline><highlight class="normal">and<sp/>not<sp/>comma<sp/>separated<sp/>as<sp/>commas<sp/>are<sp/>used<sp/>within<sp/>the<sp/>bracket</highlight></codeline>
<codeline><highlight class="normal">operators).</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`*`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>All<sp/>subdirectories<sp/>of<sp/>depth<sp/>1<sp/>below<sp/>the<sp/>parent<sp/>path<sp/>and<sp/>including<sp/>the</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>parent<sp/>path</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`**`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>All<sp/>subdirectories<sp/>recursively<sp/>discovered<sp/>below<sp/>the<sp/>parent<sp/>path<sp/>and</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>including<sp/>the<sp/>parent<sp/>path</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`?`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>Single<sp/>alphanumeric<sp/>character<sp/>wildcard</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`[x-y]`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>Single<sp/>alphanumeric<sp/>character<sp/>as<sp/>found<sp/>in<sp/>the<sp/>specified<sp/>range</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`{x,y}`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>Single<sp/>alphanumeric<sp/>character<sp/>from<sp/>the<sp/>specified<sp/>list</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Example<sp/>[:paths]<sp/>YAML<sp/>blurbs</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```yaml</highlight></codeline>
<codeline><highlight class="normal">:paths:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>:source:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#together<sp/>the<sp/>following<sp/>comprise<sp/>all<sp/>source<sp/>search<sp/>paths</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>project/source/*<sp/><sp/>#expansion<sp/>yields<sp/>all<sp/>subdirectories<sp/>of<sp/>depth<sp/>1<sp/>plus<sp/>parent<sp/>directory</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>project/lib<sp/><sp/><sp/><sp/><sp/><sp/><sp/>#single<sp/>path</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>:test:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#all<sp/>test<sp/>search<sp/>paths</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>project/**/test?<sp/><sp/>#expansion<sp/>yields<sp/>any<sp/>subdirectory<sp/>found<sp/>anywhere<sp/>in<sp/>the<sp/>project<sp/>that</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#begins<sp/>with<sp/>&quot;test&quot;<sp/>and<sp/>contains<sp/>5<sp/>characters</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">:paths:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>:source:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#all<sp/>source<sp/>search<sp/>paths</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>+:project/source/**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#all<sp/>subdirectories<sp/>recursively<sp/>discovered<sp/>plus<sp/>parent<sp/>directory</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>-:project/source/os/generated<sp/><sp/>#subtract<sp/>os/generated<sp/>directory<sp/>from<sp/>expansion<sp/>of<sp/>above<sp/>glob</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#note<sp/>that<sp/>&apos;+:&apos;<sp/>notation<sp/>is<sp/>merely<sp/>aesthetic;<sp/>default<sp/>is<sp/>to<sp/>add</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>:test:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#all<sp/>test<sp/>search<sp/>paths</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>project/test/bootloader<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#explicit,<sp/>single<sp/>search<sp/>paths<sp/>(searched<sp/>in<sp/>the<sp/>order<sp/>specified)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>project/test/application</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>project/test/utilities</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>:custom:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#custom<sp/>path<sp/>list</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>&quot;#{PROJECT_ROOT}/other&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#inline<sp/>Ruby<sp/>string<sp/>expansion</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Globs<sp/>and<sp/>inline<sp/>Ruby<sp/>string<sp/>expansion<sp/>can<sp/>require<sp/>trial<sp/>and</highlight></codeline>
<codeline><highlight class="normal">error<sp/>to<sp/>arrive<sp/>at<sp/>your<sp/>intended<sp/>results.<sp/>Use<sp/>the<sp/>`ceedling<sp/>paths:*`</highlight></codeline>
<codeline><highlight class="normal">command<sp/>line<sp/>options<sp/>(documented<sp/>in<sp/>preceding<sp/>section)<sp/>to<sp/>verify</highlight></codeline>
<codeline><highlight class="normal">your<sp/>settings.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Ceedling<sp/>relies<sp/>on<sp/>file<sp/>collections<sp/>automagically<sp/>assembled</highlight></codeline>
<codeline><highlight class="normal">from<sp/>paths,<sp/>globs,<sp/>and<sp/>file<sp/>extensions.<sp/>File<sp/>collections<sp/>greatly</highlight></codeline>
<codeline><highlight class="normal">simplify<sp/>project<sp/>set<sp/>up.<sp/>However,<sp/>sometimes<sp/>you<sp/>need<sp/>to<sp/>remove</highlight></codeline>
<codeline><highlight class="normal">from<sp/>or<sp/>add<sp/>individual<sp/>files<sp/>to<sp/>those<sp/>collections.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`test`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>Modify<sp/>the<sp/>collection<sp/>of<sp/>unit<sp/>test<sp/>C<sp/>files.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>**Default**:<sp/>[]<sp/>(empty)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`source`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>Modify<sp/>the<sp/>collection<sp/>of<sp/>all<sp/>source<sp/>files<sp/>used<sp/>in<sp/>unit<sp/>test<sp/>builds<sp/>and<sp/>release<sp/>builds.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>**Default**:<sp/>[]<sp/>(empty)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`assembly`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>Modify<sp/>the<sp/>(optional)<sp/>collection<sp/>of<sp/>assembly<sp/>files<sp/>used<sp/>in<sp/>release<sp/>builds.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>**Default**:<sp/>[]<sp/>(empty)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`include`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>Modify<sp/>the<sp/>collection<sp/>of<sp/>all<sp/>source<sp/>header<sp/>files<sp/>used<sp/>in<sp/>unit<sp/>test<sp/>builds<sp/>(e.g.<sp/>for<sp/>mocking)<sp/>and<sp/>release<sp/>builds.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>**Default**:<sp/>[]<sp/>(empty)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`support`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>Modify<sp/>the<sp/>collection<sp/>of<sp/>supporting<sp/>C<sp/>files<sp/>available<sp/>to<sp/>unit<sp/>tests<sp/>builds.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>**Default**:<sp/>[]<sp/>(empty)</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Note:<sp/>All<sp/>path<sp/>grammar<sp/>documented<sp/>in<sp/>[:paths]<sp/>section<sp/>applies</highlight></codeline>
<codeline><highlight class="normal">to<sp/>[:files]<sp/>path<sp/>entries<sp/>-<sp/>albeit<sp/>at<sp/>the<sp/>file<sp/>path<sp/>level<sp/>and<sp/>not</highlight></codeline>
<codeline><highlight class="normal">the<sp/>directory<sp/>level.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Example<sp/>[:files]<sp/>YAML<sp/>blurb</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```yaml</highlight></codeline>
<codeline><highlight class="normal">:files:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>:source:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>callbacks/comm.c<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>entry<sp/>defaults<sp/>to<sp/>file<sp/>addition</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>+:callbacks/comm*.c<sp/><sp/><sp/><sp/><sp/>#<sp/>add<sp/>all<sp/>comm<sp/>files<sp/>matching<sp/>glob<sp/>pattern</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>-:source/board/atm134.c<sp/>#<sp/>not<sp/>our<sp/>board</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>:test:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>-:test/io/test_output_manager.c<sp/>#<sp/>remove<sp/>unit<sp/>tests<sp/>from<sp/>test<sp/>build</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**environment:**<sp/>inserts<sp/>environment<sp/>variables<sp/>into<sp/>the<sp/>shell</highlight></codeline>
<codeline><highlight class="normal">instance<sp/>executing<sp/>configured<sp/>tools</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Ceedling<sp/>creates<sp/>environment<sp/>variables<sp/>from<sp/>any<sp/>key<sp/>/<sp/>value</highlight></codeline>
<codeline><highlight class="normal">pairs<sp/>in<sp/>the<sp/>environment<sp/>section.<sp/>Keys<sp/>become<sp/>an<sp/>environment</highlight></codeline>
<codeline><highlight class="normal">variable<sp/>name<sp/>in<sp/>uppercase.<sp/>The<sp/>values<sp/>are<sp/>strings<sp/>assigned</highlight></codeline>
<codeline><highlight class="normal">to<sp/>those<sp/>environment<sp/>variables.<sp/>These<sp/>value<sp/>strings<sp/>are<sp/>either</highlight></codeline>
<codeline><highlight class="normal">simple<sp/>string<sp/>values<sp/>in<sp/>YAML<sp/>or<sp/>the<sp/>concatenation<sp/>of<sp/>a<sp/>YAML<sp/>array.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Ceedling<sp/>is<sp/>able<sp/>to<sp/>execute<sp/>inline<sp/>Ruby<sp/>string<sp/>substitution</highlight></codeline>
<codeline><highlight class="normal">code<sp/>to<sp/>set<sp/>environment<sp/>variables.<sp/>This<sp/>evaluation<sp/>occurs<sp/>when</highlight></codeline>
<codeline><highlight class="normal">the<sp/>project<sp/>file<sp/>is<sp/>first<sp/>processed<sp/>for<sp/>any<sp/>environment<sp/>pair&apos;s</highlight></codeline>
<codeline><highlight class="normal">value<sp/>string<sp/>including<sp/>the<sp/>Ruby<sp/>string<sp/>substitution<sp/>pattern</highlight></codeline>
<codeline><highlight class="normal">`#{…}`.<sp/>Note<sp/>that<sp/>environment<sp/>value<sp/>strings<sp/>that<sp/>_begin_<sp/>with</highlight></codeline>
<codeline><highlight class="normal">this<sp/>pattern<sp/>should<sp/>always<sp/>be<sp/>enclosed<sp/>in<sp/>quotes.<sp/>YAML<sp/>defaults</highlight></codeline>
<codeline><highlight class="normal">to<sp/>processing<sp/>unquoted<sp/>text<sp/>as<sp/>a<sp/>string;<sp/>quoting<sp/>text<sp/>is<sp/>optional.</highlight></codeline>
<codeline><highlight class="normal">If<sp/>an<sp/>environment<sp/>pair&apos;s<sp/>value<sp/>string<sp/>begins<sp/>with<sp/>the<sp/>Ruby<sp/>string</highlight></codeline>
<codeline><highlight class="normal">substitution<sp/>pattern,<sp/>YAML<sp/>will<sp/>interpret<sp/>the<sp/>string<sp/>as<sp/>a<sp/>Ruby</highlight></codeline>
<codeline><highlight class="normal">comment<sp/>(because<sp/>of<sp/>the<sp/>`#`).<sp/>Enclosing<sp/>each<sp/>environment<sp/>value</highlight></codeline>
<codeline><highlight class="normal">string<sp/>in<sp/>quotes<sp/>is<sp/>a<sp/>safe<sp/>practice.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">[:environment]<sp/>entries<sp/>are<sp/>processed<sp/>in<sp/>the<sp/>configured<sp/>order</highlight></codeline>
<codeline><highlight class="normal">(later<sp/>entries<sp/>can<sp/>reference<sp/>earlier<sp/>entries).</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Special<sp/>case:<sp/>PATH<sp/>handling</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">In<sp/>the<sp/>specific<sp/>case<sp/>of<sp/>specifying<sp/>an<sp/>environment<sp/>key<sp/>named<sp/>_path_,</highlight></codeline>
<codeline><highlight class="normal">an<sp/>array<sp/>of<sp/>string<sp/>values<sp/>will<sp/>be<sp/>concatenated<sp/>with<sp/>the<sp/>appropriate</highlight></codeline>
<codeline><highlight class="normal">platform-specific<sp/>path<sp/>separation<sp/>character<sp/>(e.g.<sp/>&apos;:&apos;<sp/>on<sp/>*nix,</highlight></codeline>
<codeline><highlight class="normal">&apos;;&apos;<sp/>on<sp/>Windows).<sp/>All<sp/>other<sp/>instances<sp/>of<sp/>environment<sp/>keys<sp/>assigned</highlight></codeline>
<codeline><highlight class="normal">YAML<sp/>arrays<sp/>use<sp/>simple<sp/>concatenation.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Example<sp/>[:environment]<sp/>YAML<sp/>blurb</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```yaml</highlight></codeline>
<codeline><highlight class="normal">:environment:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>-<sp/>:license_server:<sp/>gizmo.intranet<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#LICENSE_SERVER<sp/>set<sp/>with<sp/>value<sp/>&quot;gizmo.intranet&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>-<sp/>:license:<sp/>&quot;#{`license.exe`}&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#LICENSE<sp/>set<sp/>to<sp/>string<sp/>generated<sp/>from<sp/>shelling<sp/>out<sp/>to</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#execute<sp/>license.exe;<sp/>note<sp/>use<sp/>of<sp/>enclosing<sp/>quotes</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>-<sp/>:path:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#concatenated<sp/>with<sp/>path<sp/>separator<sp/>(see<sp/>special<sp/>case<sp/>above)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>-<sp/>Tools/gizmo/bin<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#prepend<sp/>existing<sp/>PATH<sp/>with<sp/>gizmo<sp/>path</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>-<sp/>&quot;#{ENV[&apos;PATH&apos;]}&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#pattern<sp/>#{…}<sp/>triggers<sp/>ruby<sp/>evaluation<sp/>string<sp/>substitution</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#note:<sp/>value<sp/>string<sp/>must<sp/>be<sp/>quoted<sp/>because<sp/>of<sp/>&apos;#&apos;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>-<sp/>:logfile:<sp/>system/logs/thingamabob.log<sp/><sp/>#LOGFILE<sp/>set<sp/>with<sp/>path<sp/>for<sp/>a<sp/>log<sp/>file</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**extension**:<sp/>configure<sp/>file<sp/>name<sp/>extensions<sp/>used<sp/>to<sp/>collect<sp/>lists<sp/>of<sp/>files<sp/>searched<sp/>in<sp/>[:paths]</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`header`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>C<sp/>header<sp/>files</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>**Default**:<sp/>.h</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`source`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>C<sp/>code<sp/>files<sp/>(whether<sp/>source<sp/>or<sp/>test<sp/>files)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>**Default**:<sp/>.c</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`assembly`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>Assembly<sp/>files<sp/>(contents<sp/>wholly<sp/>assembly<sp/>instructions)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>**Default**:<sp/>.s</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`object`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>Resulting<sp/>binary<sp/>output<sp/>of<sp/>C<sp/>code<sp/>compiler<sp/>(and<sp/>assembler)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>**Default**:<sp/>.o</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`executable`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>Binary<sp/>executable<sp/>to<sp/>be<sp/>loaded<sp/>and<sp/>executed<sp/>upon<sp/>target<sp/>hardware</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>**Default**:<sp/>.exe<sp/>or<sp/>.out<sp/>(Win<sp/>or<sp/>*nix)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`testpass`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>Test<sp/>results<sp/>file<sp/>(not<sp/>likely<sp/>to<sp/>ever<sp/>need<sp/>a<sp/>new<sp/>value)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>**Default**:<sp/>.pass</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`testfail`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>Test<sp/>results<sp/>file<sp/>(not<sp/>likely<sp/>to<sp/>ever<sp/>need<sp/>a<sp/>new<sp/>value)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>**Default**:<sp/>.fail</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`dependencies`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>File<sp/>containing<sp/>make-style<sp/>dependency<sp/>rules<sp/>created<sp/>by<sp/>gcc<sp/>preprocessor</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>**Default**:<sp/>.d</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Example<sp/>[:extension]<sp/>YAML<sp/>blurb</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>:extension:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:source:<sp/>.cc</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:executable:<sp/>.bin</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**defines**:<sp/>command<sp/>line<sp/>defines<sp/>used<sp/>in<sp/>test<sp/>and<sp/>release<sp/>compilation<sp/>by<sp/>configured<sp/>tools</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`test`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>Defines<sp/>needed<sp/>for<sp/>testing.<sp/>Useful<sp/>for:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>1.<sp/>test<sp/>files<sp/>containing<sp/>conditional<sp/>compilation<sp/>statements<sp/>(i.e.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>tests<sp/>active<sp/>in<sp/>only<sp/>certain<sp/>contexts)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>2.<sp/>testing<sp/>legacy<sp/>source<sp/>wherein<sp/>the<sp/>isolation<sp/>of<sp/>source<sp/>under<sp/>test</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>afforded<sp/>by<sp/>Ceedling<sp/>and<sp/>its<sp/>complementary<sp/>tools<sp/>leaves<sp/>certain</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>symbols<sp/>unset<sp/>when<sp/>source<sp/>files<sp/>are<sp/>compiled<sp/>in<sp/>isolation</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>**Default**:<sp/>[]<sp/>(empty)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`test_preprocess`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>If<sp/>[:project][:use_test_preprocessor]<sp/>or</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>[:project][:use_deep_dependencies]<sp/>is<sp/>set<sp/>and<sp/>code<sp/>is<sp/>structured<sp/>in<sp/>a</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>certain<sp/>way,<sp/>the<sp/>gcc<sp/>preprocessor<sp/>may<sp/>need<sp/>symbol<sp/>definitions<sp/>to</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>properly<sp/>preprocess<sp/>files<sp/>to<sp/>extract<sp/>function<sp/>signatures<sp/>for<sp/>mocking</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>and<sp/>extract<sp/>deep<sp/>dependencies<sp/>for<sp/>incremental<sp/>builds.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>**Default**:<sp/>[]<sp/>(empty)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`release`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>Defines<sp/>needed<sp/>for<sp/>the<sp/>release<sp/>build<sp/>binary<sp/>artifact.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>**Default**:<sp/>[]<sp/>(empty)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`release_preprocess`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>If<sp/>[:project][:use_deep_dependencies]<sp/>is<sp/>set<sp/>and<sp/>code<sp/>is<sp/>structured<sp/>in</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>a<sp/>certain<sp/>way,<sp/>the<sp/>gcc<sp/>preprocessor<sp/>may<sp/>need<sp/>symbol<sp/>definitions<sp/>to</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>properly<sp/>preprocess<sp/>files<sp/>for<sp/>incremental<sp/>release<sp/>builds<sp/>due<sp/>to<sp/>deep</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>dependencies.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>**Default**:<sp/>[]<sp/>(empty)</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Example<sp/>[:defines]<sp/>YAML<sp/>blurb</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```yaml</highlight></codeline>
<codeline><highlight class="normal">:defines:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>:test:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>UNIT_TESTING<sp/><sp/>#for<sp/>select<sp/>cases<sp/>in<sp/>source<sp/>to<sp/>allow<sp/>testing<sp/>with<sp/>a<sp/>changed<sp/>behavior<sp/>or<sp/>interface</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>OFF=0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>ON=1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>FEATURE_X=ON</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>:source:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>FEATURE_X=ON</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**libraries**:<sp/>command<sp/>line<sp/>defines<sp/>used<sp/>in<sp/>test<sp/>and<sp/>release<sp/>compilation<sp/>by<sp/>configured<sp/>tools</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Ceedling<sp/>allows<sp/>you<sp/>to<sp/>pull<sp/>in<sp/>specific<sp/>libraries<sp/>for<sp/>the<sp/>purpose<sp/>of<sp/>release<sp/>and<sp/>test<sp/>builds.</highlight></codeline>
<codeline><highlight class="normal">It<sp/>has<sp/>a<sp/>few<sp/>levels<sp/>of<sp/>support<sp/>for<sp/>this.<sp/>Start<sp/>by<sp/>adding<sp/>a<sp/>:libraries<sp/>main<sp/>section<sp/>in<sp/>your</highlight></codeline>
<codeline><highlight class="normal">configuration.<sp/>In<sp/>this<sp/>section,<sp/>you<sp/>can<sp/>optionally<sp/>have<sp/>the<sp/>following<sp/>subsections:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`test`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>Library<sp/>files<sp/>that<sp/>should<sp/>be<sp/>injected<sp/>into<sp/>your<sp/>tests<sp/>when<sp/>linking<sp/>occurs.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>These<sp/>can<sp/>be<sp/>specified<sp/>as<sp/>either<sp/>relative<sp/>or<sp/>absolute<sp/>paths.<sp/>These<sp/>files<sp/>MUST</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>exist<sp/>when<sp/>the<sp/>test<sp/>attempts<sp/>to<sp/>build.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`source`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>Library<sp/>files<sp/>that<sp/>should<sp/>be<sp/>injected<sp/>into<sp/>your<sp/>release<sp/>when<sp/>linking<sp/>occurs.<sp/>These</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>can<sp/>be<sp/>specified<sp/>as<sp/>either<sp/>relative<sp/>or<sp/>absolute<sp/>paths.<sp/>These<sp/>files<sp/>MUST<sp/>exist<sp/>when</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>the<sp/>release<sp/>attempts<sp/>to<sp/>build<sp/>UNLESS<sp/>you<sp/>are<sp/>using<sp/>the<sp/>subprojects<sp/>plugin.<sp/>In<sp/>that</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>case,<sp/>it<sp/>will<sp/>attempt<sp/>to<sp/>build<sp/>that<sp/>library<sp/>for<sp/>you<sp/>as<sp/>a<sp/>dynamic<sp/>dependency.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`system`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>These<sp/>libraries<sp/>are<sp/>assumed<sp/>to<sp/>be<sp/>in<sp/>the<sp/>tool<sp/>path<sp/>somewhere<sp/>and<sp/>shouldn&apos;t<sp/>need<sp/>to<sp/>be</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>specified.<sp/>The<sp/>libraries<sp/>added<sp/>here<sp/>will<sp/>be<sp/>injected<sp/>into<sp/>releases<sp/>and<sp/>tests.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`flag`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>This<sp/>is<sp/>the<sp/>method<sp/>of<sp/>adding<sp/>an<sp/>argument<sp/>for<sp/>each<sp/>library.<sp/>For<sp/>example,<sp/>gcc<sp/>really<sp/>likes</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>it<sp/>when<sp/>you<sp/>specify<sp/>“-l${1}”</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Notes:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>If<sp/>you&apos;ve<sp/>specified<sp/>your<sp/>own<sp/>link<sp/>step,<sp/>you<sp/>are<sp/>going<sp/>to<sp/>want<sp/>to<sp/>add<sp/>${4}<sp/>to<sp/>your<sp/>argument</highlight></codeline>
<codeline><highlight class="normal">list<sp/>in<sp/>the<sp/>place<sp/>where<sp/>library<sp/>files<sp/>should<sp/>be<sp/>added<sp/>to<sp/>the<sp/>command<sp/>call.<sp/>For<sp/>gcc,<sp/>this<sp/>is</highlight></codeline>
<codeline><highlight class="normal">often<sp/>the<sp/>very<sp/>end.<sp/>Other<sp/>tools<sp/>may<sp/>vary.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**flags**:<sp/>configure<sp/>per-file<sp/>compilation<sp/>and<sp/>linking<sp/>flags</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Ceedling<sp/>tools<sp/>(see<sp/>later<sp/>[:tools]<sp/>section)<sp/>are<sp/>used<sp/>to<sp/>configure</highlight></codeline>
<codeline><highlight class="normal">compilation<sp/>and<sp/>linking<sp/>of<sp/>test<sp/>and<sp/>source<sp/>files.<sp/>These<sp/>tool</highlight></codeline>
<codeline><highlight class="normal">configurations<sp/>are<sp/>a<sp/>one-size-fits-all<sp/>approach.<sp/>Should<sp/>individual<sp/>files</highlight></codeline>
<codeline><highlight class="normal">require<sp/>special<sp/>compilation<sp/>or<sp/>linking<sp/>flags,<sp/>the<sp/>settings<sp/>in<sp/>the</highlight></codeline>
<codeline><highlight class="normal">[:flags]<sp/>section<sp/>work<sp/>in<sp/>conjunction<sp/>with<sp/>tool<sp/>definitions<sp/>by<sp/>way<sp/>of</highlight></codeline>
<codeline><highlight class="normal">argument<sp/>substitution<sp/>to<sp/>achieve<sp/>this.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`release`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>[:compile]<sp/>or<sp/>[:link]<sp/>flags<sp/>for<sp/>release<sp/>build</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`test`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>[:compile]<sp/>or<sp/>[:link]<sp/>flags<sp/>for<sp/>test<sp/>build</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Notes:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>Ceedling<sp/>works<sp/>with<sp/>the<sp/>[:release]<sp/>and<sp/>[:test]<sp/>build<sp/>contexts</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>as-is;<sp/>plugins<sp/>can<sp/>add<sp/>additional<sp/>contexts</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>Only<sp/>[:compile]<sp/>and<sp/>[:link]<sp/>are<sp/>recognized<sp/>operations<sp/>beneath</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>a<sp/>context</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>File<sp/>specifiers<sp/>do<sp/>not<sp/>include<sp/>a<sp/>path<sp/>or<sp/>file<sp/>extension</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>File<sp/>specifiers<sp/>are<sp/>case<sp/>sensitive<sp/>(must<sp/>match<sp/>original<sp/>file</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>name)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>File<sp/>specifiers<sp/>do<sp/>support<sp/>regular<sp/>expressions<sp/>if<sp/>encased<sp/>in<sp/>quotes</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>&apos;*&apos;<sp/>is<sp/>a<sp/>special<sp/>(optional)<sp/>file<sp/>specifier<sp/>to<sp/>provide<sp/>flags</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>to<sp/>all<sp/>files<sp/>not<sp/>otherwise<sp/>specified</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Example<sp/>[:flags]<sp/>YAML<sp/>blurb</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```yaml</highlight></codeline>
<codeline><highlight class="normal">:flags:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>:release:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>:compile:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:main:<sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>add<sp/>&apos;-Wall&apos;<sp/>to<sp/>compilation<sp/>of<sp/>main.c</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>-Wall</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:fan:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>add<sp/>&apos;--O2&apos;<sp/>to<sp/>compilation<sp/>of<sp/>fan.c</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>--O2</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:&apos;test_.+&apos;:<sp/><sp/><sp/>#<sp/>add<sp/>&apos;-pedantic&apos;<sp/>to<sp/>all<sp/>test-files</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>-pedantic</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:*:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>add<sp/>&apos;-foo&apos;<sp/>to<sp/>compilation<sp/>of<sp/>all<sp/>files<sp/>not<sp/>main.c<sp/>or<sp/>fan.c</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>-foo</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>:test:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>:compile:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:main:<sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>add<sp/>&apos;--O1&apos;<sp/>to<sp/>compilation<sp/>of<sp/>main.c<sp/>as<sp/>part<sp/>of<sp/>test<sp/>builds<sp/>including<sp/>main.c</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>--O1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>:link:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:test_main:<sp/><sp/>#<sp/>add<sp/>&apos;--bar<sp/>--baz&apos;<sp/>to<sp/>linking<sp/>of<sp/>test_main.exe</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>--bar</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>--baz</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Ceedling<sp/>sets<sp/>values<sp/>for<sp/>a<sp/>subset<sp/>of<sp/>CMock<sp/>settings.<sp/>All<sp/>CMock</highlight></codeline>
<codeline><highlight class="normal">options<sp/>are<sp/>available<sp/>to<sp/>be<sp/>set,<sp/>but<sp/>only<sp/>those<sp/>options<sp/>set<sp/>by</highlight></codeline>
<codeline><highlight class="normal">Ceedling<sp/>in<sp/>an<sp/>automated<sp/>fashion<sp/>are<sp/>documented<sp/>below.<sp/>See<sp/>CMock</highlight></codeline>
<codeline><highlight class="normal">documentation.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**cmock**:<sp/>configure<sp/>CMock&apos;s<sp/>code<sp/>generation<sp/>options<sp/>and<sp/>set<sp/>symbols<sp/>used<sp/>to<sp/>modify<sp/>CMock&apos;s<sp/>compiled<sp/>features</highlight></codeline>
<codeline><highlight class="normal">Ceedling<sp/>sets<sp/>values<sp/>for<sp/>a<sp/>subset<sp/>of<sp/>CMock<sp/>settings.<sp/>All<sp/>CMock<sp/>options<sp/>are<sp/>available<sp/>to<sp/>be<sp/>set,<sp/>but<sp/>only<sp/>those<sp/>options<sp/>set<sp/>by<sp/>Ceedling<sp/>in<sp/>an<sp/>automated<sp/>fashion<sp/>are<sp/>documented<sp/>below.<sp/>See<sp/>CMock<sp/>documentation.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`enforce_strict_ordering`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>Tests<sp/>fail<sp/>if<sp/>expected<sp/>call<sp/>order<sp/>is<sp/>not<sp/>same<sp/>as<sp/>source<sp/>order</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>**Default**:<sp/>TRUE</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`mock_path`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>Path<sp/>for<sp/>generated<sp/>mocks</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>**Default**:<sp/>&lt;build<sp/>path&gt;/tests/mocks</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`defines`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>List<sp/>of<sp/>conditional<sp/>compilation<sp/>symbols<sp/>used<sp/>to<sp/>configure<sp/>CMock&apos;s</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>compiled<sp/>features.<sp/>See<sp/>CMock<sp/>documentation<sp/>to<sp/>understand<sp/>available</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>options.<sp/>No<sp/>symbols<sp/>must<sp/>be<sp/>set<sp/>unless<sp/>defaults<sp/>are<sp/>inappropriate<sp/>for</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>your<sp/>specific<sp/>environment.<sp/>All<sp/>symbols<sp/>are<sp/>used<sp/>only<sp/>by<sp/>Ceedling<sp/>to</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>compile<sp/>CMock<sp/>C<sp/>code;<sp/>contents<sp/>of<sp/>[:defines]<sp/>are<sp/>ignored<sp/>by<sp/>CMock&apos;s</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Ruby<sp/>code<sp/>when<sp/>instantiated.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>**Default**:<sp/>[]<sp/>(empty)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`verbosity`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>If<sp/>not<sp/>set,<sp/>defaults<sp/>to<sp/>Ceedling&apos;s<sp/>verbosity<sp/>level</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`plugins`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>If<sp/>[:project][:use_exceptions]<sp/>is<sp/>enabled,<sp/>the<sp/>internal<sp/>plugins<sp/>list<sp/>is<sp/>pre-populated<sp/>with<sp/>&apos;cexception&apos;.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>Whether<sp/>or<sp/>not<sp/>you<sp/>have<sp/>included<sp/>[:cmock][:plugins]<sp/>in<sp/>your</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>configuration<sp/>file,<sp/>Ceedling<sp/>automatically<sp/>adds<sp/>&apos;cexception&apos;<sp/>to<sp/>the</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>plugin<sp/>list<sp/>if<sp/>exceptions<sp/>are<sp/>enabled.<sp/>To<sp/>add<sp/>to<sp/>the<sp/>list<sp/>Ceedling</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>provides<sp/>CMock,<sp/>simply<sp/>add<sp/>[:cmock][:plugins]<sp/>to<sp/>your<sp/>configuration</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>and<sp/>specify<sp/>your<sp/>desired<sp/>additional<sp/>plugins.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`includes`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>If<sp/>[:cmock][:unity_helper]<sp/>set,<sp/>pre-populated<sp/>with<sp/>unity_helper<sp/>file</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>name<sp/>(no<sp/>path).</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>The<sp/>[:cmock][:includes]<sp/>list<sp/>works<sp/>identically<sp/>to<sp/>the<sp/>plugins<sp/>list</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>above<sp/>with<sp/>regard<sp/>to<sp/>adding<sp/>additional<sp/>files<sp/>to<sp/>be<sp/>inserted<sp/>within</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>mocks<sp/>as<sp/>#include<sp/>statements.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>last<sp/>four<sp/>settings<sp/>above<sp/>are<sp/>directly<sp/>tied<sp/>to<sp/>other<sp/>Ceedling</highlight></codeline>
<codeline><highlight class="normal">settings;<sp/>hence,<sp/>why<sp/>they<sp/>are<sp/>listed<sp/>and<sp/>explained<sp/>here.<sp/>The</highlight></codeline>
<codeline><highlight class="normal">first<sp/>setting<sp/>above,<sp/>[:enforce_strict_ordering],<sp/>defaults</highlight></codeline>
<codeline><highlight class="normal">to<sp/>FALSE<sp/>within<sp/>CMock.<sp/>It<sp/>is<sp/>set<sp/>to<sp/>TRUE<sp/>by<sp/>default<sp/>in<sp/>Ceedling</highlight></codeline>
<codeline><highlight class="normal">as<sp/>our<sp/>way<sp/>of<sp/>encouraging<sp/>you<sp/>to<sp/>use<sp/>strict<sp/>ordering.<sp/>It&apos;s<sp/>a<sp/>teeny</highlight></codeline>
<codeline><highlight class="normal">bit<sp/>more<sp/>expensive<sp/>in<sp/>terms<sp/>of<sp/>code<sp/>generated,<sp/>test<sp/>execution</highlight></codeline>
<codeline><highlight class="normal">time,<sp/>and<sp/>complication<sp/>in<sp/>deciphering<sp/>test<sp/>failures.<sp/>However,</highlight></codeline>
<codeline><highlight class="normal">it&apos;s<sp/>good<sp/>practice.<sp/>And,<sp/>of<sp/>course,<sp/>you<sp/>can<sp/>always<sp/>disable<sp/>it</highlight></codeline>
<codeline><highlight class="normal">by<sp/>overriding<sp/>the<sp/>value<sp/>in<sp/>the<sp/>Ceedling<sp/>YAML<sp/>configuration<sp/>file.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**cexception**:<sp/>configure<sp/>symbols<sp/>used<sp/>to<sp/>modify<sp/>CException&apos;s<sp/>compiled<sp/>features</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`defines`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>List<sp/>of<sp/>conditional<sp/>compilation<sp/>symbols<sp/>used<sp/>to<sp/>configure<sp/>CException&apos;s</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>features<sp/>in<sp/>its<sp/>source<sp/>and<sp/>header<sp/>files.<sp/>See<sp/>CException<sp/>documentation</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>to<sp/>understand<sp/>available<sp/>options.<sp/>No<sp/>symbols<sp/>must<sp/>be<sp/>set<sp/>unless<sp/>the</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>defaults<sp/>are<sp/>inappropriate<sp/>for<sp/>your<sp/>specific<sp/>environment.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>**Default**:<sp/>[]<sp/>(empty)</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**unity**:<sp/>configure<sp/>symbols<sp/>used<sp/>to<sp/>modify<sp/>Unity&apos;s<sp/>compiled<sp/>features</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`defines`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>List<sp/>of<sp/>conditional<sp/>compilation<sp/>symbols<sp/>used<sp/>to<sp/>configure<sp/>Unity&apos;s</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>features<sp/>in<sp/>its<sp/>source<sp/>and<sp/>header<sp/>files.<sp/>See<sp/>Unity<sp/>documentation<sp/>to</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>understand<sp/>available<sp/>options.<sp/>No<sp/>symbols<sp/>must<sp/>be<sp/>set<sp/>unless<sp/>the</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>defaults<sp/>are<sp/>inappropriate<sp/>for<sp/>your<sp/>specific<sp/>environment.<sp/>Most<sp/>Unity<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>defines<sp/>can<sp/>be<sp/>easily<sp/>configured<sp/>through<sp/>the<sp/>YAML<sp/>file.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>**Default**:<sp/>[]<sp/>(empty)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Example<sp/>[:unity]<sp/>YAML<sp/>blurbs</highlight></codeline>
<codeline><highlight class="normal">```yaml</highlight></codeline>
<codeline><highlight class="normal">:unity:<sp/>#itty<sp/>bitty<sp/>processor<sp/>&amp;<sp/>toolchain<sp/>with<sp/>limited<sp/>test<sp/>execution<sp/>options</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>:defines:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>UNITY_INT_WIDTH=16<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#16<sp/>bit<sp/>processor<sp/>without<sp/>support<sp/>for<sp/>32<sp/>bit<sp/>instructions</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>UNITY_EXCLUDE_FLOAT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#no<sp/>floating<sp/>point<sp/>unit</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">:unity:<sp/>#great<sp/>big<sp/>gorilla<sp/>processor<sp/>that<sp/>grunts<sp/>and<sp/>scratches</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>:defines:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>UNITY_SUPPORT_64<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#big<sp/>memory,<sp/>big<sp/>counters,<sp/>big<sp/>registers</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>UNITY_LINE_TYPE=\&quot;unsigned<sp/>int\&quot;<sp/><sp/><sp/><sp/>#apparently<sp/>we&apos;re<sp/>using<sp/>really<sp/>long<sp/>test<sp/>files,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>UNITY_COUNTER_TYPE=\&quot;unsigned<sp/>int\&quot;<sp/>#and<sp/>we&apos;ve<sp/>got<sp/>a<sp/>ton<sp/>of<sp/>test<sp/>cases<sp/>in<sp/>those<sp/>test<sp/>files</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>UNITY_FLOAT_TYPE=\&quot;double\&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#you<sp/>betcha</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Notes<sp/>on<sp/>Unity<sp/>configuration:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>**Verification**<sp/>-<sp/>Ceedling<sp/>does<sp/>no<sp/>verification<sp/>of<sp/>your<sp/>configuration</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>values.<sp/>In<sp/>a<sp/>properly<sp/>configured<sp/>setup,<sp/>your<sp/>Unity<sp/>configuration</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>values<sp/>are<sp/>processed,<sp/>collected<sp/>together<sp/>with<sp/>any<sp/>test<sp/>define<sp/>symbols</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>you<sp/>specify<sp/>elsewhere,<sp/>and<sp/>then<sp/>passed<sp/>to<sp/>your<sp/>toolchain<sp/>during<sp/>test</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>compilation.<sp/>Unity&apos;s<sp/>conditional<sp/>compilation<sp/>statements,<sp/>your</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>toolchain&apos;s<sp/>preprocessor,<sp/>and/or<sp/>your<sp/>toolchain&apos;s<sp/>compiler<sp/>will</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>complain<sp/>appropriately<sp/>if<sp/>your<sp/>specified<sp/>configuration<sp/>values<sp/>are</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>incorrect,<sp/>incomplete,<sp/>or<sp/>incompatible.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>**Routing<sp/>$stdout**<sp/>-<sp/>Unity<sp/>defaults<sp/>to<sp/>using<sp/>`putchar()`<sp/>in<sp/>C&apos;s</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>standard<sp/>library<sp/>to<sp/>display<sp/>test<sp/>results.<sp/>For<sp/>more<sp/>exotic<sp/>environments</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>than<sp/>a<sp/>desktop<sp/>with<sp/>a<sp/>terminal<sp/>(e.g.<sp/>running<sp/>tests<sp/>directly<sp/>on<sp/>a</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>non-PC<sp/>target),<sp/>you<sp/>have<sp/>options.<sp/>For<sp/>example,<sp/>you<sp/>could<sp/>create<sp/>a</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>routine<sp/>that<sp/>transmits<sp/>a<sp/>character<sp/>via<sp/>RS232<sp/>or<sp/>USB.<sp/>Once<sp/>you<sp/>have</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>that<sp/>routine,<sp/>you<sp/>can<sp/>replace<sp/>`putchar()`<sp/>calls<sp/>in<sp/>Unity<sp/>by<sp/>overriding</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>the<sp/>function-like<sp/>macro<sp/>`UNITY_OUTPUT_CHAR`.<sp/>Consult<sp/>your<sp/>toolchain</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>and<sp/>shell<sp/>documentation.<sp/>Eventhough<sp/>this<sp/>can<sp/>also<sp/>be<sp/>defined<sp/>in<sp/>the<sp/>YAML<sp/>file</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>most<sp/>shell<sp/>environments<sp/>do<sp/>not<sp/>handle<sp/>parentheses<sp/>as<sp/>command<sp/>line<sp/>arguments<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>very<sp/>well.<sp/>To<sp/>still<sp/>be<sp/>able<sp/>to<sp/>add<sp/>this<sp/>functionality<sp/>all<sp/>necessary<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>options<sp/>can<sp/>be<sp/>defined<sp/>in<sp/>the<sp/>`unity_config.h`.<sp/>Unity<sp/>needs<sp/>to<sp/>be<sp/>told<sp/>to<sp/>look<sp/>for<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>the<sp/>`unity_config.h`<sp/>in<sp/>the<sp/>YAML<sp/>file,<sp/>though.<sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Example<sp/>[:unity]<sp/>YAML<sp/>blurbs</highlight></codeline>
<codeline><highlight class="normal">```yaml</highlight></codeline>
<codeline><highlight class="normal">:unity:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>:defines:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>UNITY_INCLUDE_CONFIG_H</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Example<sp/>unity_config.h</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">#ifndef<sp/>UNITY_CONFIG_H</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>UNITY_CONFIG_H</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;uart_output.h&quot;<sp/>//Helper<sp/>library<sp/>for<sp/>your<sp/>custom<sp/>environment</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#define<sp/>UNITY_INT_WIDTH<sp/>16</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>UNITY_OUTPUT_START()<sp/>uart_init(F_CPU,<sp/>BAUD)<sp/>//Helperfunction<sp/>to<sp/>init<sp/>UART</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>UNITY_OUTPUT_CHAR(a)<sp/>uart_putchar(a)<sp/>//Helperfunction<sp/>to<sp/>forward<sp/>char<sp/>via<sp/>UART</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>UNITY_OUTPUT_COMPLETE()<sp/>uart_complete()<sp/>//Helperfunction<sp/>to<sp/>inform<sp/>that<sp/>test<sp/>has<sp/>ended</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#endif</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**tools**:<sp/>a<sp/>means<sp/>for<sp/>representing<sp/>command<sp/>line<sp/>tools<sp/>for<sp/>use<sp/>under</highlight></codeline>
<codeline><highlight class="normal">Ceedling&apos;s<sp/>automation<sp/>framework</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Ceedling<sp/>requires<sp/>a<sp/>variety<sp/>of<sp/>tools<sp/>to<sp/>work<sp/>its<sp/>magic.<sp/>By<sp/>default,</highlight></codeline>
<codeline><highlight class="normal">the<sp/>GNU<sp/>toolchain<sp/>(gcc,<sp/>cpp,<sp/>as)<sp/>are<sp/>configured<sp/>and<sp/>ready<sp/>for</highlight></codeline>
<codeline><highlight class="normal">use<sp/>with<sp/>no<sp/>additions<sp/>to<sp/>the<sp/>project<sp/>configuration<sp/>YAML<sp/>file.</highlight></codeline>
<codeline><highlight class="normal">However,<sp/>as<sp/>most<sp/>work<sp/>will<sp/>require<sp/>a<sp/>project-specific<sp/>toolchain,</highlight></codeline>
<codeline><highlight class="normal">Ceedling<sp/>provides<sp/>a<sp/>generic<sp/>means<sp/>for<sp/>specifying<sp/>/<sp/>overriding</highlight></codeline>
<codeline><highlight class="normal">tools.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`test_compiler`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>Compiler<sp/>for<sp/>test<sp/>&amp;<sp/>source-under-test<sp/>code</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>${1}:<sp/>input<sp/>source<sp/>${2}:<sp/>output<sp/>object<sp/>${3}:<sp/>optional<sp/>output<sp/>list<sp/>${4}:<sp/>optional<sp/>output<sp/>dependencies<sp/>file</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>**Default**:<sp/>gcc</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`test_linker`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>Linker<sp/>to<sp/>generate<sp/>test<sp/>fixture<sp/>executables</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>${1}:<sp/>input<sp/>objects<sp/>${2}:<sp/>output<sp/>binary<sp/>${3}:<sp/>optional<sp/>output<sp/>map<sp/>${4}:<sp/>optional<sp/>library<sp/>list</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>**Default**:<sp/>gcc</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`test_fixture`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>Executable<sp/>test<sp/>fixture</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>${1}:<sp/>simulator<sp/>as<sp/>executable<sp/>with<sp/>${1}<sp/>as<sp/>input<sp/>binary<sp/>file<sp/>argument<sp/>or<sp/>native<sp/>test<sp/>executable</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>**Default**:<sp/>${1}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`test_includes_preprocessor`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>Extractor<sp/>of<sp/>#include<sp/>statements</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>${1}:<sp/>input<sp/>source<sp/>file</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>**Default**:<sp/>cpp</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`test_file_preprocessor`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>Preprocessor<sp/>of<sp/>test<sp/>files<sp/>(macros,<sp/>conditional<sp/>compilation<sp/>statements)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>${1}:<sp/>input<sp/>source<sp/>file<sp/>${2}:<sp/>preprocessed<sp/>output<sp/>source<sp/>file</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>**Default**:<sp/>gcc</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`test_dependencies_generator`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>Discovers<sp/>deep<sp/>dependencies<sp/>of<sp/>source<sp/>&amp;<sp/>test<sp/>(for<sp/>incremental<sp/>builds)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>${1}:<sp/>input<sp/>source<sp/>file<sp/>${2}:<sp/>compiled<sp/>object<sp/>filepath<sp/>${3}:<sp/>output<sp/>dependencies<sp/>file</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>**Default**:<sp/>gcc</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`release_compiler`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>Compiler<sp/>for<sp/>release<sp/>source<sp/>code</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>${1}:<sp/>input<sp/>source<sp/>${2}:<sp/>output<sp/>object<sp/>${3}:<sp/>optional<sp/>output<sp/>list<sp/>${4}:<sp/>optional<sp/>output<sp/>dependencies<sp/>file</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>**Default**:<sp/>gcc</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`release_assembler`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>Assembler<sp/>for<sp/>release<sp/>assembly<sp/>code</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>${1}:<sp/>input<sp/>assembly<sp/>source<sp/>file<sp/>${2}:<sp/>output<sp/>object<sp/>file</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>**Default**:<sp/>as</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`release_linker`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>Linker<sp/>for<sp/>release<sp/>source<sp/>code</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>${1}:<sp/>input<sp/>objects<sp/>${2}:<sp/>output<sp/>binary<sp/>${3}:<sp/>optional<sp/>output<sp/>map<sp/>${4}:<sp/>optional<sp/>library<sp/>list</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>**Default**:<sp/>gcc</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`release_dependencies_generator`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>Discovers<sp/>deep<sp/>dependencies<sp/>of<sp/>source<sp/>files<sp/>(for<sp/>incremental<sp/>builds)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>${1}:<sp/>input<sp/>source<sp/>file<sp/>${2}:<sp/>compiled<sp/>object<sp/>filepath<sp/>${3}:<sp/>output<sp/>dependencies<sp/>file</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>**Default**:<sp/>gcc</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">A<sp/>Ceedling<sp/>tool<sp/>has<sp/>a<sp/>handful<sp/>of<sp/>configurable<sp/>elements:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">1.<sp/>[:executable]<sp/>(required)<sp/>-<sp/>Command<sp/>line<sp/>executable<sp/>having</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>the<sp/>form<sp/>of:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">2.<sp/>[:arguments]<sp/>(required)<sp/>-<sp/>List<sp/>of<sp/>command<sp/>line<sp/>arguments</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>and<sp/>substitutions</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">3.<sp/>[:name]<sp/>-<sp/>Simple<sp/>name<sp/>(e.g.<sp/>&quot;nickname&quot;)<sp/>of<sp/>tool<sp/>beyond<sp/>its</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>executable<sp/>name<sp/>(if<sp/>not<sp/>explicitly<sp/>set<sp/>then<sp/>Ceedling<sp/>will</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>form<sp/>a<sp/>name<sp/>from<sp/>the<sp/>tool&apos;s<sp/>YAML<sp/>entry<sp/>name)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">4.<sp/>[:stderr_redirect]<sp/>-<sp/>Control<sp/>of<sp/>capturing<sp/>$stderr<sp/>messages</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>{:none,<sp/>:auto,<sp/>:win,<sp/>:unix,<sp/>:tcsh}.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>Defaults<sp/>to<sp/>:none<sp/>if<sp/>unspecified;<sp/>create<sp/>a<sp/>custom<sp/>entry<sp/>by</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>specifying<sp/>a<sp/>simple<sp/>string<sp/>instead<sp/>of<sp/>any<sp/>of<sp/>the<sp/>available</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>symbols.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">5.<sp/>[:background_exec]<sp/>-<sp/>Control<sp/>execution<sp/>as<sp/>background<sp/>process</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>{:none,<sp/>:auto,<sp/>:win,<sp/>:unix}.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>Defaults<sp/>to<sp/>:none<sp/>if<sp/>unspecified.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Tool<sp/>Element<sp/>Runtime<sp/>Substitution</highlight></codeline>
<codeline><highlight class="normal">---------------------------------</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">To<sp/>accomplish<sp/>useful<sp/>work<sp/>on<sp/>multiple<sp/>files,<sp/>a<sp/>configured<sp/>tool<sp/>will<sp/>most</highlight></codeline>
<codeline><highlight class="normal">often<sp/>require<sp/>that<sp/>some<sp/>number<sp/>of<sp/>its<sp/>arguments<sp/>or<sp/>even<sp/>the<sp/>executable</highlight></codeline>
<codeline><highlight class="normal">itself<sp/>change<sp/>for<sp/>each<sp/>run.<sp/>Consequently,<sp/>every<sp/>tool&apos;s<sp/>argument<sp/>list<sp/>and</highlight></codeline>
<codeline><highlight class="normal">executable<sp/>field<sp/>possess<sp/>two<sp/>means<sp/>for<sp/>substitution<sp/>at<sp/>runtime.<sp/>Ceedling</highlight></codeline>
<codeline><highlight class="normal">provides<sp/>two<sp/>kinds<sp/>of<sp/>inline<sp/>Ruby<sp/>execution<sp/>and<sp/>a<sp/>notation<sp/>for</highlight></codeline>
<codeline><highlight class="normal">populating<sp/>elements<sp/>with<sp/>dynamically<sp/>gathered<sp/>values<sp/>within<sp/>the<sp/>build</highlight></codeline>
<codeline><highlight class="normal">environment.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Tool<sp/>Element<sp/>Runtime<sp/>Substitution:<sp/>Inline<sp/>Ruby<sp/>Execution</highlight></codeline>
<codeline><highlight class="normal">--------------------------------------------------------</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">In-line<sp/>Ruby<sp/>execution<sp/>works<sp/>similarly<sp/>to<sp/>that<sp/>demonstrated<sp/>for<sp/>the</highlight></codeline>
<codeline><highlight class="normal">[:environment]<sp/>section<sp/>except<sp/>that<sp/>substitution<sp/>occurs<sp/>as<sp/>the<sp/>tool<sp/>is</highlight></codeline>
<codeline><highlight class="normal">executed<sp/>and<sp/>not<sp/>at<sp/>the<sp/>time<sp/>the<sp/>configuration<sp/>file<sp/>is<sp/>first<sp/>scanned.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`#{...}`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>Ruby<sp/>string<sp/>substitution<sp/>pattern<sp/>wherein<sp/>the<sp/>containing<sp/>string<sp/>is</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>expanded<sp/>to<sp/>include<sp/>the<sp/>string<sp/>generated<sp/>by<sp/>Ruby<sp/>code<sp/>between<sp/>the</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>braces.<sp/>Multiple<sp/>instances<sp/>of<sp/>this<sp/>expansion<sp/>can<sp/>occur<sp/>within<sp/>a<sp/>single</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>tool<sp/>element<sp/>entry<sp/>string.<sp/>Note<sp/>that<sp/>if<sp/>this<sp/>string<sp/>substitution</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pattern<sp/>occurs<sp/>at<sp/>the<sp/>very<sp/>beginning<sp/>of<sp/>a<sp/>string<sp/>in<sp/>the<sp/>YAML</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>configuration<sp/>the<sp/>entire<sp/>string<sp/>should<sp/>be<sp/>enclosed<sp/>in<sp/>quotes<sp/>(see<sp/>the</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>[:environment]<sp/>section<sp/>for<sp/>further<sp/>explanation<sp/>on<sp/>this<sp/>point).</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`{...}<sp/>`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>If<sp/>an<sp/>entire<sp/>tool<sp/>element<sp/>string<sp/>is<sp/>enclosed<sp/>with<sp/>braces,<sp/>it<sp/>signifies</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>that<sp/>Ceedling<sp/>should<sp/>execute<sp/>the<sp/>Ruby<sp/>code<sp/>contained<sp/>within<sp/>those</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>braces.<sp/>Say<sp/>you<sp/>have<sp/>a<sp/>collection<sp/>of<sp/>paths<sp/>on<sp/>disk<sp/>and<sp/>some<sp/>of<sp/>those</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>paths<sp/>include<sp/>spaces.<sp/>Further<sp/>suppose<sp/>that<sp/>a<sp/>single<sp/>tool<sp/>that<sp/>must<sp/>use</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>those<sp/>paths<sp/>requires<sp/>those<sp/>spaces<sp/>to<sp/>be<sp/>escaped,<sp/>but<sp/>all<sp/>other<sp/>uses<sp/>of</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>those<sp/>paths<sp/>requires<sp/>the<sp/>paths<sp/>to<sp/>remain<sp/>unchanged.<sp/>You<sp/>could<sp/>use<sp/>this</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Ceedling<sp/>feature<sp/>to<sp/>insert<sp/>Ruby<sp/>code<sp/>that<sp/>iterates<sp/>those<sp/>paths<sp/>and</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>escapes<sp/>those<sp/>spaces<sp/>in<sp/>the<sp/>array<sp/>as<sp/>used<sp/>by<sp/>the<sp/>tool<sp/>of<sp/>this<sp/>example.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Tool<sp/>Element<sp/>Runtime<sp/>Substitution:<sp/>Notational<sp/>Substitution</highlight></codeline>
<codeline><highlight class="normal">----------------------------------------------------------</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">A<sp/>Ceedling<sp/>tool&apos;s<sp/>other<sp/>form<sp/>of<sp/>dynamic<sp/>substitution<sp/>relies<sp/>on<sp/>a<sp/>&apos;$&apos;</highlight></codeline>
<codeline><highlight class="normal">notation.<sp/>These<sp/>&apos;$&apos;<sp/>operators<sp/>can<sp/>exist<sp/>anywhere<sp/>in<sp/>a<sp/>string<sp/>and<sp/>can<sp/>be</highlight></codeline>
<codeline><highlight class="normal">decorated<sp/>in<sp/>any<sp/>way<sp/>needed.<sp/>To<sp/>use<sp/>a<sp/>literal<sp/>&apos;$&apos;,<sp/>escape<sp/>it<sp/>as<sp/>&apos;\\$&apos;.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`$`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>Simple<sp/>substitution<sp/>for<sp/>value(s)<sp/>globally<sp/>available<sp/>within<sp/>the<sp/>runtime</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>(most<sp/>often<sp/>a<sp/>string<sp/>or<sp/>an<sp/>array).</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`${#}`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>When<sp/>a<sp/>Ceedling<sp/>tool&apos;s<sp/>command<sp/>line<sp/>is<sp/>expanded<sp/>from<sp/>its<sp/>configured</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>representation<sp/>and<sp/>used<sp/>within<sp/>Ceedling<sp/>Ruby<sp/>code,<sp/>certain<sp/>calls<sp/>to</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>that<sp/>tool<sp/>will<sp/>be<sp/>made<sp/>with<sp/>a<sp/>parameter<sp/>list<sp/>of<sp/>substitution<sp/>values.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Each<sp/>numbered<sp/>substitution<sp/>corresponds<sp/>to<sp/>a<sp/>position<sp/>in<sp/>a<sp/>parameter</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>list.<sp/>Ceedling<sp/>Ruby<sp/>code<sp/>expects<sp/>that<sp/>configured<sp/>compiler<sp/>and<sp/>linker</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>tools<sp/>will<sp/>contain<sp/>${1}<sp/>and<sp/>${2}<sp/>replacement<sp/>arguments.<sp/>In<sp/>the<sp/>case<sp/>of</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>a<sp/>compiler<sp/>${1}<sp/>will<sp/>be<sp/>a<sp/>C<sp/>code<sp/>file<sp/>path,<sp/>and<sp/>${2}<sp/>will<sp/>be<sp/>the<sp/>file</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>path<sp/>of<sp/>the<sp/>resulting<sp/>object<sp/>file.<sp/>For<sp/>a<sp/>linker<sp/>${1}<sp/>will<sp/>be<sp/>an<sp/>array</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>of<sp/>object<sp/>files<sp/>to<sp/>link,<sp/>and<sp/>${2}<sp/>will<sp/>be<sp/>the<sp/>resulting<sp/>binary</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>executable.<sp/>For<sp/>an<sp/>executable<sp/>test<sp/>fixture<sp/>${1}<sp/>is<sp/>either<sp/>the<sp/>binary</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>executable<sp/>itself<sp/>(when<sp/>using<sp/>a<sp/>local<sp/>toolchain<sp/>such<sp/>as<sp/>gcc)<sp/>or<sp/>a</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>binary<sp/>input<sp/>file<sp/>given<sp/>to<sp/>a<sp/>simulator<sp/>in<sp/>its<sp/>arguments.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Example<sp/>[:tools]<sp/>YAML<sp/>blurbs</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```yaml</highlight></codeline>
<codeline><highlight class="normal">:tools:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>:test_compiler:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>:executable:<sp/>compiler<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#exists<sp/>in<sp/>system<sp/>search<sp/>path</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>:name:<sp/>&apos;acme<sp/>test<sp/>compiler&apos;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>:arguments:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>-I&quot;$&quot;:<sp/>COLLECTION_PATHS_TEST_TOOLCHAIN_INCLUDE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#expands<sp/>to<sp/>-I<sp/>search<sp/>paths</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>-I&quot;$&quot;:<sp/>COLLECTION_PATHS_TEST_SUPPORT_SOURCE_INCLUDE_VENDOR<sp/><sp/><sp/>#expands<sp/>to<sp/>-I<sp/>search<sp/>paths</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>-D$:<sp/>COLLECTION_DEFINES_TEST_AND_VENDOR<sp/><sp/>#expands<sp/>to<sp/>all<sp/>-D<sp/>defined<sp/>symbols</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>--network-license<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#simple<sp/>command<sp/>line<sp/>argument</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>-optimize-level<sp/>4<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#simple<sp/>command<sp/>line<sp/>argument</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>&quot;#{`args.exe<sp/>-m<sp/>acme.prj`}&quot;<sp/><sp/><sp/>#in-line<sp/>ruby<sp/>sub<sp/>to<sp/>shell<sp/>out<sp/>&amp;<sp/>build<sp/>string<sp/>of<sp/>arguments</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>-c<sp/>${1}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#source<sp/>code<sp/>input<sp/>file<sp/>(Ruby<sp/>method<sp/>call<sp/>param<sp/>list<sp/>sub)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>-o<sp/>${2}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#object<sp/>file<sp/>output<sp/>(Ruby<sp/>method<sp/>call<sp/>param<sp/>list<sp/>sub)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>:test_linker:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>:executable:<sp/>/programs/acme/bin/linker.exe<sp/><sp/><sp/><sp/>#absolute<sp/>file<sp/>path</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>:name:<sp/>&apos;acme<sp/>test<sp/>linker&apos;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>:arguments:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>${1}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#list<sp/>of<sp/>object<sp/>files<sp/>to<sp/>link<sp/>(Ruby<sp/>method<sp/>call<sp/>param<sp/>list<sp/>sub)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>-l$-lib:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#inline<sp/>yaml<sp/>array<sp/>substitution<sp/>to<sp/>link<sp/>in<sp/>foo-lib<sp/>and<sp/>bar-lib</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>foo</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>bar</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>-o<sp/>${2}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#executable<sp/>file<sp/>output<sp/>(Ruby<sp/>method<sp/>call<sp/>param<sp/>list<sp/>sub)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>:test_fixture:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>:executable:<sp/>tools/bin/acme_simulator.exe<sp/><sp/>#relative<sp/>file<sp/>path<sp/>to<sp/>command<sp/>line<sp/>simulator</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>:name:<sp/>&apos;acme<sp/>test<sp/>fixture&apos;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>:stderr_redirect:<sp/>:win<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#inform<sp/>Ceedling<sp/>what<sp/>model<sp/>of<sp/>$stderr<sp/>capture<sp/>to<sp/>use</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>:arguments:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>-mem<sp/>large<sp/><sp/><sp/>#simple<sp/>command<sp/>line<sp/>argument</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>-f<sp/>&quot;${1}&quot;<sp/><sp/><sp/><sp/>#binary<sp/>executable<sp/>input<sp/>file<sp/>to<sp/>simulator<sp/>(Ruby<sp/>method<sp/>call<sp/>param<sp/>list<sp/>sub)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Resulting<sp/>command<sp/>line<sp/>constructions<sp/>from<sp/>preceding<sp/>example<sp/>[:tools]<sp/>YAML<sp/>blurbs</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&gt;<sp/>compiler<sp/>-I&quot;/usr/include”<sp/>-I”project/tests”</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-I&quot;project/tests/support”<sp/>-I”project/source”<sp/>-I”project/include”</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-DTEST<sp/>-DLONG_NAMES<sp/>-network-license<sp/>-optimize-level<sp/>4<sp/>arg-foo</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>arg-bar<sp/>arg-baz<sp/>-c<sp/>project/source/source.c<sp/>-o</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>build/tests/out/source.o</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">[notes:<sp/>(1.)<sp/>&quot;arg-foo<sp/>arg-bar<sp/>arg-baz&quot;<sp/>is<sp/>a<sp/>fabricated<sp/>example</highlight></codeline>
<codeline><highlight class="normal">string<sp/>collected<sp/>from<sp/>$stdout<sp/>as<sp/>a<sp/>result<sp/>of<sp/>shell<sp/>execution</highlight></codeline>
<codeline><highlight class="normal">of<sp/>args.exe</highlight></codeline>
<codeline><highlight class="normal">(2.)<sp/>the<sp/>-c<sp/>and<sp/>-o<sp/>arguments<sp/>are</highlight></codeline>
<codeline><highlight class="normal">fabricated<sp/>examples<sp/>simulating<sp/>a<sp/>single<sp/>compilation<sp/>step<sp/>for</highlight></codeline>
<codeline><highlight class="normal">a<sp/>test;<sp/>${1}<sp/>&amp;<sp/>${2}<sp/>are<sp/>single<sp/>files]</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&gt;<sp/>\programs\acme\bin\linker.exe<sp/>thing.o<sp/>unity.o</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>test_thing_runner.o<sp/>test_thing.o<sp/>mock_foo.o<sp/>mock_bar.o<sp/>-lfoo-lib</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-lbar-lib<sp/>-o<sp/>build\tests\out\test_thing.exe</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">[note:<sp/>in<sp/>this<sp/>scenario<sp/>${1}<sp/>is<sp/>an<sp/>array<sp/>of<sp/>all<sp/>the<sp/>object<sp/>files</highlight></codeline>
<codeline><highlight class="normal">needed<sp/>to<sp/>link<sp/>a<sp/>test<sp/>fixture<sp/>executable]</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&gt;<sp/>tools\bin\acme_simulator.exe<sp/>-mem<sp/>large<sp/>-f<sp/>&quot;build\tests\out\test_thing.bin<sp/>2&gt;&amp;1”</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">[note:<sp/>(1.)<sp/>:executable<sp/>could<sp/>have<sp/>simply<sp/>been<sp/>${1}<sp/>-<sp/>if<sp/>we<sp/>were<sp/>compiling</highlight></codeline>
<codeline><highlight class="normal">and<sp/>running<sp/>native<sp/>executables<sp/>instead<sp/>of<sp/>cross<sp/>compiling<sp/>(2.)<sp/>we&apos;re<sp/>using</highlight></codeline>
<codeline><highlight class="normal">$stderr<sp/>redirection<sp/>to<sp/>allow<sp/>us<sp/>to<sp/>capture<sp/>simulator<sp/>error<sp/>messages<sp/>to</highlight></codeline>
<codeline><highlight class="normal">$stdout<sp/>for<sp/>display<sp/>at<sp/>the<sp/>run&apos;s<sp/>conclusion]</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Notes:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>The<sp/>upper<sp/>case<sp/>names<sp/>are<sp/>Ruby<sp/>global<sp/>constants<sp/>that<sp/>Ceedling</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>builds</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>&quot;COLLECTION_&quot;<sp/>indicates<sp/>that<sp/>Ceedling<sp/>did<sp/>some<sp/>work<sp/>to<sp/>assemble</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>the<sp/>list.<sp/>For<sp/>instance,<sp/>expanding<sp/>path<sp/>globs,<sp/>combining<sp/>multiple</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>path<sp/>globs<sp/>into<sp/>a<sp/>convenient<sp/>summation,<sp/>etc.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>At<sp/>present,<sp/>$stderr<sp/>redirection<sp/>is<sp/>primarily<sp/>used<sp/>to<sp/>capture</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>errors<sp/>from<sp/>test<sp/>fixtures<sp/>so<sp/>that<sp/>they<sp/>can<sp/>be<sp/>displayed<sp/>at<sp/>the</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>conclusion<sp/>of<sp/>a<sp/>test<sp/>run.<sp/>For<sp/>instance,<sp/>if<sp/>a<sp/>simulator<sp/>detects</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>a<sp/>memory<sp/>access<sp/>violation<sp/>or<sp/>a<sp/>divide<sp/>by<sp/>zero<sp/>error,<sp/>this<sp/>notice</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>might<sp/>go<sp/>unseen<sp/>in<sp/>all<sp/>the<sp/>output<sp/>scrolling<sp/>past<sp/>in<sp/>a<sp/>terminal.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>The<sp/>preprocessing<sp/>tools<sp/>can<sp/>each<sp/>be<sp/>overridden<sp/>with<sp/>non-gcc</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>equivalents.<sp/>However,<sp/>this<sp/>is<sp/>an<sp/>advanced<sp/>feature<sp/>not<sp/>yet</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>documented<sp/>and<sp/>requires<sp/>that<sp/>the<sp/>replacement<sp/>toolchain<sp/>conform</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>to<sp/>the<sp/>same<sp/>conventions<sp/>used<sp/>by<sp/>gcc.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Ceedling<sp/>Collection<sp/>Used<sp/>in<sp/>Compilation**:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`COLLECTION_PATHS_TEST`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>All<sp/>test<sp/>paths</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`COLLECTION_PATHS_SOURCE`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>All<sp/>source<sp/>paths</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`COLLECTION_PATHS_INCLUDE`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>All<sp/>include<sp/>paths</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`COLLECTION_PATHS_SUPPORT`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>All<sp/>test<sp/>support<sp/>paths</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`COLLECTION_PATHS_SOURCE_AND_INCLUDE`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>All<sp/>source<sp/>and<sp/>include<sp/>paths</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`COLLECTION_PATHS_SOURCE_INCLUDE_VENDOR`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>All<sp/>source<sp/>and<sp/>include<sp/>paths<sp/>+<sp/>applicable<sp/>vendor<sp/>paths<sp/>(e.g.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>CException&apos;s<sp/>source<sp/>path<sp/>if<sp/>exceptions<sp/>enabled)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`COLLECTION_PATHS_TEST_TOOLCHAIN_INCLUDE`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>All<sp/>test<sp/>toolchain<sp/>include<sp/>paths</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`COLLECTION_PATHS_TEST_SUPPORT_SOURCE_INCLUDE`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>All<sp/>test,<sp/>source,<sp/>and<sp/>include<sp/>paths</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`COLLECTION_PATHS_TEST_SUPPORT_SOURCE_INCLUDE_VENDOR`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>All<sp/>test,<sp/>source,<sp/>include,<sp/>and<sp/>applicable<sp/>vendor<sp/>paths<sp/>(e.g.<sp/>Unity&apos;s</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>source<sp/>path<sp/>plus<sp/>CMock<sp/>and<sp/>CException&apos;s<sp/>source<sp/>paths<sp/>if<sp/>mocks<sp/>and</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>exceptions<sp/>are<sp/>enabled)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`COLLECTION_PATHS_RELEASE_TOOLCHAIN_INCLUDE`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>All<sp/>release<sp/>toolchain<sp/>include<sp/>paths</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`COLLECTION_DEFINES_TEST_AND_VENDOR`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>All<sp/>symbols<sp/>specified<sp/>in<sp/>[:defines][:test]<sp/>+<sp/>symbols<sp/>defined<sp/>for</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>enabled<sp/>vendor<sp/>tools<sp/>-<sp/>e.g.<sp/>[:unity][:defines],<sp/>[:cmock][:defines],</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>and<sp/>[:cexception][:defines]</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`COLLECTION_DEFINES_RELEASE_AND_VENDOR`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>All<sp/>symbols<sp/>specified<sp/>in<sp/>[:defines][:release]<sp/>plus<sp/>symbols<sp/>defined<sp/>by</highlight></codeline>
<codeline><highlight class="normal">[:cexception][:defines]<sp/>if<sp/>exceptions<sp/>are<sp/>ena<sp/>bled</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Notes:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>Other<sp/>collections<sp/>exist<sp/>within<sp/>Ceedling.<sp/>However,<sp/>they<sp/>are</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>only<sp/>useful<sp/>for<sp/>advanced<sp/>features<sp/>not<sp/>yet<sp/>documented.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>Wherever<sp/>multiple<sp/>path<sp/>lists<sp/>are<sp/>combined<sp/>for<sp/>use<sp/>Ceedling<sp/>prioritizes</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>path<sp/>groups<sp/>as<sp/>follows:<sp/>test<sp/>paths,<sp/>support<sp/>paths,<sp/>source<sp/>paths,<sp/>include</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>paths.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>This<sp/>can<sp/>be<sp/>useful,<sp/>for<sp/>instance,<sp/>in<sp/>certain<sp/>testing<sp/>scenarios</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>where<sp/>we<sp/>desire<sp/>Ceedling<sp/>or<sp/>the<sp/>compiler<sp/>to<sp/>find<sp/>a<sp/>stand-in<sp/>header<sp/>file</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>before<sp/>the<sp/>actual<sp/>source<sp/>header<sp/>file<sp/>of<sp/>the<sp/>same<sp/>name.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**plugins**:<sp/>Ceedling<sp/>extensions</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`load_paths`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>Base<sp/>paths<sp/>to<sp/>search<sp/>for<sp/>plugin<sp/>subdirectories<sp/>or<sp/>extra<sp/>ruby<sp/>functionalit</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>**Default**:<sp/>[]<sp/>(empty)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`enabled`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>List<sp/>of<sp/>plugins<sp/>to<sp/>be<sp/>used<sp/>-<sp/>a<sp/>plugin&apos;s<sp/>name<sp/>is<sp/>identical<sp/>to<sp/>the</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>subdirectory<sp/>that<sp/>contains<sp/>it<sp/>(and<sp/>the<sp/>name<sp/>of<sp/>certain<sp/>files<sp/>within</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>that<sp/>subdirectory)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>**Default**:<sp/>[]<sp/>(empty)</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Plugins<sp/>can<sp/>provide<sp/>a<sp/>variety<sp/>of<sp/>added<sp/>functionality<sp/>to<sp/>Ceedling.<sp/>In</highlight></codeline>
<codeline><highlight class="normal">general<sp/>use,<sp/>it&apos;s<sp/>assumed<sp/>that<sp/>at<sp/>least<sp/>one<sp/>reporting<sp/>plugin<sp/>will<sp/>be</highlight></codeline>
<codeline><highlight class="normal">used<sp/>to<sp/>format<sp/>test<sp/>results.<sp/>However,<sp/>if<sp/>no<sp/>reporting<sp/>plugins<sp/>are</highlight></codeline>
<codeline><highlight class="normal">specified,<sp/>Ceedling<sp/>will<sp/>print<sp/>to<sp/>`$stdout`<sp/>the<sp/>(quite<sp/>readable)<sp/>raw</highlight></codeline>
<codeline><highlight class="normal">test<sp/>results<sp/>from<sp/>all<sp/>test<sp/>fixtures<sp/>executed.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Example<sp/>[:plugins]<sp/>YAML<sp/>blurb</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```yaml</highlight></codeline>
<codeline><highlight class="normal">:plugins:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>:load_paths:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>project/tools/ceedling/plugins<sp/><sp/>#home<sp/>to<sp/>your<sp/>collection<sp/>of<sp/>plugin<sp/>directories</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>project/support<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#maybe<sp/>home<sp/>to<sp/>some<sp/>ruby<sp/>code<sp/>your<sp/>custom<sp/>plugins<sp/>share</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>:enabled:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>stdout_pretty_tests_report<sp/><sp/><sp/><sp/><sp/><sp/>#nice<sp/>test<sp/>results<sp/>at<sp/>your<sp/>command<sp/>line</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>our_custom_code_metrics_report<sp/><sp/>#maybe<sp/>you<sp/>needed<sp/>line<sp/>count<sp/>and<sp/>complexity<sp/>metrics,<sp/>so<sp/>you</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#created<sp/>a<sp/>plugin<sp/>to<sp/>scan<sp/>all<sp/>your<sp/>code<sp/>and<sp/>collect<sp/>that<sp/>info</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`stdout_pretty_tests_report`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>Prints<sp/>to<sp/>$stdout<sp/>a<sp/>well-formatted<sp/>list<sp/>of<sp/>ignored<sp/>and<sp/>failed<sp/>tests,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>final<sp/>test<sp/>counts,<sp/>and<sp/>any<sp/>extraneous<sp/>output<sp/>(e.g.<sp/>printf<sp/>statements</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>or<sp/>simulator<sp/>memory<sp/>errors)<sp/>collected<sp/>from<sp/>executing<sp/>the<sp/>test</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>fixtures.<sp/>Meant<sp/>to<sp/>be<sp/>used<sp/>with<sp/>runs<sp/>at<sp/>the<sp/>command<sp/>line.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`stdout_ide_tests_report`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>Prints<sp/>to<sp/>$stdout<sp/>simple<sp/>test<sp/>results<sp/>formatted<sp/>such<sp/>that<sp/>an<sp/>IDE</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>executing<sp/>test-related<sp/>Rake<sp/>tasks<sp/>can<sp/>recognize<sp/>file<sp/>paths<sp/>and<sp/>line</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>numbers<sp/>in<sp/>test<sp/>failures,<sp/>etc.<sp/>Thus,<sp/>you<sp/>can<sp/>click<sp/>a<sp/>test<sp/>result<sp/>in</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>your<sp/>IDE&apos;s<sp/>execution<sp/>window<sp/>and<sp/>jump<sp/>to<sp/>the<sp/>failure<sp/>(or<sp/>ignored<sp/>test)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>in<sp/>your<sp/>test<sp/>file<sp/>(obviously<sp/>meant<sp/>to<sp/>be<sp/>used<sp/>with<sp/>an<sp/>[IDE<sp/>like</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Eclipse][ide],<sp/>etc).</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>[ide]:<sp/>http://throwtheswitch.org/white-papers/using-with-ides.html</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`xml_tests_report`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>Creates<sp/>an<sp/>XML<sp/>file<sp/>of<sp/>test<sp/>results<sp/>in<sp/>the<sp/>xUnit<sp/>format<sp/>(handy<sp/>for</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Continuous<sp/>Integration<sp/>build<sp/>servers<sp/>or<sp/>as<sp/>input<sp/>to<sp/>other<sp/>reporting</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>tools).<sp/>Produces<sp/>a<sp/>file<sp/>report.xml<sp/>in<sp/>&lt;build<sp/>root&gt;/artifacts/tests.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`bullseye`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>Adds<sp/>additional<sp/>Rake<sp/>tasks<sp/>to<sp/>execute<sp/>tests<sp/>with<sp/>the<sp/>commercial<sp/>code</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>coverage<sp/>tool<sp/>provided<sp/>by<sp/>[Bullseye][].<sp/>See<sp/>readme.txt<sp/>inside<sp/>the<sp/>bullseye</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>plugin<sp/>directory<sp/>for<sp/>configuration<sp/>and<sp/>use<sp/>instructions.<sp/>Note:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Bullseye<sp/>only<sp/>works<sp/>with<sp/>certain<sp/>compilers<sp/>and<sp/>linkers<sp/>(healthy<sp/>list</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>of<sp/>supported<sp/>toolchains<sp/>though).</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>[bullseye]:<sp/>http://www.bullseye.com</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`gcov`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>Adds<sp/>additional<sp/>Rake<sp/>tasks<sp/>to<sp/>execute<sp/>tests<sp/>with<sp/>the<sp/>GNU<sp/>code<sp/>coverage</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>tool<sp/>[gcov][].<sp/>See<sp/>readme.txt<sp/>inside<sp/>the<sp/>gcov<sp/>directory<sp/>for<sp/>configuration</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>and<sp/>use<sp/>instructions.<sp/>Only<sp/>works<sp/>with<sp/>GNU<sp/>compiler<sp/>and<sp/>linker.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>[gcov]:<sp/>http://gcc.gnu.org/onlinedocs/gcc/Gcov.html</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`warnings_report`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>Scans<sp/>compiler<sp/>and<sp/>linker<sp/>`$stdout<sp/>/<sp/>$stderr`<sp/>output<sp/>for<sp/>the<sp/>word</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&apos;warning&apos;<sp/>(case<sp/>insensitive).<sp/>All<sp/>code<sp/>warnings<sp/>(or<sp/>tool<sp/>warnings)<sp/>are</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>logged<sp/>to<sp/>a<sp/>file<sp/>warnings.log<sp/>in<sp/>the<sp/>appropriate<sp/>`&lt;build</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>root&gt;/artifacts`<sp/>directory<sp/>(e.g.<sp/>test/<sp/>for<sp/>test<sp/>tasks,<sp/>`release/`<sp/>for<sp/>a</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>release<sp/>build,<sp/>or<sp/>even<sp/>`bullseye/`<sp/>for<sp/>bullseye<sp/>runs).</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Module<sp/>Generator</highlight></codeline>
<codeline><highlight class="normal">========================</highlight></codeline>
<codeline><highlight class="normal">Ceedling<sp/>includes<sp/>a<sp/>plugin<sp/>called<sp/>module_generator<sp/>that<sp/>will<sp/>create<sp/>a<sp/>source,<sp/>header<sp/>and<sp/>test<sp/>file<sp/>for<sp/>you.</highlight></codeline>
<codeline><highlight class="normal">There<sp/>are<sp/>several<sp/>possibilities<sp/>to<sp/>configure<sp/>this<sp/>plugin<sp/>through<sp/>your<sp/>project.yml<sp/>to<sp/>suit<sp/>your<sp/>project&apos;s<sp/>needs.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Directory<sp/>Structure</highlight></codeline>
<codeline><highlight class="normal">-------------------------------------------</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>default<sp/>configuration<sp/>for<sp/>directory/project<sp/>structure<sp/>is:</highlight></codeline>
<codeline><highlight class="normal">```yaml</highlight></codeline>
<codeline><highlight class="normal">:module_generator:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>:project_root:<sp/>./</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>:source_root:<sp/>src/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>:test_root:<sp/>test/</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">You<sp/>can<sp/>change<sp/>these<sp/>variables<sp/>in<sp/>your<sp/>project.yml<sp/>file<sp/>to<sp/>comply<sp/>with<sp/>your<sp/>project&apos;s<sp/>directory<sp/>structure.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">If<sp/>you<sp/>call<sp/>`ceedling<sp/>module:create`,<sp/>it<sp/>will<sp/>create<sp/>three<sp/>files:</highlight></codeline>
<codeline><highlight class="normal">1.<sp/>A<sp/>source<sp/>file<sp/>in<sp/>the<sp/>source_root</highlight></codeline>
<codeline><highlight class="normal">2.<sp/>A<sp/>header<sp/>file<sp/>in<sp/>the<sp/>source_root</highlight></codeline>
<codeline><highlight class="normal">3.<sp/>A<sp/>test<sp/>file<sp/>in<sp/>the<sp/>test_root</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">If<sp/>you<sp/>want<sp/>your<sp/>header<sp/>file<sp/>to<sp/>be<sp/>in<sp/>another<sp/>location,</highlight></codeline>
<codeline><highlight class="normal">you<sp/>can<sp/>specify<sp/>the<sp/>&apos;:inc_root:&quot;<sp/>in<sp/>your<sp/>project.yml<sp/>file:</highlight></codeline>
<codeline><highlight class="normal">```yaml</highlight></codeline>
<codeline><highlight class="normal">:module_generator:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>:inc_root:<sp/>inc/</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">The<sp/>module_generator<sp/>will<sp/>then<sp/>create<sp/>the<sp/>header<sp/>file<sp/>in<sp/>your<sp/>defined<sp/>&apos;:inc_root:&apos;.</highlight></codeline>
<codeline><highlight class="normal">By<sp/>default,<sp/>&apos;:inc_root:&apos;<sp/>is<sp/>not<sp/>defined<sp/>so<sp/>the<sp/>module_generator<sp/>will<sp/>use<sp/>the<sp/>source_root.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Sometimes,<sp/>your<sp/>project<sp/>can&apos;t<sp/>be<sp/>divided<sp/>into<sp/>a<sp/>single<sp/>src,<sp/>inc,<sp/>and<sp/>test<sp/>folder.<sp/>You<sp/>have<sp/>several<sp/>directories</highlight></codeline>
<codeline><highlight class="normal">with<sp/>sources/...,<sp/>something<sp/>like<sp/>this<sp/>for<sp/>example:</highlight></codeline>
<codeline><highlight class="normal">&lt;project_root&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/>-<sp/>myDriver</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>-<sp/>src</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>-<sp/>inc</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>-<sp/>test</highlight></codeline>
<codeline><highlight class="normal"><sp/>-<sp/>myOtherDriver</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>-<sp/>src</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>-<sp/>inc</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>-<sp/>test</highlight></codeline>
<codeline><highlight class="normal"><sp/>-<sp/>...</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Don&apos;t<sp/>worry,<sp/>you<sp/>don&apos;t<sp/>have<sp/>to<sp/>manually<sp/>create<sp/>the<sp/>source/header/test<sp/>files.</highlight></codeline>
<codeline><highlight class="normal">The<sp/>module_generator<sp/>can<sp/>accept<sp/>a<sp/>path<sp/>to<sp/>create<sp/>a<sp/>source_root/inc_root/test_root<sp/>folder<sp/>with<sp/>your<sp/>files:</highlight></codeline>
<codeline><highlight class="normal">`ceedling<sp/>module:create[&lt;module_root_path&gt;:&lt;module_name&gt;]`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">F.e.,<sp/>applied<sp/>to<sp/>the<sp/>above<sp/>project<sp/>structure:</highlight></codeline>
<codeline><highlight class="normal">`ceedling<sp/>module:create[myOtherDriver:driver]`</highlight></codeline>
<codeline><highlight class="normal">This<sp/>will<sp/>make<sp/>the<sp/>module_generator<sp/>run<sp/>in<sp/>the<sp/>subdirectory<sp/>&apos;myOtherDriver&apos;<sp/>and<sp/>generate<sp/>the<sp/>module<sp/>files</highlight></codeline>
<codeline><highlight class="normal">for<sp/>you<sp/>in<sp/>that<sp/>directory.<sp/>So,<sp/>this<sp/>command<sp/>will<sp/>generate<sp/>the<sp/>following<sp/>files:</highlight></codeline>
<codeline><highlight class="normal">1.<sp/>A<sp/>source<sp/>file<sp/>&apos;driver.c&apos;<sp/>in<sp/>&lt;project_root&gt;/myOtherDriver/&lt;source_root&gt;</highlight></codeline>
<codeline><highlight class="normal">2.<sp/>A<sp/>header<sp/>file<sp/>&apos;driver.h&apos;<sp/>in<sp/>&lt;project_root&gt;/myOtherDriver/&lt;source_root&gt;<sp/>(or<sp/>&lt;inc_root&gt;<sp/>if<sp/>specified)</highlight></codeline>
<codeline><highlight class="normal">3.<sp/>A<sp/>test<sp/>file<sp/>&apos;test_driver.c&apos;<sp/>in<sp/>&lt;project_root&gt;/myOtherDriver/&lt;test_root&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Naming</highlight></codeline>
<codeline><highlight class="normal">-------------------------------------------</highlight></codeline>
<codeline><highlight class="normal">By<sp/>default,<sp/>the<sp/>module_generator<sp/>will<sp/>generate<sp/>your<sp/>files<sp/>in<sp/>lowercase.</highlight></codeline>
<codeline><highlight class="normal">`ceedling<sp/>module:create[mydriver]`<sp/>and<sp/>`ceedling<sp/>module:create[myDriver]`(note<sp/>the<sp/>uppercase)<sp/>will<sp/>generate<sp/>the<sp/>same<sp/>files:</highlight></codeline>
<codeline><highlight class="normal">1.<sp/>mydriver.c</highlight></codeline>
<codeline><highlight class="normal">2.<sp/>mydriver.h</highlight></codeline>
<codeline><highlight class="normal">3.<sp/>test_mydriver.c</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">You<sp/>can<sp/>configure<sp/>the<sp/>module_generator<sp/>to<sp/>use<sp/>a<sp/>differect<sp/>naming<sp/>mechanism<sp/>through<sp/>the<sp/>project.yml:</highlight></codeline>
<codeline><highlight class="normal">```yaml</highlight></codeline>
<codeline><highlight class="normal">:module_generator:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>:naming:<sp/>&quot;camel&quot;</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">There<sp/>are<sp/>other<sp/>possibilities<sp/>as<sp/>well<sp/>(bumpy,<sp/>camel,<sp/>snake,<sp/>caps).</highlight></codeline>
<codeline><highlight class="normal">Refer<sp/>to<sp/>the<sp/>unity<sp/>module<sp/>generator<sp/>for<sp/>more<sp/>info<sp/>(the<sp/>unity<sp/>module<sp/>generator<sp/>is<sp/>used<sp/>under<sp/>the<sp/>hood<sp/>by<sp/>module_generator).</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Advanced<sp/>Topics<sp/>(Coming)</highlight></codeline>
<codeline><highlight class="normal">========================</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Modifying<sp/>Your<sp/>Configuration<sp/>without<sp/>Modifying<sp/>Your<sp/>Project<sp/>File:<sp/>Option<sp/>Files<sp/>&amp;<sp/>User<sp/>Files</highlight></codeline>
<codeline><highlight class="normal">-------------------------------------------------------------------------------------------</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Modifying<sp/>your<sp/>project<sp/>file<sp/>without<sp/>modifying<sp/>your<sp/>project<sp/>file</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Debugging<sp/>and/or<sp/>printf()</highlight></codeline>
<codeline><highlight class="normal">-------------------------</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">When<sp/>you<sp/>gotta<sp/>get<sp/>your<sp/>hands<sp/>dirty...</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Ceedling<sp/>Plays<sp/>Nice<sp/>with<sp/>Others<sp/>-<sp/>Using<sp/>Ceedling<sp/>for<sp/>Tests<sp/>Alongside<sp/>Another<sp/>Release<sp/>Build<sp/>Setup</highlight></codeline>
<codeline><highlight class="normal">------------------------------------------------------------------------------------------------</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">You&apos;ve<sp/>got<sp/>options.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Adding<sp/>Handy<sp/>Rake<sp/>Tasks<sp/>for<sp/>Your<sp/>Project<sp/>(without<sp/>Fancy<sp/>Pants<sp/>Custom<sp/>Plugins)</highlight></codeline>
<codeline><highlight class="normal">-----------------------------------------------------------------------------</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Simple<sp/>as<sp/>snot.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Working<sp/>with<sp/>Non-Desktop<sp/>Testing<sp/>Environments</highlight></codeline>
<codeline><highlight class="normal">---------------------------------------------</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">For<sp/>those<sp/>crazy<sp/>platforms<sp/>lacking<sp/>command<sp/>line<sp/>simulators<sp/>and<sp/>for<sp/>which</highlight></codeline>
<codeline><highlight class="normal">cross-compiling<sp/>on<sp/>the<sp/>desktop<sp/>just<sp/>ain&apos;t<sp/>gonna<sp/>get<sp/>it<sp/>done.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Creating<sp/>Custom<sp/>Plugins</highlight></codeline>
<codeline><highlight class="normal">-----------------------</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Oh<sp/>boy.<sp/>This<sp/>is<sp/>going<sp/>to<sp/>take<sp/>some<sp/>explaining.</highlight></codeline>
    </programlisting>
    <location file="UnitTestFramework/vendor/ceedling/docs/CeedlingPacket.md"/>
  </compounddef>
</doxygen>
