<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="d8/dec/md__unit_test_framework_vendor_ceedling_docs__unity_configuration_guide" kind="page">
    <compoundname>md_UnitTestFramework_vendor_ceedling_docs_UnityConfigurationGuide</compoundname>
    <title>Unity Configuration Guide</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<sect1 id="d8/dec/md__unit_test_framework_vendor_ceedling_docs__unity_configuration_guide_1autotoc_md231">
<title>C Standards, Compilers and Microcontrollers</title>
<para>The embedded software world contains its challenges. Compilers support different revisions of the C Standard. They ignore requirements in places, sometimes to make the language more usable in some special regard. Sometimes it&apos;s to simplify their support. Sometimes it&apos;s due to specific quirks of the microcontroller they are targeting. Simulators add another dimension to this menagerie.</para>
<para>Unity is designed to run on almost anything that is targeted by a C compiler. It would be awesome if this could be done with zero configuration. While there are some targets that come close to this dream, it is sadly not universal. It is likely that you are going to need at least a couple of the configuration options described in this document.</para>
<para>All of Unity&apos;s configuration options are <computeroutput>#defines</computeroutput>. Most of these are simple definitions. A couple are macros with arguments. They live inside the <ref refid="d8/de3/unity__internals_8h" kindref="compound">unity_internals.h</ref> header file. We don&apos;t necessarily recommend opening that file unless you really need to. That file is proof that a cross-platform library is challenging to build. From a more positive perspective, it is also proof that a great deal of complexity can be centralized primarily to one place to provide a more consistent and simple experience elsewhere.</para>
<sect2 id="d8/dec/md__unit_test_framework_vendor_ceedling_docs__unity_configuration_guide_1autotoc_md232">
<title>Using These Options</title>
<para>It doesn&apos;t matter if you&apos;re using a target-specific compiler and a simulator or a native compiler. In either case, you&apos;ve got a couple choices for configuring these options:</para>
<para><orderedlist>
<listitem><para>Because these options are specified via C defines, you can pass most of these options to your compiler through command line compiler flags. Even if you&apos;re using an embedded target that forces you to use their overbearing IDE for all configuration, there will be a place somewhere in your project to configure defines for your compiler.</para>
</listitem><listitem><para>You can create a custom <computeroutput>unity_config.h</computeroutput> configuration file (present in your toolchain&apos;s search paths). In this file, you will list definitions and macros specific to your target. All you must do is define <computeroutput>UNITY_INCLUDE_CONFIG_H</computeroutput> and Unity will rely on <computeroutput>unity_config.h</computeroutput> for any further definitions it may need.</para>
</listitem></orderedlist>
</para>
</sect2>
</sect1>
<sect1 id="d8/dec/md__unit_test_framework_vendor_ceedling_docs__unity_configuration_guide_1autotoc_md233">
<title>The Options</title>
<sect2 id="d8/dec/md__unit_test_framework_vendor_ceedling_docs__unity_configuration_guide_1autotoc_md234">
<title>Integer Types</title>
<para>If you&apos;ve been a C developer for long, you probably already know that C&apos;s concept of an integer varies from target to target. The C Standard has rules about the <computeroutput>int</computeroutput> matching the register size of the target microprocessor. It has rules about the <computeroutput>int</computeroutput> and how its size relates to other integer types. An <computeroutput>int</computeroutput> on one target might be 16 bits while on another target it might be 64. There are more specific types in compilers compliant with C99 or later, but that&apos;s certainly not every compiler you are likely to encounter. Therefore, Unity has a number of features for helping to adjust itself to match your required integer sizes. It starts off by trying to do it automatically.</para>
<sect4 id="d8/dec/md__unit_test_framework_vendor_ceedling_docs__unity_configuration_guide_1autotoc_md235">
<title>&lt;tt&gt;UNITY_EXCLUDE_STDINT_H&lt;/tt&gt;</title>
<para>The first thing that Unity does to guess your types is check <computeroutput>stdint.h</computeroutput>. This file includes defines like <computeroutput>UINT_MAX</computeroutput> that Unity can use to learn a lot about your system. It&apos;s possible you don&apos;t want it to do this (um. why not?) or (more likely) it&apos;s possible that your system doesn&apos;t support <computeroutput>stdint.h</computeroutput>. If that&apos;s the case, you&apos;re going to want to define this. That way, Unity will know to skip the inclusion of this file and you won&apos;t be left with a compiler error.</para>
<para><emphasis>Example:</emphasis> #define UNITY_EXCLUDE_STDINT_H</para>
</sect4>
<sect4 id="d8/dec/md__unit_test_framework_vendor_ceedling_docs__unity_configuration_guide_1autotoc_md236">
<title>&lt;tt&gt;UNITY_EXCLUDE_LIMITS_H&lt;/tt&gt;</title>
<para>The second attempt to guess your types is to check <computeroutput>limits.h</computeroutput>. Some compilers that don&apos;t support <computeroutput>stdint.h</computeroutput> could include <computeroutput>limits.h</computeroutput> instead. If you don&apos;t want Unity to check this file either, define this to make it skip the inclusion.</para>
<para><emphasis>Example:</emphasis> #define UNITY_EXCLUDE_LIMITS_H</para>
<para>If you&apos;ve disabled both of the automatic options above, you&apos;re going to have to do the configuration yourself. Don&apos;t worry. Even this isn&apos;t too bad... there are just a handful of defines that you are going to specify if you don&apos;t like the defaults.</para>
</sect4>
<sect4 id="d8/dec/md__unit_test_framework_vendor_ceedling_docs__unity_configuration_guide_1autotoc_md237">
<title>&lt;tt&gt;UNITY_INT_WIDTH&lt;/tt&gt;</title>
<para>Define this to be the number of bits an <computeroutput>int</computeroutput> takes up on your system. The default, if not autodetected, is 32 bits.</para>
<para><emphasis>Example:</emphasis> #define UNITY_INT_WIDTH 16</para>
</sect4>
<sect4 id="d8/dec/md__unit_test_framework_vendor_ceedling_docs__unity_configuration_guide_1autotoc_md238">
<title>&lt;tt&gt;UNITY_LONG_WIDTH&lt;/tt&gt;</title>
<para>Define this to be the number of bits a <computeroutput>long</computeroutput> takes up on your system. The default, if not autodetected, is 32 bits. This is used to figure out what kind of 64-bit support your system can handle. Does it need to specify a <computeroutput>long</computeroutput> or a <computeroutput>long long</computeroutput> to get a 64-bit value. On 16-bit systems, this option is going to be ignored.</para>
<para><emphasis>Example:</emphasis> #define UNITY_LONG_WIDTH 16</para>
</sect4>
<sect4 id="d8/dec/md__unit_test_framework_vendor_ceedling_docs__unity_configuration_guide_1autotoc_md239">
<title>&lt;tt&gt;UNITY_POINTER_WIDTH&lt;/tt&gt;</title>
<para>Define this to be the number of bits a pointer takes up on your system. The default, if not autodetected, is 32-bits. If you&apos;re getting ugly compiler warnings about casting from pointers, this is the one to look at.</para>
<para><emphasis>Example:</emphasis> #define UNITY_POINTER_WIDTH 64</para>
</sect4>
<sect4 id="d8/dec/md__unit_test_framework_vendor_ceedling_docs__unity_configuration_guide_1autotoc_md240">
<title>&lt;tt&gt;UNITY_SUPPORT_64&lt;/tt&gt;</title>
<para>Unity will automatically include 64-bit support if it auto-detects it, or if your <computeroutput>int</computeroutput>, <computeroutput>long</computeroutput>, or pointer widths are greater than 32-bits. Define this to enable 64-bit support if none of the other options already did it for you. There can be a significant size and speed impact to enabling 64-bit support on small targets, so don&apos;t define it if you don&apos;t need it.</para>
<para><emphasis>Example:</emphasis> #define UNITY_SUPPORT_64</para>
</sect4>
</sect2>
<sect2 id="d8/dec/md__unit_test_framework_vendor_ceedling_docs__unity_configuration_guide_1autotoc_md241">
<title>Floating Point Types</title>
<para>In the embedded world, it&apos;s not uncommon for targets to have no support for floating point operations at all or to have support that is limited to only single precision. We are able to guess integer sizes on the fly because integers are always available in at least one size. Floating point, on the other hand, is sometimes not available at all. Trying to include <computeroutput>float.h</computeroutput> on these platforms would result in an error. This leaves manual configuration as the only option.</para>
<sect4 id="d8/dec/md__unit_test_framework_vendor_ceedling_docs__unity_configuration_guide_1autotoc_md242">
<title>&lt;tt&gt;UNITY_INCLUDE_FLOAT&lt;/tt&gt;</title>
</sect4>
<sect4 id="d8/dec/md__unit_test_framework_vendor_ceedling_docs__unity_configuration_guide_1autotoc_md243">
<title>&lt;tt&gt;UNITY_EXCLUDE_FLOAT&lt;/tt&gt;</title>
</sect4>
<sect4 id="d8/dec/md__unit_test_framework_vendor_ceedling_docs__unity_configuration_guide_1autotoc_md244">
<title>&lt;tt&gt;UNITY_INCLUDE_DOUBLE&lt;/tt&gt;</title>
</sect4>
<sect4 id="d8/dec/md__unit_test_framework_vendor_ceedling_docs__unity_configuration_guide_1autotoc_md245">
<title>&lt;tt&gt;UNITY_EXCLUDE_DOUBLE&lt;/tt&gt;</title>
<para>By default, Unity guesses that you will want single precision floating point support, but not double precision. It&apos;s easy to change either of these using the include and exclude options here. You may include neither, either, or both, as suits your needs. For features that are enabled, the following floating point options also become available.</para>
<para><emphasis>Example:</emphasis> <verbatim>    //what manner of strange processor is this?
    #define UNITY_EXCLUDE_FLOAT
    #define UNITY_INCLUDE_DOUBLE
</verbatim></para>
</sect4>
<sect4 id="d8/dec/md__unit_test_framework_vendor_ceedling_docs__unity_configuration_guide_1autotoc_md246">
<title>&lt;tt&gt;UNITY_EXCLUDE_FLOAT_PRINT&lt;/tt&gt;</title>
<para>Unity aims for as small of a footprint as possible and avoids most standard library calls (some embedded platforms don’t have a standard library!). Because of this, its routines for printing integer values are minimalist and hand-coded. Therefore, the display of floating point values during a failure are optional. By default, Unity will print the actual results of floating point assertion failure (e.g. ”Expected 4.56 Was 4.68”). To not include this extra support, you can use this define to instead respond to a failed assertion with a message like ”Values Not Within Delta”. If you would like verbose failure messages for floating point assertions, use these options to give more explicit failure messages.</para>
<para><emphasis>Example:</emphasis> #define UNITY_EXCLUDE_FLOAT_PRINT</para>
</sect4>
<sect4 id="d8/dec/md__unit_test_framework_vendor_ceedling_docs__unity_configuration_guide_1autotoc_md247">
<title>&lt;tt&gt;UNITY_FLOAT_TYPE&lt;/tt&gt;</title>
<para>If enabled, Unity assumes you want your <computeroutput>FLOAT</computeroutput> asserts to compare standard C floats. If your compiler supports a specialty floating point type, you can always override this behavior by using this definition.</para>
<para><emphasis>Example:</emphasis> #define UNITY_FLOAT_TYPE float16_t</para>
</sect4>
<sect4 id="d8/dec/md__unit_test_framework_vendor_ceedling_docs__unity_configuration_guide_1autotoc_md248">
<title>&lt;tt&gt;UNITY_DOUBLE_TYPE&lt;/tt&gt;</title>
<para>If enabled, Unity assumes you want your <computeroutput>DOUBLE</computeroutput> asserts to compare standard C doubles. If you would like to change this, you can specify something else by using this option. For example, defining <computeroutput>UNITY_DOUBLE_TYPE</computeroutput> to <computeroutput>long double</computeroutput> could enable gargantuan floating point types on your 64-bit processor instead of the standard <computeroutput>double</computeroutput>.</para>
<para><emphasis>Example:</emphasis> #define UNITY_DOUBLE_TYPE long double</para>
</sect4>
<sect4 id="d8/dec/md__unit_test_framework_vendor_ceedling_docs__unity_configuration_guide_1autotoc_md249">
<title>&lt;tt&gt;UNITY_FLOAT_PRECISION&lt;/tt&gt;</title>
</sect4>
<sect4 id="d8/dec/md__unit_test_framework_vendor_ceedling_docs__unity_configuration_guide_1autotoc_md250">
<title>&lt;tt&gt;UNITY_DOUBLE_PRECISION&lt;/tt&gt;</title>
<para>If you look up <computeroutput>UNITY_ASSERT_EQUAL_FLOAT</computeroutput> and <computeroutput>UNITY_ASSERT_EQUAL_DOUBLE</computeroutput> as documented in the big daddy Unity Assertion Guide, you will learn that they are not really asserting that two values are equal but rather that two values are &quot;close enough&quot; to equal. &quot;Close enough&quot; is controlled by these precision configuration options. If you are working with 32-bit floats and/or 64-bit doubles (the normal on most processors), you should have no need to change these options. They are both set to give you approximately 1 significant bit in either direction. The float precision is 0.00001 while the double is 10-12. For further details on how this works, see the appendix of the Unity Assertion Guide.</para>
<para><emphasis>Example:</emphasis> #define UNITY_FLOAT_PRECISION 0.001f</para>
</sect4>
</sect2>
<sect2 id="d8/dec/md__unit_test_framework_vendor_ceedling_docs__unity_configuration_guide_1autotoc_md251">
<title>Toolset Customization</title>
<para>In addition to the options listed above, there are a number of other options which will come in handy to customize Unity&apos;s behavior for your specific toolchain. It is possible that you may not need to touch any of these... but certain platforms, particularly those running in simulators, may need to jump through extra hoops to run properly. These macros will help in those situations.</para>
<sect4 id="d8/dec/md__unit_test_framework_vendor_ceedling_docs__unity_configuration_guide_1autotoc_md252">
<title>&lt;tt&gt;UNITY_OUTPUT_CHAR(a)&lt;/tt&gt;</title>
</sect4>
<sect4 id="d8/dec/md__unit_test_framework_vendor_ceedling_docs__unity_configuration_guide_1autotoc_md253">
<title>&lt;tt&gt;UNITY_OUTPUT_FLUSH()&lt;/tt&gt;</title>
</sect4>
<sect4 id="d8/dec/md__unit_test_framework_vendor_ceedling_docs__unity_configuration_guide_1autotoc_md254">
<title>&lt;tt&gt;UNITY_OUTPUT_START()&lt;/tt&gt;</title>
</sect4>
<sect4 id="d8/dec/md__unit_test_framework_vendor_ceedling_docs__unity_configuration_guide_1autotoc_md255">
<title>&lt;tt&gt;UNITY_OUTPUT_COMPLETE()&lt;/tt&gt;</title>
<para>By default, Unity prints its results to <computeroutput>stdout</computeroutput> as it runs. This works perfectly fine in most situations where you are using a native compiler for testing. It works on some simulators as well so long as they have <computeroutput>stdout</computeroutput> routed back to the command line. There are times, however, where the simulator will lack support for dumping results or you will want to route results elsewhere for other reasons. In these cases, you should define the <computeroutput>UNITY_OUTPUT_CHAR</computeroutput> macro. This macro accepts a single character at a time (as an <computeroutput>int</computeroutput>, since this is the parameter type of the standard C <computeroutput>putchar</computeroutput> function most commonly used). You may replace this with whatever function call you like.</para>
<para><emphasis>Example:</emphasis> Say you are forced to run your test suite on an embedded processor with no <computeroutput>stdout</computeroutput> option. You decide to route your test result output to a custom serial <computeroutput>RS232_putc()</computeroutput> function you wrote like thus: #include &quot;RS232_header.h&quot; ... #define <ref refid="d8/de3/unity__internals_8h_1a7f32cab7edafc4634a8faa14b3e0042c" kindref="member">UNITY_OUTPUT_CHAR(a)</ref> RS232_putc(a) #define <ref refid="d8/de3/unity__internals_8h_1a96e6c4faeb1b01d3f3dc00aabe4eccc2" kindref="member">UNITY_OUTPUT_START()</ref> RS232_config(115200,1,8,0) #define <ref refid="d8/de3/unity__internals_8h_1a458886b9a590fda474d4467fa40a2367" kindref="member">UNITY_OUTPUT_FLUSH()</ref> RS232_flush() #define <ref refid="d8/de3/unity__internals_8h_1a05bb0df6aae73691385d7aca5b50aa93" kindref="member">UNITY_OUTPUT_COMPLETE()</ref> RS232_close()</para>
<para><emphasis>Note:</emphasis> <computeroutput><ref refid="d8/de3/unity__internals_8h_1a458886b9a590fda474d4467fa40a2367" kindref="member">UNITY_OUTPUT_FLUSH()</ref></computeroutput> can be set to the standard out flush function simply by specifying <computeroutput>UNITY_USE_FLUSH_STDOUT</computeroutput>. No other defines are required.</para>
</sect4>
<sect4 id="d8/dec/md__unit_test_framework_vendor_ceedling_docs__unity_configuration_guide_1autotoc_md256">
<title>&lt;tt&gt;UNITY_WEAK_ATTRIBUTE&lt;/tt&gt;</title>
</sect4>
<sect4 id="d8/dec/md__unit_test_framework_vendor_ceedling_docs__unity_configuration_guide_1autotoc_md257">
<title>&lt;tt&gt;UNITY_WEAK_PRAGMA&lt;/tt&gt;</title>
</sect4>
<sect4 id="d8/dec/md__unit_test_framework_vendor_ceedling_docs__unity_configuration_guide_1autotoc_md258">
<title>&lt;tt&gt;UNITY_NO_WEAK&lt;/tt&gt;</title>
<para>For some targets, Unity can make the otherwise required <ref refid="d5/d39/test__mpb_time_base_8c_1a63326a1b70b6e3f070e51687798e02de" kindref="member">setUp()</ref> and <ref refid="d5/d39/test__mpb_time_base_8c_1ab804e0f66def63262c1d6b4e3d2a2bd7" kindref="member">tearDown()</ref> functions optional. This is a nice convenience for test writers since setUp and tearDown don’t often actually do anything. If you’re using gcc or clang, this option is automatically defined for you. Other compilers can also support this behavior, if they support a C feature called weak functions. A weak function is a function that is compiled into your executable unless a non-weak version of the same function is defined elsewhere. If a non-weak version is found, the weak version is ignored as if it never existed. If your compiler supports this feature, you can let Unity know by defining UNITY_WEAK_ATTRIBUTE or UNITY_WEAK_PRAGMA as the function attributes that would need to be applied to identify a function as weak. If your compiler lacks support for weak functions, you will always need to define setUp and tearDown functions (though they can be and often will be just empty). You can also force Unity to NOT use weak functions by defining UNITY_NO_WEAK. The most common options for this feature are:</para>
<para><emphasis>Example:</emphasis> #define UNITY_WEAK_ATTRIBUTE weak #define UNITY_WEAK_ATTRIBUTE <bold>attribute</bold>((weak)) #define UNITY_WEAK_PRAGMA #define UNITY_NO_WEAK</para>
</sect4>
<sect4 id="d8/dec/md__unit_test_framework_vendor_ceedling_docs__unity_configuration_guide_1autotoc_md259">
<title>&lt;tt&gt;UNITY_PTR_ATTRIBUTE&lt;/tt&gt;</title>
<para>Some compilers require a custom attribute to be assigned to pointers, like <computeroutput>near</computeroutput> or <computeroutput>far</computeroutput>. In these cases, you can give Unity a safe default for these by defining this option with the attribute you would like.</para>
<para><emphasis>Example:</emphasis> #define UNITY_PTR_ATTRIBUTE <bold>attribute</bold>((far)) #define UNITY_PTR_ATTRIBUTE near</para>
</sect4>
<sect4 id="d8/dec/md__unit_test_framework_vendor_ceedling_docs__unity_configuration_guide_1autotoc_md260">
<title>&lt;tt&gt;UNITY_PRINT_EOL&lt;/tt&gt;</title>
<para>By default, Unity outputs <linebreak/>
 at the end of each line of output. This is easy to parse by the scripts, by Ceedling, etc, but it might not be ideal for YOUR system. Feel free to override this and to make it whatever you wish.</para>
<para><emphasis>Example:</emphasis> #define UNITY_PRINT_EOL { UNITY_OUTPUT_CHAR(&apos;\r&apos;); UNITY_OUTPUT_CHAR(&apos;<linebreak/>
&apos;) }</para>
</sect4>
<sect4 id="d8/dec/md__unit_test_framework_vendor_ceedling_docs__unity_configuration_guide_1autotoc_md261">
<title>&lt;tt&gt;UNITY_EXCLUDE_DETAILS&lt;/tt&gt;</title>
<para>This is an option for if you absolutely must squeeze every byte of memory out of your system. Unity stores a set of internal scratchpads which are used to pass extra detail information around. It&apos;s used by systems like CMock in order to report which function or argument flagged an error. If you&apos;re not using CMock and you&apos;re not using these details for other things, then you can exclude them.</para>
<para><emphasis>Example:</emphasis> #define UNITY_EXCLUDE_DETAILS</para>
</sect4>
<sect4 id="d8/dec/md__unit_test_framework_vendor_ceedling_docs__unity_configuration_guide_1autotoc_md262">
<title>&lt;tt&gt;UNITY_EXCLUDE_SETJMP&lt;/tt&gt;</title>
<para>If your embedded system doesn&apos;t support the standard library setjmp, you can exclude Unity&apos;s reliance on this by using this define. This dropped dependence comes at a price, though. You will be unable to use custom helper functions for your tests, and you will be unable to use tools like CMock. Very likely, if your compiler doesn&apos;t support setjmp, you wouldn&apos;t have had the memory space for those things anyway, though... so this option exists for those situations.</para>
<para><emphasis>Example:</emphasis> #define UNITY_EXCLUDE_SETJMP</para>
</sect4>
<sect4 id="d8/dec/md__unit_test_framework_vendor_ceedling_docs__unity_configuration_guide_1autotoc_md263">
<title>&lt;tt&gt;UNITY_OUTPUT_COLOR&lt;/tt&gt;</title>
<para>If you want to add color using ANSI escape codes you can use this define. t <emphasis>Example:</emphasis> #define UNITY_OUTPUT_COLOR</para>
</sect4>
</sect2>
</sect1>
<sect1 id="d8/dec/md__unit_test_framework_vendor_ceedling_docs__unity_configuration_guide_1autotoc_md264">
<title>Getting Into The Guts</title>
<para>There will be cases where the options above aren&apos;t quite going to get everything perfect. They are likely sufficient for any situation where you are compiling and executing your tests with a native toolchain (e.g. clang on Mac). These options may even get you through the majority of cases encountered in working with a target simulator run from your local command line. But especially if you must run your test suite on your target hardware, your Unity configuration will require special help. This special help will usually reside in one of two places: the <computeroutput><ref refid="d4/db7/test__mpb_time_base__runner_8c_1a840291bc02cba5474a4cb46a9b9566fe" kindref="member">main()</ref></computeroutput> function or the <computeroutput>RUN_TEST</computeroutput> macro. Let&apos;s look at how these work.</para>
<sect4 id="d8/dec/md__unit_test_framework_vendor_ceedling_docs__unity_configuration_guide_1autotoc_md265">
<title>&lt;tt&gt;main()&lt;/tt&gt;</title>
<para>Each test module is compiled and run on its own, separate from the other test files in your project. Each test file, therefore, has a <computeroutput>main</computeroutput> function. This <computeroutput>main</computeroutput> function will need to contain whatever code is necessary to initialize your system to a workable state. This is particularly true for situations where you must set up a memory map or initialize a communication channel for the output of your test results.</para>
<para>A simple main function looks something like this: <verbatim>    int main(void) {
        UNITY_BEGIN();
        RUN_TEST(test_TheFirst);
        RUN_TEST(test_TheSecond);
        RUN_TEST(test_TheThird);
        return UNITY_END();
    }
</verbatim> You can see that our main function doesn&apos;t bother taking any arguments. For our most barebones case, we&apos;ll never have arguments because we just run all the tests each time. Instead, we start by calling <computeroutput>UNITY_BEGIN</computeroutput>. We run each test (in whatever order we wish). Finally, we call <computeroutput>UNITY_END</computeroutput>, returning its return value (which is the total number of failures).</para>
<para>It should be easy to see that you can add code before any test cases are run or after all the test cases have completed. This allows you to do any needed system-wide setup or teardown that might be required for your special circumstances.</para>
</sect4>
<sect4 id="d8/dec/md__unit_test_framework_vendor_ceedling_docs__unity_configuration_guide_1autotoc_md266">
<title>&lt;tt&gt;RUN_TEST&lt;/tt&gt;</title>
<para>The <computeroutput>RUN_TEST</computeroutput> macro is called with each test case function. Its job is to perform whatever setup and teardown is necessary for executing a single test case function. This includes catching failures, calling the test module&apos;s <computeroutput><ref refid="d5/d39/test__mpb_time_base_8c_1a63326a1b70b6e3f070e51687798e02de" kindref="member">setUp()</ref></computeroutput> and <computeroutput><ref refid="d5/d39/test__mpb_time_base_8c_1ab804e0f66def63262c1d6b4e3d2a2bd7" kindref="member">tearDown()</ref></computeroutput> functions, and calling <computeroutput><ref refid="d5/ddd/unity_8c_1a44f03f0124e59f6996da61946cc2a58e" kindref="member">UnityConcludeTest()</ref></computeroutput>. If using CMock or test coverage, there will be additional stubs in use here. A simple minimalist RUN_TEST macro looks something like this: <verbatim>    #define RUN_TEST(testfunc) \
        UNITY_NEW_TEST(#testfunc) \
        if (TEST_PROTECT()) { \
            setUp(); \
            testfunc(); \
        } \
        if (TEST_PROTECT() &amp;&amp; (!TEST_IS_IGNORED)) \
            tearDown(); \
        UnityConcludeTest();
</verbatim> So that&apos;s quite a macro, huh? It gives you a glimpse of what kind of stuff Unity has to deal with for every single test case. For each test case, we declare that it is a new test. Then we run <computeroutput>setUp</computeroutput> and our test function. These are run within a <computeroutput>TEST_PROTECT</computeroutput> block, the function of which is to handle failures that occur during the test. Then, assuming our test is still running and hasn&apos;t been ignored, we run <computeroutput>tearDown</computeroutput>. No matter what, our last step is to conclude this test before moving on to the next.</para>
<para>Let&apos;s say you need to add a call to <computeroutput>fsync</computeroutput> to force all of your output data to flush to a file after each test. You could easily insert this after your <computeroutput>UnityConcludeTest</computeroutput> call. Maybe you want to write an xml tag before and after each result set. Again, you could do this by adding lines to this macro. Updates to this macro are for the occasions when you need an action before or after every single test case throughout your entire suite of tests.</para>
</sect4>
</sect1>
<sect1 id="d8/dec/md__unit_test_framework_vendor_ceedling_docs__unity_configuration_guide_1autotoc_md267">
<title>Happy Porting</title>
<para>The defines and macros in this guide should help you port Unity to just about any C target we can imagine. If you run into a snag or two, don&apos;t be afraid of asking for help on the forums. We love a good challenge!</para>
<para><emphasis>Find The Latest of This And More at <ulink url="https://throwtheswitch.org">ThrowTheSwitch.org</ulink></emphasis> </para>
</sect1>
    </detaileddescription>
    <location file="UnitTestFramework/vendor/ceedling/docs/UnityConfigurationGuide.md"/>
  </compounddef>
</doxygen>
